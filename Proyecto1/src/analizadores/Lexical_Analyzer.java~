/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LexicalAnalyzer.jflex</tt>
 */
public class Lexical_Analyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 15, 45, 43, 43,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    44,  0,  4,  0, 12,  0,  0,  5, 36, 37, 11, 31, 39, 32,  2, 10, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 38,  0,  0,  0,  0, 
     0, 27, 42, 20, 26, 24, 22, 41, 17, 19, 17, 17, 28, 34,  8, 21, 
    33, 17, 25, 30,  9, 35, 23, 17, 17, 40, 17,  0,  7,  0,  0, 16, 
     0, 27, 42, 20, 26, 24, 22, 41, 17, 19, 17, 17, 28, 34,  8, 21, 
    33, 17, 25, 30,  9, 35, 23, 17, 17, 40, 17, 13,  3, 14,  0,  0, 
     0,  0,  0,  0,  0, 45,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\1\1\4\1\5"+
    "\10\1\1\6\1\7\2\1\1\10\1\11\1\12\1\13"+
    "\1\1\2\0\1\14\1\0\1\15\4\0\1\16\5\0"+
    "\1\17\12\0\1\20\1\15\1\0\1\21\2\0\1\22"+
    "\6\0\1\23\3\0\1\24\7\0\1\25\3\0\1\26"+
    "\22\0\1\27\5\0\1\30\1\31\1\0\1\32\1\33"+
    "\1\34\3\0\1\35\4\0\1\36\14\0\1\37\1\40"+
    "\1\0\1\41\1\0\1\42\1\0\1\43\2\0\1\44"+
    "\1\45\11\0\1\46\2\0\1\47\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\56\0\346\0\u0114"+
    "\0\56\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256"+
    "\0\u0284\0\56\0\56\0\u02b2\0\u02e0\0\56\0\56\0\56"+
    "\0\56\0\u030e\0\u033c\0\212\0\56\0\u036a\0\56\0\u0398"+
    "\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508"+
    "\0\u0536\0\56\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a"+
    "\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u033c\0\u036a\0\u0730\0\56"+
    "\0\u075e\0\u078c\0\56\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872"+
    "\0\u08a0\0\56\0\u08ce\0\u08fc\0\u092a\0\56\0\u0958\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\56\0\u0a9a\0\u0ac8"+
    "\0\u0af6\0\56\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a"+
    "\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a"+
    "\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\56\0\u0e60\0\u0e8e\0\u0ebc"+
    "\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\56\0\56\0\56"+
    "\0\u0fd0\0\u0ffe\0\u102c\0\56\0\u105a\0\u1088\0\u10b6\0\u10e4"+
    "\0\56\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226"+
    "\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\56\0\56\0\u133a"+
    "\0\56\0\u1368\0\56\0\u1396\0\56\0\u13c4\0\u13f2\0\56"+
    "\0\56\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534"+
    "\0\u1562\0\u1590\0\56\0\u15be\0\u15ec\0\56\0\56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\2\1\4\1\5\1\6\1\2\1\7"+
    "\1\2\1\10\1\11\3\2\1\6\1\12\1\2\2\13"+
    "\1\14\1\15\1\16\1\17\1\20\2\2\1\21\3\2"+
    "\1\22\1\23\1\24\1\25\1\2\1\26\1\27\1\30"+
    "\1\31\2\2\1\32\2\6\60\0\1\3\1\33\53\0"+
    "\4\34\1\35\51\34\4\36\1\0\1\37\1\0\1\40"+
    "\4\36\1\41\2\36\1\0\36\36\25\0\1\42\15\0"+
    "\1\43\24\0\1\44\1\45\43\0\1\46\6\0\2\46"+
    "\7\0\1\46\1\0\12\46\1\0\1\46\2\0\3\46"+
    "\4\0\3\46\13\0\1\47\72\0\1\50\5\0\1\51"+
    "\53\0\1\52\46\0\2\53\7\0\1\54\52\0\1\55"+
    "\62\0\2\56\27\0\1\57\72\0\1\60\55\0\1\61"+
    "\2\0\1\62\2\0\1\63\47\0\1\64\31\0\1\65"+
    "\1\0\1\65\50\0\1\65\6\0\1\37\54\0\1\36"+
    "\1\66\2\0\2\36\51\0\1\37\7\0\1\67\51\0"+
    "\1\70\106\0\1\71\13\0\17\44\1\0\36\44\13\45"+
    "\1\72\42\45\1\0\1\46\6\0\2\46\6\0\1\73"+
    "\1\46\1\0\12\46\1\0\1\46\2\0\3\46\4\0"+
    "\3\46\25\0\2\74\25\0\1\75\14\0\1\76\31\0"+
    "\1\77\44\0\1\100\1\101\33\0\1\102\101\0\1\103"+
    "\52\0\1\104\44\0\1\105\67\0\1\106\34\0\1\107"+
    "\76\0\1\110\33\0\1\111\115\0\1\112\32\0\1\113"+
    "\31\0\1\114\104\0\1\115\25\0\12\45\1\116\1\72"+
    "\42\45\24\0\1\117\62\0\1\120\44\0\1\121\62\0"+
    "\1\122\63\0\1\123\52\0\1\124\62\0\2\125\51\0"+
    "\1\126\45\0\2\127\6\0\1\130\53\0\1\131\70\0"+
    "\1\132\37\0\1\133\55\0\1\134\64\0\1\135\22\0"+
    "\1\114\14\0\1\136\70\0\1\137\46\0\2\140\62\0"+
    "\1\141\54\0\1\142\52\0\1\143\41\0\1\144\72\0"+
    "\1\145\63\0\1\146\73\0\1\147\26\0\2\150\42\0"+
    "\1\151\101\0\1\152\52\0\1\153\55\0\1\154\54\0"+
    "\1\155\32\0\1\156\75\0\1\157\55\0\1\160\65\0"+
    "\2\161\52\0\1\162\33\0\1\163\77\0\1\164\54\0"+
    "\1\165\66\0\1\166\40\0\1\167\53\0\1\170\56\0"+
    "\1\171\50\0\1\172\55\0\1\173\70\0\1\174\55\0"+
    "\1\175\56\0\1\176\51\0\1\177\55\0\1\200\60\0"+
    "\1\201\52\0\1\202\47\0\2\203\57\0\1\204\55\0"+
    "\1\205\40\0\1\206\76\0\1\207\51\0\1\210\61\0"+
    "\1\211\55\0\1\212\60\0\1\213\52\0\1\214\57\0"+
    "\1\215\42\0\1\216\55\0\1\217\66\0\1\220\51\0"+
    "\1\221\60\0\1\222\47\0\2\223\54\0\2\224\42\0"+
    "\1\225\116\0\1\226\55\0\1\227\15\0\1\230\107\0"+
    "\1\231\55\0\1\232\42\0\1\233\60\0\1\234\55\0"+
    "\1\235\56\0\1\236\55\0\1\237\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5658];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\1\11\10\1\2\11"+
    "\2\1\4\11\1\1\2\0\1\11\1\0\1\11\4\0"+
    "\1\1\5\0\1\11\12\0\2\1\1\0\1\11\2\0"+
    "\1\11\6\0\1\11\3\0\1\11\7\0\1\11\3\0"+
    "\1\11\22\0\1\11\5\0\2\1\1\0\3\11\3\0"+
    "\1\11\4\0\1\11\14\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\2\11\11\0\1\11\2\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexical_Analyzer(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico : "+yytext()+ "Linea"+(yyline+1)+" Columna "+yycolumn);
            } 
            // fall through
          case 41: break;
          case 2: 
            { System.out.println("Reconocio token:<entero> lexema:"+yytext());
                      return new Symbol(Simbolos.nEntero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 42: break;
          case 3: 
            { /*este es un comentario en java, omitirlos*/
            } 
            // fall through
          case 43: break;
          case 4: 
            { System.out.println("Reconocio token: <div> lexema: "+yytext()); 
              return new Symbol(Simbolos.div, yycolumn, yyline, yytext());
            } 
            // fall through
          case 44: break;
          case 5: 
            { System.out.println("Reconocio token: <per> lexema: "+yytext()); 
              return new Symbol(Simbolos.per, yycolumn, yyline, yytext());
            } 
            // fall through
          case 45: break;
          case 6: 
            { System.out.println("Reconocio token: <plus> lexema: "+yytext()); 
              return new Symbol(Simbolos.plus, yycolumn, yyline, yytext());
            } 
            // fall through
          case 46: break;
          case 7: 
            { System.out.println("Reconocio token: <minus> lexema: "+yytext()); 
              return new Symbol(Simbolos.minus, yycolumn, yyline, yytext());
            } 
            // fall through
          case 47: break;
          case 8: 
            { System.out.println("Reconocio token: <leftPar> lexema: "+yytext()); 
              return new Symbol(Simbolos.leftPar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 48: break;
          case 9: 
            { System.out.println("Reconocio token: <rightPar> lexema: "+yytext()); 
              return new Symbol(Simbolos.rightPar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 49: break;
          case 10: 
            { System.out.println("Reconocio token: <dotComma> lexema: "+yytext()); 
              return new Symbol(Simbolos.dotComma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 50: break;
          case 11: 
            { System.out.println("Reconocio token: <comma> lexema: "+yytext()); 
              return new Symbol(Simbolos.comma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 51: break;
          case 12: 
            { System.out.println("Reconocio token:<cadena> lexema: "+yytext());
                     return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 52: break;
          case 13: 
            { System.out.println("Reconocio token:<charNormal> lexema: "+yytext());
                     return new Symbol(Simbolos.charNormal, yycolumn, yyline, yytext());
            } 
            // fall through
          case 53: break;
          case 14: 
            { System.out.println("Reconocio token:<comment> lexema: "+yytext());
                     return new Symbol(Simbolos.comment, yycolumn, yyline, yytext());
            } 
            // fall through
          case 54: break;
          case 15: 
            { System.out.println("Reconocio token: <or> lexema: "+yytext()); 
              return new Symbol(Simbolos.prOr, yycolumn, yyline, yytext());
            } 
            // fall through
          case 55: break;
          case 16: 
            { System.out.println("Reconocio token:<decimal> lexema:"+yytext());
                     return new Symbol(Simbolos.nDecimal, yycolumn, yyline, yytext());
            } 
            // fall through
          case 56: break;
          case 17: 
            { System.out.println("Reconocio token: <not> lexema: "+yytext()); 
              return new Symbol(Simbolos.prNot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 57: break;
          case 18: 
            { System.out.println("Reconocio token:<varName> lexema: "+yytext());
                     return new Symbol(Simbolos.varName, yycolumn, yyline, yytext());
            } 
            // fall through
          case 58: break;
          case 19: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 59: break;
          case 20: 
            { System.out.println("Reconocio token: <and> lexema: "+yytext()); 
              return new Symbol(Simbolos.prAnd, yycolumn, yyline, yytext());
            } 
            // fall through
          case 60: break;
          case 21: 
            { System.out.println("Reconocio token:<multiline> lexema: "+yytext());
                     return new Symbol(Simbolos.multiline, yycolumn, yyline, yytext());
            } 
            // fall through
          case 61: break;
          case 22: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prComo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 62: break;
          case 23: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext()); 
                    return new Symbol(Simbolos.prFalse, yycolumn, yyline, yytext());
            } 
            // fall through
          case 63: break;
          case 24: 
            { System.out.println("Reconocio token: <menor> lexema: "+yytext()); 
              return new Symbol(Simbolos.menor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 64: break;
          case 25: 
            { System.out.println("Reconocio token: <mayor> lexema: "+yytext()); 
              return new Symbol(Simbolos.mayor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 65: break;
          case 26: 
            { System.out.println("Reconocio token:<charAscii> lexema: "+yytext());
                     return new Symbol(Simbolos.charAscii, yycolumn, yyline, yytext());
            } 
            // fall through
          case 66: break;
          case 27: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prNumber, yycolumn, yyline, yytext());
            } 
            // fall through
          case 67: break;
          case 28: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext()); 
                    return new Symbol(Simbolos.prInicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 68: break;
          case 29: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prChain, yycolumn, yyline, yytext());
            } 
            // fall through
          case 69: break;
          case 30: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prMod, yycolumn, yyline, yytext());
            } 
            // fall through
          case 70: break;
          case 31: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prBoolean, yycolumn, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 32: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prIngresar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 33: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prChar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 34: 
            { System.out.println("Reconocio token: <equals> lexema: "+yytext()); 
              return new Symbol(Simbolos.equals, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 35: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prExponent, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 36: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prConValor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 37: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext()); 
                    return new Symbol(Simbolos.prTrue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 38: 
            { System.out.println("Reconocio token: <notEquals> lexema: "+yytext()); 
              return new Symbol(Simbolos.notEquals, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 39: 
            { System.out.println("Reconocio token: <menorigual> lexema: "+yytext()); 
              return new Symbol(Simbolos.menorigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 40: 
            { System.out.println("Reconocio token: <mayorigual> lexema: "+yytext()); 
              return new Symbol(Simbolos.mayorigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
