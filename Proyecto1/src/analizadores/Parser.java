
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\005\006\000\002\006\005\000\002\014\007\000\002\014" +
    "\011\000\002\014\012\000\002\015\006\000\002\015\007" +
    "\000\002\017\007\000\002\020\004\000\002\020\003\000" +
    "\002\021\007\000\002\021\006\000\002\022\013\000\002" +
    "\022\012\000\002\022\016\000\002\023\007\000\002\023" +
    "\006\000\002\016\003\000\002\016\003\000\002\010\005" +
    "\000\002\010\003\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\012\003\000\002" +
    "\012\003\000\002\013\003\000\002\013\003\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\007\000\002\007\005\000\002\007\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\004\004\001\002\000\024\003\030\015" +
    "\007\016\021\040\027\051\014\055\022\062\023\067\011" +
    "\074\026\001\002\000\004\002\006\001\002\000\004\002" +
    "\001\001\002\000\044\003\uffe3\005\uffe3\015\uffe3\016\uffe3" +
    "\040\uffe3\051\uffe3\055\uffe3\057\uffe3\060\uffe3\061\uffe3\062" +
    "\uffe3\064\uffe3\065\uffe3\067\uffe3\073\uffe3\074\uffe3\075\uffe3" +
    "\001\002\000\044\003\ufffe\005\ufffe\015\ufffe\016\ufffe\040" +
    "\ufffe\051\ufffe\055\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe" +
    "\064\ufffe\065\ufffe\067\ufffe\073\ufffe\074\ufffe\075\ufffe\001" +
    "\002\000\004\051\207\001\002\000\044\003\ufff8\005\ufff8" +
    "\015\ufff8\016\ufff8\040\ufff8\051\ufff8\055\ufff8\057\ufff8\060" +
    "\ufff8\061\ufff8\062\ufff8\064\ufff8\065\ufff8\067\ufff8\073\ufff8" +
    "\074\ufff8\075\ufff8\001\002\000\004\047\206\001\002\000" +
    "\010\041\uffe1\050\uffe1\054\uffe1\001\002\000\026\003\030" +
    "\005\205\015\007\016\021\040\027\051\014\055\022\062" +
    "\023\067\011\074\026\001\002\000\006\050\034\054\203" +
    "\001\002\000\044\003\ufffa\005\ufffa\015\ufffa\016\ufffa\040" +
    "\ufffa\051\ufffa\055\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa" +
    "\064\ufffa\065\ufffa\067\ufffa\073\ufffa\074\ufffa\075\ufffa\001" +
    "\002\000\044\003\ufffb\005\ufffb\015\ufffb\016\ufffb\040\ufffb" +
    "\051\ufffb\055\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\064" +
    "\ufffb\065\ufffb\067\ufffb\073\ufffb\074\ufffb\075\ufffb\001\002" +
    "\000\044\003\uffe4\005\uffe4\015\uffe4\016\uffe4\040\uffe4\051" +
    "\uffe4\055\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\064\uffe4" +
    "\065\uffe4\067\uffe4\073\uffe4\074\uffe4\075\uffe4\001\002\000" +
    "\022\006\051\007\046\011\044\012\047\025\045\037\053" +
    "\051\050\053\052\001\002\000\022\006\051\007\046\011" +
    "\044\012\047\025\045\037\053\051\050\053\052\001\002" +
    "\000\004\047\141\001\002\000\044\003\ufff7\005\ufff7\015" +
    "\ufff7\016\ufff7\040\ufff7\051\ufff7\055\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\062\ufff7\064\ufff7\065\ufff7\067\ufff7\073\ufff7\074" +
    "\ufff7\075\ufff7\001\002\000\022\006\051\007\046\011\044" +
    "\012\047\025\045\037\053\051\050\053\052\001\002\000" +
    "\004\051\014\001\002\000\004\047\032\001\002\000\044" +
    "\003\ufff9\005\ufff9\015\ufff9\016\ufff9\040\ufff9\051\ufff9\055" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\064\ufff9\065\ufff9" +
    "\067\ufff9\073\ufff9\074\ufff9\075\ufff9\001\002\000\044\003" +
    "\ufff6\005\ufff6\015\ufff6\016\ufff6\040\ufff6\051\ufff6\055\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\062\ufff6\064\ufff6\065\ufff6\067" +
    "\ufff6\073\ufff6\074\ufff6\075\ufff6\001\002\000\006\041\035" +
    "\050\034\001\002\000\004\051\132\001\002\000\012\042" +
    "\042\043\040\044\036\045\037\001\002\000\004\046\126" +
    "\001\002\000\004\046\122\001\002\000\004\046\120\001" +
    "\002\000\004\047\ufff5\001\002\000\004\046\043\001\002" +
    "\000\022\006\051\007\046\011\044\012\047\025\045\037" +
    "\053\051\050\053\052\001\002\000\056\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\047\uffcd\052\uffcd\056\uffcd\063\uffcd\066\uffcd\070\uffcd\071" +
    "\uffcd\001\002\000\022\006\051\007\046\011\044\012\047" +
    "\025\045\037\053\051\050\053\052\001\002\000\056\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\047\uffd2\052\uffd2\056\uffd2\063\uffd2\066\uffd2" +
    "\070\uffd2\071\uffd2\001\002\000\056\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\047" +
    "\uffcc\052\uffcc\056\uffcc\063\uffcc\066\uffcc\070\uffcc\071\uffcc" +
    "\001\002\000\056\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\033\uffce\034\uffce\035\uffce\036\uffce\047\uffce\052\uffce\056" +
    "\uffce\063\uffce\066\uffce\070\uffce\071\uffce\001\002\000\056" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\047\uffcf\052\uffcf\056\uffcf\063\uffcf\066" +
    "\uffcf\070\uffcf\071\uffcf\001\002\000\022\006\051\007\046" +
    "\011\044\012\047\025\045\037\053\051\050\053\052\001" +
    "\002\000\022\006\051\007\046\011\044\012\047\025\045" +
    "\037\053\051\050\053\052\001\002\000\040\017\066\020" +
    "\064\021\061\022\056\023\067\024\062\027\072\030\065" +
    "\031\063\032\070\033\060\034\071\035\057\036\055\047" +
    "\uffe0\001\002\000\022\006\051\007\046\011\044\012\047" +
    "\025\045\037\053\051\050\053\052\001\002\000\022\006" +
    "\051\007\046\011\044\012\047\025\045\037\053\051\050" +
    "\053\052\001\002\000\022\006\051\007\046\011\044\012" +
    "\047\025\045\037\053\051\050\053\052\001\002\000\022" +
    "\006\051\007\046\011\044\012\047\025\045\037\053\051" +
    "\050\053\052\001\002\000\022\006\051\007\046\011\044" +
    "\012\047\025\045\037\053\051\050\053\052\001\002\000" +
    "\022\006\051\007\046\011\044\012\047\025\045\037\053" +
    "\051\050\053\052\001\002\000\022\006\051\007\046\011" +
    "\044\012\047\025\045\037\053\051\050\053\052\001\002" +
    "\000\022\006\051\007\046\011\044\012\047\025\045\037" +
    "\053\051\050\053\052\001\002\000\022\006\051\007\046" +
    "\011\044\012\047\025\045\037\053\051\050\053\052\001" +
    "\002\000\022\006\051\007\046\011\044\012\047\025\045" +
    "\037\053\051\050\053\052\001\002\000\004\053\076\001" +
    "\002\000\022\006\051\007\046\011\044\012\047\025\045" +
    "\037\053\051\050\053\052\001\002\000\022\006\051\007" +
    "\046\011\044\012\047\025\045\037\053\051\050\053\052" +
    "\001\002\000\022\006\051\007\046\011\044\012\047\025" +
    "\045\037\053\051\050\053\052\001\002\000\056\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\057" +
    "\036\055\047\uffcb\052\uffcb\056\uffcb\063\uffcb\066\uffcb\070" +
    "\uffcb\071\uffcb\001\002\000\056\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\057\036\055\047\uffc6" +
    "\052\uffc6\056\uffc6\063\uffc6\066\uffc6\070\uffc6\071\uffc6\001" +
    "\002\000\056\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\035\057\036\055\047\uffc8\052\uffc8\056\uffc8" +
    "\063\uffc8\066\uffc8\070\uffc8\071\uffc8\001\002\000\022\006" +
    "\051\007\046\011\044\012\047\025\045\037\053\051\050" +
    "\053\052\001\002\000\040\017\066\020\064\021\061\022" +
    "\056\023\067\024\062\027\072\030\065\031\063\032\070" +
    "\033\060\034\071\035\057\036\055\052\100\001\002\000" +
    "\056\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\047\uffd4\052\uffd4\056\uffd4\063\uffd4" +
    "\066\uffd4\070\uffd4\071\uffd4\001\002\000\056\017\uffd8\020" +
    "\uffd8\021\061\022\056\023\067\024\062\026\uffd8\027\072" +
    "\030\065\031\063\032\070\033\060\034\071\035\057\036" +
    "\055\047\uffd8\052\uffd8\056\uffd8\063\uffd8\066\uffd8\070\uffd8" +
    "\071\uffd8\001\002\000\056\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\057\036\055\047\uffca\052" +
    "\uffca\056\uffca\063\uffca\066\uffca\070\uffca\071\uffca\001\002" +
    "\000\056\017\uffd7\020\uffd7\021\061\022\056\023\067\024" +
    "\062\026\uffd7\027\072\030\065\031\063\032\070\033\060" +
    "\034\071\035\057\036\055\047\uffd7\052\uffd7\056\uffd7\063" +
    "\uffd7\066\uffd7\070\uffd7\071\uffd7\001\002\000\056\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\057" +
    "\036\055\047\uffc9\052\uffc9\056\uffc9\063\uffc9\066\uffc9\070" +
    "\uffc9\071\uffc9\001\002\000\056\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\067\024\uffd3\026\uffd3\027\072\030\065\031" +
    "\063\032\070\033\060\034\071\035\057\036\055\047\uffd3" +
    "\052\uffd3\056\uffd3\063\uffd3\066\uffd3\070\uffd3\071\uffd3\001" +
    "\002\000\056\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\067" +
    "\024\uffd6\026\uffd6\027\072\030\065\031\063\032\070\033" +
    "\060\034\071\035\057\036\055\047\uffd6\052\uffd6\056\uffd6" +
    "\063\uffd6\066\uffd6\070\uffd6\071\uffd6\001\002\000\056\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\057\036\055\047\uffc7\052\uffc7\056\uffc7\063\uffc7\066\uffc7" +
    "\070\uffc7\071\uffc7\001\002\000\056\017\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\047" +
    "\uffc5\052\uffc5\056\uffc5\063\uffc5\066\uffc5\070\uffc5\071\uffc5" +
    "\001\002\000\056\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\067\024\uffd5\026\uffd5\027\072\030\065\031\063\032\070" +
    "\033\060\034\071\035\057\036\055\047\uffd5\052\uffd5\056" +
    "\uffd5\063\uffd5\066\uffd5\070\uffd5\071\uffd5\001\002\000\056" +
    "\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\047\uffc4\052\uffc4\056\uffc4\063\uffc4\066" +
    "\uffc4\070\uffc4\071\uffc4\001\002\000\056\017\066\020\064" +
    "\021\061\022\056\023\067\024\062\026\uffc3\027\072\030" +
    "\065\031\063\032\070\033\060\034\071\035\057\036\055" +
    "\047\uffc3\052\uffc3\056\uffc3\063\uffc3\066\uffc3\070\uffc3\071" +
    "\uffc3\001\002\000\040\017\066\020\064\021\061\022\056" +
    "\023\067\024\062\027\072\030\065\031\063\032\070\033" +
    "\060\034\071\035\057\036\055\052\115\001\002\000\056" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\047\uffd0\052\uffd0\056\uffd0\063\uffd0\066" +
    "\uffd0\070\uffd0\071\uffd0\001\002\000\040\017\066\020\064" +
    "\021\061\022\056\023\067\024\062\026\117\027\072\030" +
    "\065\031\063\032\070\033\060\034\071\035\057\036\055" +
    "\001\002\000\056\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\047\uffd1\052\uffd1\056" +
    "\uffd1\063\uffd1\066\uffd1\070\uffd1\071\uffd1\001\002\000\004" +
    "\010\121\001\002\000\004\047\uffdd\001\002\000\006\013" +
    "\124\014\123\001\002\000\004\047\uffd9\001\002\000\004" +
    "\047\uffda\001\002\000\004\047\uffde\001\002\000\006\011" +
    "\131\012\130\001\002\000\004\047\uffdf\001\002\000\004" +
    "\047\uffdb\001\002\000\004\047\uffdc\001\002\000\010\041" +
    "\uffe2\050\uffe2\054\uffe2\001\002\000\040\017\066\020\064" +
    "\021\061\022\056\023\067\024\062\027\072\030\065\031" +
    "\063\032\070\033\060\034\071\035\057\036\055\063\134" +
    "\001\002\000\026\003\030\015\007\016\021\040\027\051" +
    "\014\055\022\062\023\067\011\074\026\075\135\001\002" +
    "\000\044\003\uffe5\005\uffe5\015\uffe5\016\uffe5\040\uffe5\051" +
    "\uffe5\055\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\064\uffe5" +
    "\065\uffe5\067\uffe5\073\uffe5\074\uffe5\075\uffe5\001\002\000" +
    "\026\003\030\015\007\016\021\040\027\051\014\055\022" +
    "\062\023\067\011\074\026\075\140\001\002\000\044\003" +
    "\uffff\005\uffff\015\uffff\016\uffff\040\uffff\051\uffff\055\uffff" +
    "\057\uffff\060\uffff\061\uffff\062\uffff\064\uffff\065\uffff\067" +
    "\uffff\073\uffff\074\uffff\075\uffff\001\002\000\044\003\uffe6" +
    "\005\uffe6\015\uffe6\016\uffe6\040\uffe6\051\uffe6\055\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\064\uffe6\065\uffe6\067\uffe6" +
    "\073\uffe6\074\uffe6\075\uffe6\001\002\000\044\003\ufffc\005" +
    "\ufffc\015\ufffc\016\ufffc\040\ufffc\051\ufffc\055\ufffc\057\ufffc" +
    "\060\ufffc\061\ufffc\062\ufffc\064\ufffc\065\ufffc\067\ufffc\073" +
    "\ufffc\074\ufffc\075\ufffc\001\002\000\040\017\066\020\064" +
    "\021\061\022\056\023\067\024\062\027\072\030\065\031" +
    "\063\032\070\033\060\034\071\035\057\036\055\063\143" +
    "\001\002\000\004\065\144\001\002\000\022\006\051\007" +
    "\046\011\044\012\047\025\045\037\053\051\050\053\052" +
    "\001\002\000\006\064\152\065\144\001\002\000\010\060" +
    "\147\064\uffec\065\uffec\001\002\000\004\056\150\001\002" +
    "\000\024\003\030\015\007\016\021\040\027\051\014\055" +
    "\022\062\023\067\011\074\026\001\002\000\032\003\030" +
    "\015\007\016\021\040\027\051\014\055\022\060\uffea\062" +
    "\023\064\uffea\065\uffea\067\011\074\026\001\002\000\044" +
    "\003\uffee\005\uffee\015\uffee\016\uffee\040\uffee\051\uffee\055" +
    "\uffee\057\uffee\060\uffee\061\uffee\062\uffee\064\uffee\065\uffee" +
    "\067\uffee\073\uffee\074\uffee\075\uffee\001\002\000\010\060" +
    "\147\064\uffed\065\uffed\001\002\000\040\017\066\020\064" +
    "\021\061\022\056\023\067\024\062\027\072\030\065\031" +
    "\063\032\070\033\060\034\071\035\057\036\055\066\155" +
    "\001\002\000\004\056\156\001\002\000\024\003\030\015" +
    "\007\016\021\040\027\051\014\055\022\062\023\067\011" +
    "\074\026\001\002\000\032\003\030\015\007\016\021\040" +
    "\027\051\014\055\022\060\uffeb\062\023\064\uffeb\065\uffeb" +
    "\067\011\074\026\001\002\000\040\017\066\020\064\021" +
    "\061\022\056\023\067\024\062\027\072\030\065\031\063" +
    "\032\070\033\060\034\071\035\057\036\055\056\161\001" +
    "\002\000\024\003\030\015\007\016\021\040\027\051\014" +
    "\055\022\062\023\067\011\074\026\001\002\000\032\003" +
    "\030\015\007\016\021\040\027\051\014\055\022\057\166" +
    "\060\163\061\165\062\023\067\011\074\026\001\002\000" +
    "\024\003\030\015\007\016\021\040\027\051\014\055\022" +
    "\062\023\067\011\074\026\001\002\000\006\060\172\061" +
    "\173\001\002\000\022\006\051\007\046\011\044\012\047" +
    "\025\045\037\053\051\050\053\052\001\002\000\044\003" +
    "\ufff3\005\ufff3\015\ufff3\016\ufff3\040\ufff3\051\ufff3\055\ufff3" +
    "\057\ufff3\060\ufff3\061\ufff3\062\ufff3\064\ufff3\065\ufff3\067" +
    "\ufff3\073\ufff3\074\ufff3\075\ufff3\001\002\000\040\017\066" +
    "\020\064\021\061\022\056\023\067\024\062\027\072\030" +
    "\065\031\063\032\070\033\060\034\071\035\057\036\055" +
    "\056\170\001\002\000\024\003\030\015\007\016\021\040" +
    "\027\051\014\055\022\062\023\067\011\074\026\001\002" +
    "\000\030\003\030\015\007\016\021\040\027\051\014\055" +
    "\022\060\ufff0\061\ufff0\062\023\067\011\074\026\001\002" +
    "\000\024\003\030\015\007\016\021\040\027\051\014\055" +
    "\022\062\023\067\011\074\026\001\002\000\022\006\051" +
    "\007\046\011\044\012\047\025\045\037\053\051\050\053" +
    "\052\001\002\000\040\017\066\020\064\021\061\022\056" +
    "\023\067\024\062\027\072\030\065\031\063\032\070\033" +
    "\060\034\071\035\057\036\055\056\175\001\002\000\024" +
    "\003\030\015\007\016\021\040\027\051\014\055\022\062" +
    "\023\067\011\074\026\001\002\000\030\003\030\015\007" +
    "\016\021\040\027\051\014\055\022\060\uffef\061\uffef\062" +
    "\023\067\011\074\026\001\002\000\026\003\030\015\007" +
    "\016\021\040\027\051\014\055\022\057\200\062\023\067" +
    "\011\074\026\001\002\000\044\003\ufff1\005\ufff1\015\ufff1" +
    "\016\ufff1\040\ufff1\051\ufff1\055\ufff1\057\ufff1\060\ufff1\061" +
    "\ufff1\062\ufff1\064\ufff1\065\ufff1\067\ufff1\073\ufff1\074\ufff1" +
    "\075\ufff1\001\002\000\026\003\030\015\007\016\021\040" +
    "\027\051\014\055\022\057\202\062\023\067\011\074\026" +
    "\001\002\000\044\003\ufff2\005\ufff2\015\ufff2\016\ufff2\040" +
    "\ufff2\051\ufff2\055\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2" +
    "\064\ufff2\065\ufff2\067\ufff2\073\ufff2\074\ufff2\075\ufff2\001" +
    "\002\000\022\006\051\007\046\011\044\012\047\025\045" +
    "\037\053\051\050\053\052\001\002\000\040\017\066\020" +
    "\064\021\061\022\056\023\067\024\062\027\072\030\065" +
    "\031\063\032\070\033\060\034\071\035\057\036\055\047" +
    "\ufff4\001\002\000\004\002\000\001\002\000\044\003\ufffd" +
    "\005\ufffd\015\ufffd\016\ufffd\040\ufffd\051\ufffd\055\ufffd\057" +
    "\ufffd\060\ufffd\061\ufffd\062\ufffd\064\ufffd\065\ufffd\067\ufffd" +
    "\073\ufffd\074\ufffd\075\ufffd\001\002\000\004\054\210\001" +
    "\002\000\022\006\051\007\046\011\044\012\047\025\045" +
    "\037\053\051\050\053\052\001\002\000\040\017\066\020" +
    "\064\021\061\022\056\023\067\024\062\027\072\030\065" +
    "\031\063\032\070\033\060\034\071\035\057\036\055\070" +
    "\212\001\002\000\022\006\051\007\046\011\044\012\047" +
    "\025\045\037\053\051\050\053\052\001\002\000\042\017" +
    "\066\020\064\021\061\022\056\023\067\024\062\027\072" +
    "\030\065\031\063\032\070\033\060\034\071\035\057\036" +
    "\055\063\214\071\215\001\002\000\026\003\030\015\007" +
    "\016\021\040\027\051\014\055\022\062\023\067\011\073" +
    "\223\074\026\001\002\000\004\072\216\001\002\000\022" +
    "\006\051\007\046\011\044\012\047\025\045\037\053\051" +
    "\050\053\052\001\002\000\040\017\066\020\064\021\061" +
    "\022\056\023\067\024\062\027\072\030\065\031\063\032" +
    "\070\033\060\034\071\035\057\036\055\063\220\001\002" +
    "\000\024\003\030\015\007\016\021\040\027\051\014\055" +
    "\022\062\023\067\011\074\026\001\002\000\026\003\030" +
    "\015\007\016\021\040\027\051\014\055\022\062\023\067" +
    "\011\073\222\074\026\001\002\000\044\003\uffe7\005\uffe7" +
    "\015\uffe7\016\uffe7\040\uffe7\051\uffe7\055\uffe7\057\uffe7\060" +
    "\uffe7\061\uffe7\062\uffe7\064\uffe7\065\uffe7\067\uffe7\073\uffe7" +
    "\074\uffe7\075\uffe7\001\002\000\044\003\uffe8\005\uffe8\015" +
    "\uffe8\016\uffe8\040\uffe8\051\uffe8\055\uffe8\057\uffe8\060\uffe8" +
    "\061\uffe8\062\uffe8\064\uffe8\065\uffe8\067\uffe8\073\uffe8\074" +
    "\uffe8\075\uffe8\001\002\000\026\003\030\015\007\016\021" +
    "\040\027\051\014\055\022\062\023\067\011\073\225\074" +
    "\026\001\002\000\044\003\uffe9\005\uffe9\015\uffe9\016\uffe9" +
    "\040\uffe9\051\uffe9\055\uffe9\057\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\064\uffe9\065\uffe9\067\uffe9\073\uffe9\074\uffe9\075\uffe9" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\002\004\001\001\000\026\003\014\004" +
    "\007\005\012\006\023\010\015\014\017\016\024\017\016" +
    "\022\030\023\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\136\005\012\006\023\010\015\014\017\016\024" +
    "\017\016\022\030\023\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\157\001\001\000\004\007\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\132\001\001\000\004" +
    "\010\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\053\001\001\000\002\001\001\000\004\007\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\113\001\001\000\004\007" +
    "\112\001\001\000\002\001\001\000\004\007\111\001\001" +
    "\000\004\007\110\001\001\000\004\007\107\001\001\000" +
    "\004\007\106\001\001\000\004\007\105\001\001\000\004" +
    "\007\104\001\001\000\004\007\103\001\001\000\004\007" +
    "\102\001\001\000\004\007\101\001\001\000\004\007\100" +
    "\001\001\000\002\001\001\000\004\007\074\001\001\000" +
    "\004\007\073\001\001\000\004\007\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\135\004\007\005" +
    "\012\006\023\010\015\014\017\016\024\017\016\022\030" +
    "\023\011\001\001\000\002\001\001\000\024\004\136\005" +
    "\012\006\023\010\015\014\017\016\024\017\016\022\030" +
    "\023\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\144\021\145" +
    "\001\001\000\004\007\153\001\001\000\004\021\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\150" +
    "\004\007\005\012\006\023\010\015\014\017\016\024\017" +
    "\016\022\030\023\011\001\001\000\024\004\136\005\012" +
    "\006\023\010\015\014\017\016\024\017\016\022\030\023" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\156\004\007\005" +
    "\012\006\023\010\015\014\017\016\024\017\016\022\030" +
    "\023\011\001\001\000\024\004\136\005\012\006\023\010" +
    "\015\014\017\016\024\017\016\022\030\023\011\001\001" +
    "\000\002\001\001\000\026\003\161\004\007\005\012\006" +
    "\023\010\015\014\017\016\024\017\016\022\030\023\011" +
    "\001\001\000\026\004\136\005\012\006\023\010\015\014" +
    "\017\015\163\016\024\017\016\022\030\023\011\001\001" +
    "\000\026\003\200\004\007\005\012\006\023\010\015\014" +
    "\017\016\024\017\016\022\030\023\011\001\001\000\002" +
    "\001\001\000\004\007\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\170\004\007\005\012\006\023" +
    "\010\015\014\017\016\024\017\016\022\030\023\011\001" +
    "\001\000\024\004\136\005\012\006\023\010\015\014\017" +
    "\016\024\017\016\022\030\023\011\001\001\000\026\003" +
    "\176\004\007\005\012\006\023\010\015\014\017\016\024" +
    "\017\016\022\030\023\011\001\001\000\004\007\173\001" +
    "\001\000\002\001\001\000\026\003\175\004\007\005\012" +
    "\006\023\010\015\014\017\016\024\017\016\022\030\023" +
    "\011\001\001\000\024\004\136\005\012\006\023\010\015" +
    "\014\017\016\024\017\016\022\030\023\011\001\001\000" +
    "\024\004\136\005\012\006\023\010\015\014\017\016\024" +
    "\017\016\022\030\023\011\001\001\000\002\001\001\000" +
    "\024\004\136\005\012\006\023\010\015\014\017\016\024" +
    "\017\016\022\030\023\011\001\001\000\002\001\001\000" +
    "\004\007\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\210\001" +
    "\001\000\002\001\001\000\004\007\212\001\001\000\002" +
    "\001\001\000\026\003\223\004\007\005\012\006\023\010" +
    "\015\014\017\016\024\017\016\022\030\023\011\001\001" +
    "\000\002\001\001\000\004\007\216\001\001\000\002\001" +
    "\001\000\026\003\220\004\007\005\012\006\023\010\015" +
    "\014\017\016\024\017\016\022\030\023\011\001\001\000" +
    "\024\004\136\005\012\006\023\010\015\014\017\016\024" +
    "\017\016\022\030\023\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\136\005\012\006\023\010\015" +
    "\014\017\016\024\017\016\022\030\023\011\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis en: " + " Linea "+(s.right)+" columna "+(s.left) + " No se esperaba un " + s.value );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       System.out.println("Error NR de sintaxis en: " + " Linea "+(s.right)+" columna "+(s.left) + " No se esperaba un " + s.value );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= prInicio INSTRUCCIONES prFin 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION dotComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION dotComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= error dotComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= prIngresar LISTAVAR prComo DECLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASIGNACION ::= LISTAVAR tkAsignar EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IF ::= prIf EXPRESION prEntonces INSTRUCCIONES prEndIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IF ::= prIf EXPRESION prEntonces INSTRUCCIONES prElse INSTRUCCIONES prEndIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IF ::= prIf EXPRESION prEntonces INSTRUCCIONES ELSEIF prElse INSTRUCCIONES prEndIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELSEIF ::= prElseIf EXPRESION prEntonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELSEIF ::= ELSEIF prElseIf EXPRESION prEntonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SWITCH ::= prSegun EXPRESION prHacer CASES prEndSegun 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CASES ::= CASES CASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CASES ::= CASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CASE ::= tkInterLeft EXPRESION tkInterRight prEntonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CASE ::= CASE prElse prEntonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FOR ::= prFor varName tkAsignar EXPRESION prHasta EXPRESION prHacer INSTRUCCIONES prEndFor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FOR ::= prFor varName tkAsignar EXPRESION prHasta EXPRESION prHacer prEndFor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FOR ::= prFor varName tkAsignar EXPRESION prHasta EXPRESION prCon prIncremental EXPRESION prHacer INSTRUCCIONES prEndFor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // WHILE ::= prWhile EXPRESION prHacer INSTRUCCIONES prEndWhile 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // WHILE ::= prWhile EXPRESION prHacer prEndWhile 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COMENTARIOS ::= multiline 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COMENTARIOS ::= comment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTAVAR ::= LISTAVAR comma varName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTAVAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTAVAR ::= varName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTAVAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLA ::= prNumber prConValor EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLA ::= prBoolean prConValor BOOLEANA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLA ::= prChar prConValor CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLA ::= prChain prConValor cadena 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BOOLEANA ::= prTrue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BOOLEANA ::= prFalse 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CARACTER ::= charAscii 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTER",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CARACTER ::= charNormal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTER",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION plus EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION minus EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION per EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION prExponent leftCor EXPRESION rightCor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION prMod EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= nDecimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= leftPar EXPRESION rightPar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= leftCor EXPRESION rightCor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= nEntero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= varName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= prTrue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= prFalse 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION mayor EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION menor EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION mayorigual EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION menorigual EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION equals EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION notEquals EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION prOr EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION prAnd EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= prNot EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
