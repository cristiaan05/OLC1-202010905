
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.io.*;
import javax.swing.JOptionPane;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\004\000\002\004\004" +
    "\000\002\005\006\000\002\006\005\000\002\015\007\000" +
    "\002\015\011\000\002\015\012\000\002\016\006\000\002" +
    "\016\007\000\002\020\007\000\002\021\004\000\002\021" +
    "\003\000\002\022\007\000\002\022\006\000\002\023\013" +
    "\000\002\023\012\000\002\023\016\000\002\024\007\000" +
    "\002\024\006\000\002\025\006\000\002\025\005\000\002" +
    "\026\004\000\002\031\006\000\002\032\007\000\002\032" +
    "\003\000\002\030\004\000\002\030\006\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\034\007\000\002\033\007\000\002\033\003\000\002" +
    "\035\006\000\002\035\007\000\002\035\007\000\002\036" +
    "\003\000\002\036\005\000\002\037\005\000\002\037\005" +
    "\000\002\017\003\000\002\017\003\000\002\010\005\000" +
    "\002\010\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\012" +
    "\003\000\002\012\003\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\014\003\000\002\014\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\007\000\002\007\005\000\002\007\003" +
    "\000\002\007\005\000\002\007\005\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\004\000\002\007\003\000\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\004\004\004\001\002\000\042\003\041\015" +
    "\010\016\027\040\043\051\021\055\030\062\031\067\011" +
    "\074\040\076\036\100\016\101\034\104\046\106\045\107" +
    "\014\110\037\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\070\003\ufffe\005\ufffe\015\ufffe\016" +
    "\ufffe\040\ufffe\051\ufffe\055\ufffe\057\ufffe\060\ufffe\061\ufffe" +
    "\062\ufffe\064\ufffe\065\ufffe\067\ufffe\073\ufffe\074\ufffe\075" +
    "\ufffe\076\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe\104\ufffe" +
    "\105\ufffe\106\ufffe\107\ufffe\110\ufffe\001\002\000\070\003" +
    "\uffc6\005\uffc6\015\uffc6\016\uffc6\040\uffc6\051\uffc6\055\uffc6" +
    "\057\uffc6\060\uffc6\061\uffc6\062\uffc6\064\uffc6\065\uffc6\067" +
    "\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6" +
    "\101\uffc6\102\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110" +
    "\uffc6\001\002\000\004\051\330\001\002\000\070\003\ufff8" +
    "\005\ufff8\015\ufff8\016\ufff8\040\ufff8\051\ufff8\055\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\062\ufff8\064\ufff8\065\ufff8\067\ufff8" +
    "\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\101" +
    "\ufff8\102\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\110\ufff8" +
    "\001\002\000\004\047\327\001\002\000\026\003\107\006" +
    "\104\007\100\010\101\011\075\012\102\025\076\037\111" +
    "\051\133\053\106\001\002\000\004\047\324\001\002\000" +
    "\026\003\107\006\104\007\100\010\101\011\075\012\102" +
    "\025\076\037\111\051\133\053\106\001\002\000\004\047" +
    "\322\001\002\000\044\003\041\005\321\015\010\016\027" +
    "\040\043\051\021\055\030\062\031\067\011\074\040\076" +
    "\036\100\016\101\034\104\046\106\045\107\014\110\037" +
    "\001\002\000\010\041\uffc4\050\uffc4\054\uffc4\001\002\000" +
    "\006\050\166\054\317\001\002\000\070\003\ufffa\005\ufffa" +
    "\015\ufffa\016\ufffa\040\ufffa\051\ufffa\055\ufffa\057\ufffa\060" +
    "\ufffa\061\ufffa\062\ufffa\064\ufffa\065\ufffa\067\ufffa\073\ufffa" +
    "\074\ufffa\075\ufffa\076\ufffa\077\ufffa\100\ufffa\101\ufffa\102" +
    "\ufffa\104\ufffa\105\ufffa\106\ufffa\107\ufffa\110\ufffa\001\002" +
    "\000\070\003\ufff3\005\ufff3\015\ufff3\016\ufff3\040\ufff3\051" +
    "\ufff3\055\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\064\ufff3" +
    "\065\ufff3\067\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077" +
    "\ufff3\100\ufff3\101\ufff3\102\ufff3\104\ufff3\105\ufff3\106\ufff3" +
    "\107\ufff3\110\ufff3\001\002\000\070\003\ufff7\005\ufff7\015" +
    "\ufff7\016\ufff7\040\ufff7\051\ufff7\055\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\062\ufff7\064\ufff7\065\ufff7\067\ufff7\073\ufff7\074" +
    "\ufff7\075\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7" +
    "\104\ufff7\105\ufff7\106\ufff7\107\ufff7\110\ufff7\001\002\000" +
    "\070\003\ufffb\005\ufffb\015\ufffb\016\ufffb\040\ufffb\051\ufffb" +
    "\055\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\064\ufffb\065" +
    "\ufffb\067\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb" +
    "\100\ufffb\101\ufffb\102\ufffb\104\ufffb\105\ufffb\106\ufffb\107" +
    "\ufffb\110\ufffb\001\002\000\070\003\uffc7\005\uffc7\015\uffc7" +
    "\016\uffc7\040\uffc7\051\uffc7\055\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\064\uffc7\065\uffc7\067\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\104" +
    "\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\001\002\000\026" +
    "\003\107\006\104\007\100\010\101\011\075\012\102\025" +
    "\076\037\111\051\133\053\106\001\002\000\026\003\107" +
    "\006\104\007\100\010\101\011\075\012\102\025\076\037" +
    "\111\051\133\053\106\001\002\000\070\003\ufff4\005\ufff4" +
    "\015\ufff4\016\ufff4\040\ufff4\051\ufff4\055\ufff4\057\ufff4\060" +
    "\ufff4\061\ufff4\062\ufff4\064\ufff4\065\ufff4\067\ufff4\073\ufff4" +
    "\074\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\102" +
    "\ufff4\104\ufff4\105\ufff4\106\ufff4\107\ufff4\110\ufff4\001\002" +
    "\000\070\003\ufff5\005\ufff5\015\ufff5\016\ufff5\040\ufff5\051" +
    "\ufff5\055\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\064\ufff5" +
    "\065\ufff5\067\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077" +
    "\ufff5\100\ufff5\101\ufff5\102\ufff5\104\ufff5\105\ufff5\106\ufff5" +
    "\107\ufff5\110\ufff5\001\002\000\004\051\245\001\002\000" +
    "\004\047\244\001\002\000\044\003\041\015\010\016\027" +
    "\040\043\051\021\055\030\062\031\067\011\074\040\076" +
    "\036\077\240\100\016\101\034\104\046\106\045\107\014" +
    "\110\037\001\002\000\026\003\107\006\104\007\100\010" +
    "\101\011\075\012\102\025\076\037\111\051\133\053\106" +
    "\001\002\000\026\003\107\006\104\007\100\010\101\011" +
    "\075\012\102\025\076\037\111\051\133\053\106\001\002" +
    "\000\044\003\041\015\010\016\027\040\043\047\227\051" +
    "\021\055\030\062\031\067\011\074\040\076\036\100\016" +
    "\101\034\104\046\106\045\107\014\110\037\001\002\000" +
    "\070\003\ufff1\005\ufff1\015\ufff1\016\ufff1\040\ufff1\051\ufff1" +
    "\055\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\064\ufff1\065" +
    "\ufff1\067\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1" +
    "\100\ufff1\101\ufff1\102\ufff1\104\ufff1\105\ufff1\106\ufff1\107" +
    "\ufff1\110\ufff1\001\002\000\004\051\021\001\002\000\070" +
    "\003\ufff9\005\ufff9\015\ufff9\016\ufff9\040\ufff9\051\ufff9\055" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\064\ufff9\065\ufff9" +
    "\067\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\100" +
    "\ufff9\101\ufff9\102\ufff9\104\ufff9\105\ufff9\106\ufff9\107\ufff9" +
    "\110\ufff9\001\002\000\004\051\073\001\002\000\004\051" +
    "\047\001\002\000\012\042\054\043\053\044\050\045\051" +
    "\001\002\000\050\003\uffd3\015\uffd3\016\uffd3\026\uffd3\040" +
    "\uffd3\050\uffd3\051\uffd3\055\uffd3\062\uffd3\067\uffd3\074\uffd3" +
    "\076\uffd3\100\uffd3\101\uffd3\103\uffd3\104\uffd3\106\uffd3\107" +
    "\uffd3\110\uffd3\001\002\000\050\003\uffd2\015\uffd2\016\uffd2" +
    "\026\uffd2\040\uffd2\050\uffd2\051\uffd2\055\uffd2\062\uffd2\067" +
    "\uffd2\074\uffd2\076\uffd2\100\uffd2\101\uffd2\103\uffd2\104\uffd2" +
    "\106\uffd2\107\uffd2\110\uffd2\001\002\000\044\003\041\015" +
    "\010\016\027\040\043\051\021\055\030\062\031\067\011" +
    "\074\040\076\036\100\016\101\034\103\057\104\046\106" +
    "\045\107\014\110\037\001\002\000\050\003\uffd4\015\uffd4" +
    "\016\uffd4\026\uffd4\040\uffd4\050\uffd4\051\uffd4\055\uffd4\062" +
    "\uffd4\067\uffd4\074\uffd4\076\uffd4\100\uffd4\101\uffd4\103\uffd4" +
    "\104\uffd4\106\uffd4\107\uffd4\110\uffd4\001\002\000\050\003" +
    "\uffd5\015\uffd5\016\uffd5\026\uffd5\040\uffd5\050\uffd5\051\uffd5" +
    "\055\uffd5\062\uffd5\067\uffd5\074\uffd5\076\uffd5\100\uffd5\101" +
    "\uffd5\103\uffd5\104\uffd5\106\uffd5\107\uffd5\110\uffd5\001\002" +
    "\000\044\003\041\015\010\016\027\040\043\051\021\055" +
    "\030\062\031\067\011\074\040\076\036\100\016\101\034" +
    "\104\046\105\uffcf\106\045\107\014\110\037\001\002\000" +
    "\004\105\072\001\002\000\004\025\060\001\002\000\004" +
    "\051\062\001\002\000\006\026\065\050\064\001\002\000" +
    "\012\042\054\043\053\044\050\045\051\001\002\000\006" +
    "\026\uffd7\050\uffd7\001\002\000\004\051\070\001\002\000" +
    "\042\003\041\015\010\016\027\040\043\051\021\055\030" +
    "\062\031\067\011\074\040\076\036\100\016\101\034\104" +
    "\046\106\045\107\014\110\037\001\002\000\044\003\041" +
    "\015\010\016\027\040\043\051\021\055\030\062\031\067" +
    "\011\074\040\076\036\100\016\101\034\104\046\105\uffd0" +
    "\106\045\107\014\110\037\001\002\000\070\003\uffff\005" +
    "\uffff\015\uffff\016\uffff\040\uffff\051\uffff\055\uffff\057\uffff" +
    "\060\uffff\061\uffff\062\uffff\064\uffff\065\uffff\067\uffff\073" +
    "\uffff\074\uffff\075\uffff\076\uffff\077\uffff\100\uffff\101\uffff" +
    "\102\uffff\104\uffff\105\uffff\106\uffff\107\uffff\110\uffff\001" +
    "\002\000\012\042\054\043\053\044\050\045\051\001\002" +
    "\000\006\026\uffd6\050\uffd6\001\002\000\070\003\uffd1\005" +
    "\uffd1\015\uffd1\016\uffd1\040\uffd1\051\uffd1\055\uffd1\057\uffd1" +
    "\060\uffd1\061\uffd1\062\uffd1\064\uffd1\065\uffd1\067\uffd1\073" +
    "\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1" +
    "\102\uffd1\104\uffd1\105\uffd1\106\uffd1\107\uffd1\110\uffd1\001" +
    "\002\000\004\025\074\001\002\000\030\003\107\006\104" +
    "\007\100\010\101\011\075\012\102\025\076\026\105\037" +
    "\111\051\103\053\106\001\002\000\146\003\uffbe\005\uffbe" +
    "\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\040\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067" +
    "\uffbe\070\uffbe\071\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe" +
    "\077\uffbe\100\uffbe\101\uffbe\102\uffbe\104\uffbe\105\uffbe\106" +
    "\uffbe\107\uffbe\110\uffbe\001\002\000\026\003\107\006\104" +
    "\007\100\010\101\011\075\012\102\025\076\037\111\051" +
    "\133\053\106\001\002\000\006\026\161\050\160\001\002" +
    "\000\146\003\uffae\005\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\022\uffae\023\uffae\024\uffae\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036" +
    "\uffae\040\uffae\047\uffae\050\uffae\051\uffae\052\uffae\055\uffae" +
    "\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064" +
    "\uffae\065\uffae\066\uffae\067\uffae\070\uffae\071\uffae\073\uffae" +
    "\074\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae\102" +
    "\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae\001\002" +
    "\000\146\003\uff9f\005\uff9f\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036" +
    "\uff9f\040\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\055\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\073\uff9f" +
    "\074\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f\101\uff9f\102" +
    "\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\110\uff9f\001\002" +
    "\000\146\003\uffbd\005\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\040\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\055\uffbd" +
    "\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064" +
    "\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\073\uffbd" +
    "\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\102" +
    "\uffbd\104\uffbd\105\uffbd\106\uffbd\107\uffbd\110\uffbd\001\002" +
    "\000\052\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\042\054\043\053\044\050\045" +
    "\051\050\uffaa\001\002\000\146\003\uffab\005\uffab\015\uffab" +
    "\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\035\uffab\036\uffab\040\uffab\047\uffab\050\uffab\051" +
    "\uffab\052\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab" +
    "\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070" +
    "\uffab\071\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab" +
    "\100\uffab\101\uffab\102\uffab\104\uffab\105\uffab\106\uffab\107" +
    "\uffab\110\uffab\001\002\000\004\047\uffce\001\002\000\026" +
    "\003\107\006\104\007\100\010\101\011\075\012\102\025" +
    "\076\037\111\051\133\053\106\001\002\000\026\003\107" +
    "\006\104\007\100\010\101\011\075\012\102\025\076\037" +
    "\111\051\133\053\106\001\002\000\146\003\uffa9\005\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023" +
    "\uffa9\024\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\036\uffa9\040\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\070\uffa9\071\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9" +
    "\077\uffa9\100\uffa9\101\uffa9\102\uffa9\104\uffa9\105\uffa9\106" +
    "\uffa9\107\uffa9\110\uffa9\001\002\000\026\003\107\006\104" +
    "\007\100\010\101\011\075\012\102\025\076\037\111\051" +
    "\133\053\106\001\002\000\042\017\126\020\123\021\121" +
    "\022\116\023\127\024\122\026\uffcb\027\132\030\125\031" +
    "\124\032\130\033\120\034\131\035\117\036\115\050\uffcb" +
    "\001\002\000\006\026\114\050\064\001\002\000\004\047" +
    "\uffcd\001\002\000\026\003\107\006\104\007\100\010\101" +
    "\011\075\012\102\025\076\037\111\051\133\053\106\001" +
    "\002\000\026\003\107\006\104\007\100\010\101\011\075" +
    "\012\102\025\076\037\111\051\133\053\106\001\002\000" +
    "\026\003\107\006\104\007\100\010\101\011\075\012\102" +
    "\025\076\037\111\051\133\053\106\001\002\000\026\003" +
    "\107\006\104\007\100\010\101\011\075\012\102\025\076" +
    "\037\111\051\133\053\106\001\002\000\026\003\107\006" +
    "\104\007\100\010\101\011\075\012\102\025\076\037\111" +
    "\051\133\053\106\001\002\000\026\003\107\006\104\007" +
    "\100\010\101\011\075\012\102\025\076\037\111\051\133" +
    "\053\106\001\002\000\026\003\107\006\104\007\100\010" +
    "\101\011\075\012\102\025\076\037\111\051\133\053\106" +
    "\001\002\000\026\003\107\006\104\007\100\010\101\011" +
    "\075\012\102\025\076\037\111\051\133\053\106\001\002" +
    "\000\026\003\107\006\104\007\100\010\101\011\075\012" +
    "\102\025\076\037\111\051\133\053\106\001\002\000\026" +
    "\003\107\006\104\007\100\010\101\011\075\012\102\025" +
    "\076\037\111\051\133\053\106\001\002\000\004\053\137" +
    "\001\002\000\026\003\107\006\104\007\100\010\101\011" +
    "\075\012\102\025\076\037\111\051\133\053\106\001\002" +
    "\000\026\003\107\006\104\007\100\010\101\011\075\012" +
    "\102\025\076\037\111\051\133\053\106\001\002\000\026" +
    "\003\107\006\104\007\100\010\101\011\075\012\102\025" +
    "\076\037\111\051\133\053\106\001\002\000\146\003\uffaa" +
    "\005\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\040\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\055\uffaa\056\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066" +
    "\uffaa\067\uffaa\070\uffaa\071\uffaa\073\uffaa\074\uffaa\075\uffaa" +
    "\076\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\104\uffaa\105" +
    "\uffaa\106\uffaa\107\uffaa\110\uffaa\001\002\000\146\003\uffa8" +
    "\005\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\024\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\034\uffa8\035\117\036\115\040\uffa8\047" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\055\uffa8\056\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\067\uffa8\070\uffa8\071\uffa8\073\uffa8\074\uffa8\075\uffa8" +
    "\076\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8\104\uffa8\105" +
    "\uffa8\106\uffa8\107\uffa8\110\uffa8\001\002\000\146\003\uffa3" +
    "\005\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022" +
    "\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3" +
    "\032\uffa3\033\uffa3\034\uffa3\035\117\036\115\040\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\055\uffa3\056\uffa3\057\uffa3" +
    "\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066" +
    "\uffa3\067\uffa3\070\uffa3\071\uffa3\073\uffa3\074\uffa3\075\uffa3" +
    "\076\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\104\uffa3\105" +
    "\uffa3\106\uffa3\107\uffa3\110\uffa3\001\002\000\146\003\uffa5" +
    "\005\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\117\036\115\040\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\055\uffa5\056\uffa5\057\uffa5" +
    "\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066" +
    "\uffa5\067\uffa5\070\uffa5\071\uffa5\073\uffa5\074\uffa5\075\uffa5" +
    "\076\uffa5\077\uffa5\100\uffa5\101\uffa5\102\uffa5\104\uffa5\105" +
    "\uffa5\106\uffa5\107\uffa5\110\uffa5\001\002\000\026\003\107" +
    "\006\104\007\100\010\101\011\075\012\102\025\076\037" +
    "\111\051\133\053\106\001\002\000\040\017\126\020\123" +
    "\021\121\022\116\023\127\024\122\027\132\030\125\031" +
    "\124\032\130\033\120\034\131\035\117\036\115\052\141" +
    "\001\002\000\146\003\uffb0\005\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\040\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0" +
    "\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101" +
    "\uffb0\102\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110\uffb0" +
    "\001\002\000\146\003\uffb4\005\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\121\022\116\023\127\024\122\026\uffb4" +
    "\027\132\030\125\031\124\032\130\033\120\034\131\035" +
    "\117\036\115\040\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4" +
    "\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\101" +
    "\uffb4\102\uffb4\104\uffb4\105\uffb4\106\uffb4\107\uffb4\110\uffb4" +
    "\001\002\000\146\003\uffa7\005\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035" +
    "\117\036\115\040\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7" +
    "\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063" +
    "\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7" +
    "\073\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7\101" +
    "\uffa7\102\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7" +
    "\001\002\000\146\003\uffa6\005\uffa6\015\uffa6\016\uffa6\017" +
    "\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6" +
    "\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\117\036\115\040\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063" +
    "\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6" +
    "\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101" +
    "\uffa6\102\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\110\uffa6" +
    "\001\002\000\146\003\uffb3\005\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\121\022\116\023\127\024\122\026\uffb3" +
    "\027\132\030\125\031\124\032\130\033\120\034\131\035" +
    "\117\036\115\040\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3" +
    "\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101" +
    "\uffb3\102\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3\110\uffb3" +
    "\001\002\000\146\003\uffaf\005\uffaf\015\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\127\024\uffaf\026\uffaf" +
    "\027\132\030\125\031\124\032\130\033\120\034\131\035" +
    "\117\036\115\040\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063" +
    "\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf" +
    "\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101" +
    "\uffaf\102\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf" +
    "\001\002\000\146\003\uffb2\005\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\127\024\uffb2\026\uffb2" +
    "\027\132\030\125\031\124\032\130\033\120\034\131\035" +
    "\117\036\115\040\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2" +
    "\073\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101" +
    "\uffb2\102\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2" +
    "\001\002\000\146\003\uffa4\005\uffa4\015\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035" +
    "\117\036\115\040\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063" +
    "\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4" +
    "\073\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101" +
    "\uffa4\102\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4\110\uffa4" +
    "\001\002\000\146\003\uffa2\005\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\036\uffa2\040\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2" +
    "\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063" +
    "\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2" +
    "\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2\101" +
    "\uffa2\102\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2" +
    "\001\002\000\146\003\uffb1\005\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\127\024\uffb1\026\uffb1" +
    "\027\132\030\125\031\124\032\130\033\120\034\131\035" +
    "\117\036\115\040\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101" +
    "\uffb1\102\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1" +
    "\001\002\000\146\003\uffa1\005\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\026\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\040\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1" +
    "\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1" +
    "\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101" +
    "\uffa1\102\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1" +
    "\001\002\000\146\003\uffa0\005\uffa0\015\uffa0\016\uffa0\017" +
    "\126\020\123\021\121\022\116\023\127\024\122\026\uffa0" +
    "\027\132\030\125\031\124\032\130\033\120\034\131\035" +
    "\117\036\115\040\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0" +
    "\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101" +
    "\uffa0\102\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110\uffa0" +
    "\001\002\000\146\003\uff9e\005\uff9e\015\uff9e\016\uff9e\017" +
    "\126\020\123\021\121\022\116\023\127\024\122\026\uff9e" +
    "\027\132\030\125\031\124\032\130\033\120\034\131\035" +
    "\117\036\115\040\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e" +
    "\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e" +
    "\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e\101" +
    "\uff9e\102\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\110\uff9e" +
    "\001\002\000\040\017\126\020\123\021\121\022\116\023" +
    "\127\024\122\027\132\030\125\031\124\032\130\033\120" +
    "\034\131\035\117\036\115\052\157\001\002\000\146\003" +
    "\uffac\005\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\026\uffac\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\040\uffac" +
    "\047\uffac\050\uffac\051\uffac\052\uffac\055\uffac\056\uffac\057" +
    "\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac" +
    "\066\uffac\067\uffac\070\uffac\071\uffac\073\uffac\074\uffac\075" +
    "\uffac\076\uffac\077\uffac\100\uffac\101\uffac\102\uffac\104\uffac" +
    "\105\uffac\106\uffac\107\uffac\110\uffac\001\002\000\026\003" +
    "\107\006\104\007\100\010\101\011\075\012\102\025\076" +
    "\037\111\051\133\053\106\001\002\000\004\047\uffcc\001" +
    "\002\000\042\017\126\020\123\021\121\022\116\023\127" +
    "\024\122\026\uffca\027\132\030\125\031\124\032\130\033" +
    "\120\034\131\035\117\036\115\050\uffca\001\002\000\040" +
    "\017\126\020\123\021\121\022\116\023\127\024\122\026" +
    "\164\027\132\030\125\031\124\032\130\033\120\034\131" +
    "\035\117\036\115\001\002\000\146\003\uffad\005\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\024\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\040\uffad\047\uffad\050\uffad" +
    "\051\uffad\052\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061" +
    "\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad" +
    "\070\uffad\071\uffad\073\uffad\074\uffad\075\uffad\076\uffad\077" +
    "\uffad\100\uffad\101\uffad\102\uffad\104\uffad\105\uffad\106\uffad" +
    "\107\uffad\110\uffad\001\002\000\006\041\167\050\166\001" +
    "\002\000\004\051\225\001\002\000\012\042\174\043\172" +
    "\044\170\045\171\001\002\000\004\046\205\001\002\000" +
    "\004\046\201\001\002\000\004\046\177\001\002\000\004" +
    "\047\uffee\001\002\000\004\046\175\001\002\000\026\003" +
    "\107\006\104\007\100\010\101\011\075\012\102\025\076" +
    "\037\111\051\133\053\106\001\002\000\040\017\126\020" +
    "\123\021\121\022\116\023\127\024\122\027\132\030\125" +
    "\031\124\032\130\033\120\034\131\035\117\036\115\047" +
    "\uffc3\001\002\000\004\010\200\001\002\000\004\047\uffbf" +
    "\001\002\000\006\013\203\014\202\001\002\000\004\047" +
    "\uffb5\001\002\000\004\047\uffb6\001\002\000\004\047\uffc0" +
    "\001\002\000\026\003\107\006\104\007\100\010\101\011" +
    "\075\012\102\025\076\037\111\051\133\053\106\001\002" +
    "\000\040\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9" +
    "\035\uffa9\036\uffa9\047\uffc2\001\002\000\036\017\126\020" +
    "\123\021\121\022\116\023\127\024\122\027\216\030\213" +
    "\031\212\032\214\033\211\034\215\035\117\036\115\001" +
    "\002\000\004\047\uffc1\001\002\000\026\003\107\006\104" +
    "\007\100\010\101\011\075\012\102\025\076\037\111\051" +
    "\133\053\106\001\002\000\026\003\107\006\104\007\100" +
    "\010\101\011\075\012\102\025\076\037\111\051\133\053" +
    "\106\001\002\000\026\003\107\006\104\007\100\010\101" +
    "\011\075\012\102\025\076\037\111\051\133\053\106\001" +
    "\002\000\026\003\107\006\104\007\100\010\101\011\075" +
    "\012\102\025\076\037\111\051\133\053\106\001\002\000" +
    "\026\003\107\006\104\007\100\010\101\011\075\012\102" +
    "\025\076\037\111\051\133\053\106\001\002\000\026\003" +
    "\107\006\104\007\100\010\101\011\075\012\102\025\076" +
    "\037\111\051\133\053\106\001\002\000\040\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\117\036\115\047" +
    "\uffbc\001\002\000\040\017\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\024\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033" +
    "\uffa3\034\uffa3\035\117\036\115\047\uffb7\001\002\000\040" +
    "\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\117" +
    "\036\115\047\uffb9\001\002\000\040\017\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\027\uffa7\030\uffa7\031\uffa7" +
    "\032\uffa7\033\uffa7\034\uffa7\035\117\036\115\047\uffbb\001" +
    "\002\000\040\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034" +
    "\uffa6\035\117\036\115\047\uffba\001\002\000\040\017\uffa4" +
    "\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\117\036\115" +
    "\047\uffb8\001\002\000\010\041\uffc5\050\uffc5\054\uffc5\001" +
    "\002\000\070\003\ufff0\005\ufff0\015\ufff0\016\ufff0\040\ufff0" +
    "\051\ufff0\055\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\064" +
    "\ufff0\065\ufff0\067\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0" +
    "\077\ufff0\100\ufff0\101\ufff0\102\ufff0\104\ufff0\105\ufff0\106" +
    "\ufff0\107\ufff0\110\ufff0\001\002\000\070\003\uffef\005\uffef" +
    "\015\uffef\016\uffef\040\uffef\051\uffef\055\uffef\057\uffef\060" +
    "\uffef\061\uffef\062\uffef\064\uffef\065\uffef\067\uffef\073\uffef" +
    "\074\uffef\075\uffef\076\uffef\077\uffef\100\uffef\101\uffef\102" +
    "\uffef\104\uffef\105\uffef\106\uffef\107\uffef\110\uffef\001\002" +
    "\000\040\017\126\020\123\021\121\022\116\023\127\024" +
    "\122\027\132\030\125\031\124\032\130\033\120\034\131" +
    "\035\117\036\115\063\231\001\002\000\044\003\041\015" +
    "\010\016\027\040\043\051\021\055\030\062\031\067\011" +
    "\074\040\075\232\076\036\100\016\101\034\104\046\106" +
    "\045\107\014\110\037\001\002\000\070\003\uffde\005\uffde" +
    "\015\uffde\016\uffde\040\uffde\051\uffde\055\uffde\057\uffde\060" +
    "\uffde\061\uffde\062\uffde\064\uffde\065\uffde\067\uffde\073\uffde" +
    "\074\uffde\075\uffde\076\uffde\077\uffde\100\uffde\101\uffde\102" +
    "\uffde\104\uffde\105\uffde\106\uffde\107\uffde\110\uffde\001\002" +
    "\000\044\003\041\015\010\016\027\040\043\051\021\055" +
    "\030\062\031\067\011\074\040\075\234\076\036\100\016" +
    "\101\034\104\046\106\045\107\014\110\037\001\002\000" +
    "\070\003\uffdf\005\uffdf\015\uffdf\016\uffdf\040\uffdf\051\uffdf" +
    "\055\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\064\uffdf\065" +
    "\uffdf\067\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf" +
    "\100\uffdf\101\uffdf\102\uffdf\104\uffdf\105\uffdf\106\uffdf\107" +
    "\uffdf\110\uffdf\001\002\000\040\017\126\020\123\021\121" +
    "\022\116\023\127\024\122\027\132\030\125\031\124\032" +
    "\130\033\120\034\131\035\117\036\115\047\236\001\002" +
    "\000\070\003\uffc8\005\uffc8\015\uffc8\016\uffc8\040\uffc8\051" +
    "\uffc8\055\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\064\uffc8" +
    "\065\uffc8\067\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077" +
    "\uffc8\100\uffc8\101\uffc8\102\uffc8\104\uffc8\105\uffc8\106\uffc8" +
    "\107\uffc8\110\uffc8\001\002\000\044\003\041\015\010\016" +
    "\027\040\043\051\021\055\030\062\031\067\011\074\040" +
    "\076\036\077\242\100\016\101\034\104\046\106\045\107" +
    "\014\110\037\001\002\000\026\003\107\006\104\007\100" +
    "\010\101\011\075\012\102\025\076\037\111\051\133\053" +
    "\106\001\002\000\124\003\uffdc\005\uffdc\015\uffdc\016\uffdc" +
    "\017\126\020\123\021\121\022\116\023\127\024\122\027" +
    "\132\030\125\031\124\032\130\033\120\034\131\035\117" +
    "\036\115\040\uffdc\051\uffdc\055\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\064\uffdc\065\uffdc\067\uffdc\073\uffdc\074\uffdc" +
    "\075\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\104" +
    "\uffdc\105\uffdc\106\uffdc\107\uffdc\110\uffdc\001\002\000\026" +
    "\003\107\006\104\007\100\010\101\011\075\012\102\025" +
    "\076\037\111\051\133\053\106\001\002\000\124\003\uffdd" +
    "\005\uffdd\015\uffdd\016\uffdd\017\126\020\123\021\121\022" +
    "\116\023\127\024\122\027\132\030\125\031\124\032\130" +
    "\033\120\034\131\035\117\036\115\040\uffdd\051\uffdd\055" +
    "\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\064\uffdd\065\uffdd" +
    "\067\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100" +
    "\uffdd\101\uffdd\102\uffdd\104\uffdd\105\uffdd\106\uffdd\107\uffdd" +
    "\110\uffdd\001\002\000\070\003\ufffc\005\ufffc\015\ufffc\016" +
    "\ufffc\040\ufffc\051\ufffc\055\ufffc\057\ufffc\060\ufffc\061\ufffc" +
    "\062\ufffc\064\ufffc\065\ufffc\067\ufffc\073\ufffc\074\ufffc\075" +
    "\ufffc\076\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc\104\ufffc" +
    "\105\ufffc\106\ufffc\107\ufffc\110\ufffc\001\002\000\044\003" +
    "\041\015\010\016\027\040\043\051\021\055\030\062\031" +
    "\067\011\074\040\076\036\100\016\101\034\103\250\104" +
    "\046\106\045\107\014\110\037\001\002\000\004\102\255" +
    "\001\002\000\044\003\041\015\010\016\027\040\043\051" +
    "\021\055\030\062\031\067\011\074\040\076\036\100\016" +
    "\101\034\102\uffd8\104\046\106\045\107\014\110\037\001" +
    "\002\000\004\025\251\001\002\000\004\051\062\001\002" +
    "\000\006\026\253\050\064\001\002\000\042\003\041\015" +
    "\010\016\027\040\043\051\021\055\030\062\031\067\011" +
    "\074\040\076\036\100\016\101\034\104\046\106\045\107" +
    "\014\110\037\001\002\000\044\003\041\015\010\016\027" +
    "\040\043\051\021\055\030\062\031\067\011\074\040\076" +
    "\036\100\016\101\034\102\uffd9\104\046\106\045\107\014" +
    "\110\037\001\002\000\070\003\uffda\005\uffda\015\uffda\016" +
    "\uffda\040\uffda\051\uffda\055\uffda\057\uffda\060\uffda\061\uffda" +
    "\062\uffda\064\uffda\065\uffda\067\uffda\073\uffda\074\uffda\075" +
    "\uffda\076\uffda\077\uffda\100\uffda\101\uffda\102\uffda\104\uffda" +
    "\105\uffda\106\uffda\107\uffda\110\uffda\001\002\000\040\017" +
    "\126\020\123\021\121\022\116\023\127\024\122\027\132" +
    "\030\125\031\124\032\130\033\120\034\131\035\117\036" +
    "\115\063\257\001\002\000\004\065\260\001\002\000\026" +
    "\003\107\006\104\007\100\010\101\011\075\012\102\025" +
    "\076\037\111\051\133\053\106\001\002\000\006\064\266" +
    "\065\260\001\002\000\010\060\263\064\uffe5\065\uffe5\001" +
    "\002\000\004\056\264\001\002\000\042\003\041\015\010" +
    "\016\027\040\043\051\021\055\030\062\031\067\011\074" +
    "\040\076\036\100\016\101\034\104\046\106\045\107\014" +
    "\110\037\001\002\000\050\003\041\015\010\016\027\040" +
    "\043\051\021\055\030\060\uffe3\062\031\064\uffe3\065\uffe3" +
    "\067\011\074\040\076\036\100\016\101\034\104\046\106" +
    "\045\107\014\110\037\001\002\000\070\003\uffe7\005\uffe7" +
    "\015\uffe7\016\uffe7\040\uffe7\051\uffe7\055\uffe7\057\uffe7\060" +
    "\uffe7\061\uffe7\062\uffe7\064\uffe7\065\uffe7\067\uffe7\073\uffe7" +
    "\074\uffe7\075\uffe7\076\uffe7\077\uffe7\100\uffe7\101\uffe7\102" +
    "\uffe7\104\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7\001\002" +
    "\000\010\060\263\064\uffe6\065\uffe6\001\002\000\040\017" +
    "\126\020\123\021\121\022\116\023\127\024\122\027\132" +
    "\030\125\031\124\032\130\033\120\034\131\035\117\036" +
    "\115\066\271\001\002\000\004\056\272\001\002\000\042" +
    "\003\041\015\010\016\027\040\043\051\021\055\030\062" +
    "\031\067\011\074\040\076\036\100\016\101\034\104\046" +
    "\106\045\107\014\110\037\001\002\000\050\003\041\015" +
    "\010\016\027\040\043\051\021\055\030\060\uffe4\062\031" +
    "\064\uffe4\065\uffe4\067\011\074\040\076\036\100\016\101" +
    "\034\104\046\106\045\107\014\110\037\001\002\000\040" +
    "\017\126\020\123\021\121\022\116\023\127\024\122\027" +
    "\132\030\125\031\124\032\130\033\120\034\131\035\117" +
    "\036\115\056\275\001\002\000\042\003\041\015\010\016" +
    "\027\040\043\051\021\055\030\062\031\067\011\074\040" +
    "\076\036\100\016\101\034\104\046\106\045\107\014\110" +
    "\037\001\002\000\050\003\041\015\010\016\027\040\043" +
    "\051\021\055\030\057\302\060\277\061\301\062\031\067" +
    "\011\074\040\076\036\100\016\101\034\104\046\106\045" +
    "\107\014\110\037\001\002\000\042\003\041\015\010\016" +
    "\027\040\043\051\021\055\030\062\031\067\011\074\040" +
    "\076\036\100\016\101\034\104\046\106\045\107\014\110" +
    "\037\001\002\000\006\060\306\061\307\001\002\000\026" +
    "\003\107\006\104\007\100\010\101\011\075\012\102\025" +
    "\076\037\111\051\133\053\106\001\002\000\070\003\uffec" +
    "\005\uffec\015\uffec\016\uffec\040\uffec\051\uffec\055\uffec\057" +
    "\uffec\060\uffec\061\uffec\062\uffec\064\uffec\065\uffec\067\uffec" +
    "\073\uffec\074\uffec\075\uffec\076\uffec\077\uffec\100\uffec\101" +
    "\uffec\102\uffec\104\uffec\105\uffec\106\uffec\107\uffec\110\uffec" +
    "\001\002\000\040\017\126\020\123\021\121\022\116\023" +
    "\127\024\122\027\132\030\125\031\124\032\130\033\120" +
    "\034\131\035\117\036\115\056\304\001\002\000\042\003" +
    "\041\015\010\016\027\040\043\051\021\055\030\062\031" +
    "\067\011\074\040\076\036\100\016\101\034\104\046\106" +
    "\045\107\014\110\037\001\002\000\046\003\041\015\010" +
    "\016\027\040\043\051\021\055\030\060\uffe9\061\uffe9\062" +
    "\031\067\011\074\040\076\036\100\016\101\034\104\046" +
    "\106\045\107\014\110\037\001\002\000\042\003\041\015" +
    "\010\016\027\040\043\051\021\055\030\062\031\067\011" +
    "\074\040\076\036\100\016\101\034\104\046\106\045\107" +
    "\014\110\037\001\002\000\026\003\107\006\104\007\100" +
    "\010\101\011\075\012\102\025\076\037\111\051\133\053" +
    "\106\001\002\000\040\017\126\020\123\021\121\022\116" +
    "\023\127\024\122\027\132\030\125\031\124\032\130\033" +
    "\120\034\131\035\117\036\115\056\311\001\002\000\042" +
    "\003\041\015\010\016\027\040\043\051\021\055\030\062" +
    "\031\067\011\074\040\076\036\100\016\101\034\104\046" +
    "\106\045\107\014\110\037\001\002\000\046\003\041\015" +
    "\010\016\027\040\043\051\021\055\030\060\uffe8\061\uffe8" +
    "\062\031\067\011\074\040\076\036\100\016\101\034\104" +
    "\046\106\045\107\014\110\037\001\002\000\044\003\041" +
    "\015\010\016\027\040\043\051\021\055\030\057\314\062" +
    "\031\067\011\074\040\076\036\100\016\101\034\104\046" +
    "\106\045\107\014\110\037\001\002\000\070\003\uffea\005" +
    "\uffea\015\uffea\016\uffea\040\uffea\051\uffea\055\uffea\057\uffea" +
    "\060\uffea\061\uffea\062\uffea\064\uffea\065\uffea\067\uffea\073" +
    "\uffea\074\uffea\075\uffea\076\uffea\077\uffea\100\uffea\101\uffea" +
    "\102\uffea\104\uffea\105\uffea\106\uffea\107\uffea\110\uffea\001" +
    "\002\000\044\003\041\015\010\016\027\040\043\051\021" +
    "\055\030\057\316\062\031\067\011\074\040\076\036\100" +
    "\016\101\034\104\046\106\045\107\014\110\037\001\002" +
    "\000\070\003\uffeb\005\uffeb\015\uffeb\016\uffeb\040\uffeb\051" +
    "\uffeb\055\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\064\uffeb" +
    "\065\uffeb\067\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077" +
    "\uffeb\100\uffeb\101\uffeb\102\uffeb\104\uffeb\105\uffeb\106\uffeb" +
    "\107\uffeb\110\uffeb\001\002\000\026\003\107\006\104\007" +
    "\100\010\101\011\075\012\102\025\076\037\111\051\133" +
    "\053\106\001\002\000\040\017\126\020\123\021\121\022" +
    "\116\023\127\024\122\027\132\030\125\031\124\032\130" +
    "\033\120\034\131\035\117\036\115\047\uffed\001\002\000" +
    "\004\002\000\001\002\000\070\003\ufff6\005\ufff6\015\ufff6" +
    "\016\ufff6\040\ufff6\051\ufff6\055\ufff6\057\ufff6\060\ufff6\061" +
    "\ufff6\062\ufff6\064\ufff6\065\ufff6\067\ufff6\073\ufff6\074\ufff6" +
    "\075\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6\102\ufff6\104" +
    "\ufff6\105\ufff6\106\ufff6\107\ufff6\110\ufff6\001\002\000\040" +
    "\017\126\020\123\021\121\022\116\023\127\024\122\027" +
    "\132\030\125\031\124\032\130\033\120\034\131\035\117" +
    "\036\115\047\uffdb\001\002\000\070\003\ufffd\005\ufffd\015" +
    "\ufffd\016\ufffd\040\ufffd\051\ufffd\055\ufffd\057\ufffd\060\ufffd" +
    "\061\ufffd\062\ufffd\064\ufffd\065\ufffd\067\ufffd\073\ufffd\074" +
    "\ufffd\075\ufffd\076\ufffd\077\ufffd\100\ufffd\101\ufffd\102\ufffd" +
    "\104\ufffd\105\ufffd\106\ufffd\107\ufffd\110\ufffd\001\002\000" +
    "\040\017\126\020\123\021\121\022\116\023\127\024\122" +
    "\027\132\030\125\031\124\032\130\033\120\034\131\035" +
    "\117\036\115\047\326\001\002\000\070\003\uffc9\005\uffc9" +
    "\015\uffc9\016\uffc9\040\uffc9\051\uffc9\055\uffc9\057\uffc9\060" +
    "\uffc9\061\uffc9\062\uffc9\064\uffc9\065\uffc9\067\uffc9\073\uffc9" +
    "\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\102" +
    "\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9\110\uffc9\001\002" +
    "\000\070\003\ufff2\005\ufff2\015\ufff2\016\ufff2\040\ufff2\051" +
    "\ufff2\055\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\064\ufff2" +
    "\065\ufff2\067\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077" +
    "\ufff2\100\ufff2\101\ufff2\102\ufff2\104\ufff2\105\ufff2\106\ufff2" +
    "\107\ufff2\110\ufff2\001\002\000\004\054\331\001\002\000" +
    "\026\003\107\006\104\007\100\010\101\011\075\012\102" +
    "\025\076\037\111\051\133\053\106\001\002\000\040\017" +
    "\126\020\123\021\121\022\116\023\127\024\122\027\132" +
    "\030\125\031\124\032\130\033\120\034\131\035\117\036" +
    "\115\070\333\001\002\000\026\003\107\006\104\007\100" +
    "\010\101\011\075\012\102\025\076\037\111\051\133\053" +
    "\106\001\002\000\042\017\126\020\123\021\121\022\116" +
    "\023\127\024\122\027\132\030\125\031\124\032\130\033" +
    "\120\034\131\035\117\036\115\063\335\071\336\001\002" +
    "\000\044\003\041\015\010\016\027\040\043\051\021\055" +
    "\030\062\031\067\011\073\344\074\040\076\036\100\016" +
    "\101\034\104\046\106\045\107\014\110\037\001\002\000" +
    "\004\072\337\001\002\000\026\003\107\006\104\007\100" +
    "\010\101\011\075\012\102\025\076\037\111\051\133\053" +
    "\106\001\002\000\040\017\126\020\123\021\121\022\116" +
    "\023\127\024\122\027\132\030\125\031\124\032\130\033" +
    "\120\034\131\035\117\036\115\063\341\001\002\000\042" +
    "\003\041\015\010\016\027\040\043\051\021\055\030\062" +
    "\031\067\011\074\040\076\036\100\016\101\034\104\046" +
    "\106\045\107\014\110\037\001\002\000\044\003\041\015" +
    "\010\016\027\040\043\051\021\055\030\062\031\067\011" +
    "\073\343\074\040\076\036\100\016\101\034\104\046\106" +
    "\045\107\014\110\037\001\002\000\070\003\uffe0\005\uffe0" +
    "\015\uffe0\016\uffe0\040\uffe0\051\uffe0\055\uffe0\057\uffe0\060" +
    "\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\067\uffe0\073\uffe0" +
    "\074\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0\102" +
    "\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0\110\uffe0\001\002" +
    "\000\070\003\uffe1\005\uffe1\015\uffe1\016\uffe1\040\uffe1\051" +
    "\uffe1\055\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\064\uffe1" +
    "\065\uffe1\067\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077" +
    "\uffe1\100\uffe1\101\uffe1\102\uffe1\104\uffe1\105\uffe1\106\uffe1" +
    "\107\uffe1\110\uffe1\001\002\000\044\003\041\015\010\016" +
    "\027\040\043\051\021\055\030\062\031\067\011\073\346" +
    "\074\040\076\036\100\016\101\034\104\046\106\045\107" +
    "\014\110\037\001\002\000\070\003\uffe2\005\uffe2\015\uffe2" +
    "\016\uffe2\040\uffe2\051\uffe2\055\uffe2\057\uffe2\060\uffe2\061" +
    "\uffe2\062\uffe2\064\uffe2\065\uffe2\067\uffe2\073\uffe2\074\uffe2" +
    "\075\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2\104" +
    "\uffe2\105\uffe2\106\uffe2\107\uffe2\110\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\004\002\004\001\001\000\042\003\017\004" +
    "\006\005\014\006\034\010\021\015\025\017\031\020\022" +
    "\023\043\024\011\025\024\026\016\031\032\034\023\035" +
    "\012\037\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\324\012\107" +
    "\001\001\000\002\001\001\000\006\007\322\012\107\001" +
    "\001\000\002\001\001\000\040\004\066\005\014\006\034" +
    "\010\021\015\025\017\031\020\022\023\043\024\011\025" +
    "\024\026\016\031\032\034\023\035\012\037\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\273\012\107\001\001\000\006\007" +
    "\255\012\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\236\004" +
    "\006\005\014\006\034\010\021\015\025\017\031\020\022" +
    "\023\043\024\011\025\024\026\016\031\032\034\023\035" +
    "\012\037\041\001\001\000\006\007\234\012\107\001\001" +
    "\000\006\007\227\012\107\001\001\000\040\004\225\005" +
    "\014\006\034\010\021\015\025\017\031\020\022\023\043" +
    "\024\011\025\024\026\016\031\032\034\023\035\012\037" +
    "\041\001\001\000\002\001\001\000\004\010\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\003\054\004\006\005\014\006\034\010\021\015" +
    "\025\017\031\020\022\023\043\024\011\025\024\026\016" +
    "\031\032\033\055\034\023\035\012\037\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\066\005\014" +
    "\006\034\010\021\015\025\017\031\020\022\023\043\024" +
    "\011\025\024\026\016\031\032\034\023\035\012\037\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\060\001\001\000\002\001\001\000\004\027\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\065\004" +
    "\006\005\014\006\034\010\021\015\025\017\031\020\022" +
    "\023\043\024\011\025\024\026\016\031\032\034\023\035" +
    "\012\037\041\001\001\000\040\004\066\005\014\006\034" +
    "\010\021\015\025\017\031\020\022\023\043\024\011\025" +
    "\024\026\016\031\032\034\023\035\012\037\041\001\001" +
    "\000\002\001\001\000\004\027\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\111" +
    "\012\107\030\112\036\076\001\001\000\002\001\001\000" +
    "\006\007\162\012\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\155\012\107\001\001\000\006\007\154\012\107\001" +
    "\001\000\002\001\001\000\006\007\153\012\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\152\012\107\001\001\000\006\007\151\012\107" +
    "\001\001\000\006\007\150\012\107\001\001\000\006\007" +
    "\147\012\107\001\001\000\006\007\146\012\107\001\001" +
    "\000\006\007\145\012\107\001\001\000\006\007\144\012" +
    "\107\001\001\000\006\007\143\012\107\001\001\000\006" +
    "\007\142\012\107\001\001\000\006\007\141\012\107\001" +
    "\001\000\002\001\001\000\006\007\135\012\107\001\001" +
    "\000\006\007\134\012\107\001\001\000\006\007\133\012" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\137\012\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\161\012\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\175\012\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\206\012\205\013\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\223\012\107\001\001\000\006\007\222" +
    "\012\107\001\001\000\006\007\221\012\107\001\001\000" +
    "\006\007\220\012\107\001\001\000\006\007\217\012\107" +
    "\001\001\000\006\007\216\012\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\232\004\006\005\014\006\034\010\021\015\025\017" +
    "\031\020\022\023\043\024\011\025\024\026\016\031\032" +
    "\034\023\035\012\037\041\001\001\000\002\001\001\000" +
    "\040\004\066\005\014\006\034\010\021\015\025\017\031" +
    "\020\022\023\043\024\011\025\024\026\016\031\032\034" +
    "\023\035\012\037\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\066\005\014\006" +
    "\034\010\021\015\025\017\031\020\022\023\043\024\011" +
    "\025\024\026\016\031\032\034\023\035\012\037\041\001" +
    "\001\000\006\007\240\012\107\001\001\000\002\001\001" +
    "\000\006\007\242\012\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\246\004\006\005\014\006\034" +
    "\010\021\015\025\017\031\020\022\023\043\024\011\025" +
    "\024\026\016\031\032\032\245\034\023\035\012\037\041" +
    "\001\001\000\002\001\001\000\040\004\066\005\014\006" +
    "\034\010\021\015\025\017\031\020\022\023\043\024\011" +
    "\025\024\026\016\031\032\034\023\035\012\037\041\001" +
    "\001\000\002\001\001\000\004\030\251\001\001\000\002" +
    "\001\001\000\042\003\253\004\006\005\014\006\034\010" +
    "\021\015\025\017\031\020\022\023\043\024\011\025\024" +
    "\026\016\031\032\034\023\035\012\037\041\001\001\000" +
    "\040\004\066\005\014\006\034\010\021\015\025\017\031" +
    "\020\022\023\043\024\011\025\024\026\016\031\032\034" +
    "\023\035\012\037\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\260\022\261\001\001\000\006\007" +
    "\267\012\107\001\001\000\004\022\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\264\004\006\005" +
    "\014\006\034\010\021\015\025\017\031\020\022\023\043" +
    "\024\011\025\024\026\016\031\032\034\023\035\012\037" +
    "\041\001\001\000\040\004\066\005\014\006\034\010\021" +
    "\015\025\017\031\020\022\023\043\024\011\025\024\026" +
    "\016\031\032\034\023\035\012\037\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\272\004\006\005\014\006\034\010\021" +
    "\015\025\017\031\020\022\023\043\024\011\025\024\026" +
    "\016\031\032\034\023\035\012\037\041\001\001\000\040" +
    "\004\066\005\014\006\034\010\021\015\025\017\031\020" +
    "\022\023\043\024\011\025\024\026\016\031\032\034\023" +
    "\035\012\037\041\001\001\000\002\001\001\000\042\003" +
    "\275\004\006\005\014\006\034\010\021\015\025\017\031" +
    "\020\022\023\043\024\011\025\024\026\016\031\032\034" +
    "\023\035\012\037\041\001\001\000\042\004\066\005\014" +
    "\006\034\010\021\015\025\016\277\017\031\020\022\023" +
    "\043\024\011\025\024\026\016\031\032\034\023\035\012" +
    "\037\041\001\001\000\042\003\314\004\006\005\014\006" +
    "\034\010\021\015\025\017\031\020\022\023\043\024\011" +
    "\025\024\026\016\031\032\034\023\035\012\037\041\001" +
    "\001\000\002\001\001\000\006\007\302\012\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\304\004" +
    "\006\005\014\006\034\010\021\015\025\017\031\020\022" +
    "\023\043\024\011\025\024\026\016\031\032\034\023\035" +
    "\012\037\041\001\001\000\040\004\066\005\014\006\034" +
    "\010\021\015\025\017\031\020\022\023\043\024\011\025" +
    "\024\026\016\031\032\034\023\035\012\037\041\001\001" +
    "\000\042\003\312\004\006\005\014\006\034\010\021\015" +
    "\025\017\031\020\022\023\043\024\011\025\024\026\016" +
    "\031\032\034\023\035\012\037\041\001\001\000\006\007" +
    "\307\012\107\001\001\000\002\001\001\000\042\003\311" +
    "\004\006\005\014\006\034\010\021\015\025\017\031\020" +
    "\022\023\043\024\011\025\024\026\016\031\032\034\023" +
    "\035\012\037\041\001\001\000\040\004\066\005\014\006" +
    "\034\010\021\015\025\017\031\020\022\023\043\024\011" +
    "\025\024\026\016\031\032\034\023\035\012\037\041\001" +
    "\001\000\040\004\066\005\014\006\034\010\021\015\025" +
    "\017\031\020\022\023\043\024\011\025\024\026\016\031" +
    "\032\034\023\035\012\037\041\001\001\000\002\001\001" +
    "\000\040\004\066\005\014\006\034\010\021\015\025\017" +
    "\031\020\022\023\043\024\011\025\024\026\016\031\032" +
    "\034\023\035\012\037\041\001\001\000\002\001\001\000" +
    "\006\007\317\012\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\331\012\107\001\001\000" +
    "\002\001\001\000\006\007\333\012\107\001\001\000\002" +
    "\001\001\000\042\003\344\004\006\005\014\006\034\010" +
    "\021\015\025\017\031\020\022\023\043\024\011\025\024" +
    "\026\016\031\032\034\023\035\012\037\041\001\001\000" +
    "\002\001\001\000\006\007\337\012\107\001\001\000\002" +
    "\001\001\000\042\003\341\004\006\005\014\006\034\010" +
    "\021\015\025\017\031\020\022\023\043\024\011\025\024" +
    "\026\016\031\032\034\023\035\012\037\041\001\001\000" +
    "\040\004\066\005\014\006\034\010\021\015\025\017\031" +
    "\020\022\023\043\024\011\025\024\026\016\031\032\034" +
    "\023\035\012\037\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\066\005\014\006\034\010\021\015" +
    "\025\017\031\020\022\023\043\024\011\025\024\026\016" +
    "\031\032\034\023\035\012\037\041\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String swcase="";
    public static String pythonText="";
    public static String noRecuperable="";
    public static String recuperable="";
    public static int contador=0;
    public void syntax_error(Symbol s){
        contador+=1;
        recuperable+="<tr><th scope=\"row\">"+contador+"</th><td>Sintáctico Recuperable</td><td>"+(s.value)+"</td><td>"+((s.right))+"</td><td>"+(s.left)+"</td> </tr>";
        System.out.println("Se recupero de Error de sintaxis en: " + " Linea "+(s.right+1)+" columna "+(s.left+1) + " No se esperaba un " + s.value );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        contador+=1;
        noRecuperable+="<tr><th scope=\"row\">"+contador+"</th><td>Sintáctico No Recuperable</td><td>"+(s.value)+"</td><td>"+((s.right))+"</td><td>"+(s.left)+"</td> </tr>";
        JOptionPane.showMessageDialog(null, "Ocurrio un error sintactico y no me pude recuperar, revise su pseudocodigo por favor");
        System.out.println("No se Pudo recuperar de Error de sintaxis en: " + " Linea "+(s.right+1)+" columna "+(s.left+1) + " No se esperaba un " + s.value );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= prInicio INSTRUCCIONES prFin 
            {
              Object RESULT =null;
		 System.out.println(pythonText); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= ins+""+is;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=in;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION dotComma 
            {
              Object RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=de;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION dotComma 
            {
              Object RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=as;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= FOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=f;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= DOWHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= RETURN dotComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= METODO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= COMENTARIOS 
            {
              Object RESULT =null;
		int comenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object comen = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=comen;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= CALL dotComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= PRINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= error INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= error dotComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= prIngresar LISTAVAR prComo DECLA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pythonText += " = "+d+ "\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACION ::= LISTAVAR tkAsignar EXPRESION 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= li+" = " +exp+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IF ::= prIf EXPRESION prEntonces INSTRUCCIONES prEndIf 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		pythonText+= "if "+e+":"+"\n"+"     "+i+"\n" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IF ::= prIf EXPRESION prEntonces INSTRUCCIONES prElse INSTRUCCIONES prEndIf 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ie = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		pythonText+="if "+e2+":"+"\n"+"    "+i2+"\n"+"else:"+"\n"+"    "+ie+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF ::= prIf EXPRESION prEntonces INSTRUCCIONES ELSEIF prElse INSTRUCCIONES prEndIf 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object elif = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ie2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		pythonText+=
        "if "+e3+":"+"\n"+"     "+i3+"\n"+elif+"\n"+"else:"+"\n"+"      "+ie2+"\n"
    ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELSEIF ::= prElseIf EXPRESION prEntonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT="elif "+e+":"+"\n"+"     "+i+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELSEIF ::= ELSEIF prElseIf EXPRESION prEntonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int eifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object eif = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=eif+"elif "+e1+":"+"\n"+"     "+i1+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SWITCH ::= prSegun EXPRESION prHacer CASES prEndSegun 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 pythonText+="if "+e+""+c+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CASES ::= CASES CASE 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int c0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=ca+"elif "+""+swcase+""+c0;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CASES ::= CASE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CASE ::= tkInterLeft EXPRESION tkInterRight prEntonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= "=="+e+":"+"\n"+"    "+i+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASE ::= CASE prElse prEntonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=c+"else:"+"\n"+"     "+i1+"\n" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FOR ::= prFor varName tkAsignar EXPRESION prHasta EXPRESION prHacer INSTRUCCIONES prEndFor 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=pythonText+="for "+v+ " in range(" +e+","+ee+")"+":"+"\n"+"       "+i+"\n" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FOR ::= prFor varName tkAsignar EXPRESION prHasta EXPRESION prHacer prEndFor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FOR ::= prFor varName tkAsignar EXPRESION prHasta EXPRESION prCon prIncremental EXPRESION prHacer INSTRUCCIONES prEndFor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // WHILE ::= prWhile EXPRESION prHacer INSTRUCCIONES prEndWhile 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // WHILE ::= prWhile EXPRESION prHacer prEndWhile 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DOWHILE ::= prDo INSTRUCCIONES prDoWhile EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DOWHILE ::= prDo prDoWhile EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RETURN ::= prReturn EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // METODO ::= prMetodo varName METODOP prEndMetodo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // METODOP ::= prParametros leftPar PARAMETROS rightPar INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODOP",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODOP ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODOP",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETROS ::= varName DATATYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMETROS ::= PARAMETROS comma varName DATATYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DATATYPE ::= prNumber 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DATATYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DATATYPE ::= prChain 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DATATYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DATATYPE ::= prBoolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DATATYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DATATYPE ::= prChar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DATATYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCTION ::= prFunction varName DATATYPE FUNCTIONP prEndFunction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCTIONP ::= prParametros leftPar PARAMETROS rightPar INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIONP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCTIONP ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIONP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CALL ::= prEjecutar varName leftPar rightPar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CALL ::= prEjecutar varName leftPar PARAMETROS rightPar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CALL ::= prEjecutar varName leftPar LISTAEXPCALL rightPar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTAEXPCALL ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTAEXPCALL",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTAEXPCALL ::= LISTAEXPCALL comma EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTAEXPCALL",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PRINT ::= prPrint EXPRESION dotComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PRINT ::= prPrintnl EXPRESION dotComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COMENTARIOS ::= multiline 
            {
              Object RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ml = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= "\""+ml+"\"";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COMENTARIOS ::= comment 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= "#"+com;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTAVAR ::= LISTAVAR comma varName 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= l+","+ v1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTAVAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTAVAR ::= varName 
            {
              Object RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= v2+"  ";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTAVAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLA ::= prNumber prConValor EXPRESION 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLA ::= prBoolean prConValor BOOLEANA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLA ::= prBoolean prConValor CONDICION 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=con;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLA ::= prChar prConValor CARACTER 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ch = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLA ::= prChain prConValor cadena 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BOOLEANA ::= prTrue 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= "true" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BOOLEANA ::= prFalse 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= "false" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONDICION ::= EXPRESION mayor EXPRESION 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int myleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int myright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object my = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x+""+">"+""+x1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONDICION ::= EXPRESION menor EXPRESION 
            {
              Object RESULT =null;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x2+""+"<"+""+x3;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONDICION ::= EXPRESION mayorigual EXPRESION 
            {
              Object RESULT =null;
		int x4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int x4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int miright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x4+""+">="+""+x5;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONDICION ::= EXPRESION menorigual EXPRESION 
            {
              Object RESULT =null;
		int x6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int x6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int meileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int meiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x6+""+"<="+""+x7;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONDICION ::= EXPRESION equals EXPRESION 
            {
              Object RESULT =null;
		int x8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int x8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x8 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x9 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x8+""+"=="+""+x9;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONDICION ::= EXPRESION notEquals EXPRESION 
            {
              Object RESULT =null;
		int x10left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int x10right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x10 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int neleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int neright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ne = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x11left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x11right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x11 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x10+""+"!="+""+x11;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CARACTER ::= charAscii 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= ca ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CARACTER ::= charNormal 
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= cn ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION plus EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e1+""+p+""+e2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION minus EXPRESION 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e3+""+m+""+e4;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION per EXPRESION 
            {
              Object RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e5+""+per+""+e6;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              Object RESULT =null;
		int e7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int divleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e7+""+"/"+""+e8;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION prExponent leftCor EXPRESION rightCor 
            {
              Object RESULT =null;
		int e9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int corlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int corlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object corl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e10left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e10 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rcorlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rcorlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rcorl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e9+"**"+"("+""+e10+""+")";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION prMod EXPRESION 
            {
              Object RESULT =null;
		int e11left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e11right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e11 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int modleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e12left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e12right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e12 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e11+""+"%"+""+e12;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= nDecimal 
            {
              Object RESULT =null;
		int decileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int deciright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object deci = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=deci;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= leftPar EXPRESION rightPar 
            {
              Object RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=lp+""+ep+""+rp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= leftCor EXPRESION rightCor 
            {
              Object RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ep2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ep2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ep2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=lc+""+ep2+""+rc;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= nEntero 
            {
              Object RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ne = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=ne;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= varName 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=var;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= BOOLEANA 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=bool;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPRESION mayor EXPRESION 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int myleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int myright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object my = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x+""+">"+""+x2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= EXPRESION menor EXPRESION 
            {
              Object RESULT =null;
		int x3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int x3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x3+""+"<"+""+x4;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION mayorigual EXPRESION 
            {
              Object RESULT =null;
		int x5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int x5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int miright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x5+""+">="+""+x6;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= EXPRESION menorigual EXPRESION 
            {
              Object RESULT =null;
		int x7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int x7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int meileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int meiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x8 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x7+""+"<="+""+x8;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= EXPRESION equals EXPRESION 
            {
              Object RESULT =null;
		int x9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int x9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x9 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x10left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x10right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x10 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x9+""+"=="+""+x10;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= EXPRESION notEquals EXPRESION 
            {
              Object RESULT =null;
		int x11left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int x11right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x11 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int neleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int neright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ne = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x12left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x12right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x12 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x11+""+"!="+""+x12;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= EXPRESION prOr EXPRESION 
            {
              Object RESULT =null;
		int x13left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int x13right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x13 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object po = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x14left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x14right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x14 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x13+""+"or"+""+x14;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= EXPRESION prAnd EXPRESION 
            {
              Object RESULT =null;
		int x15left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int x15right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x15 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x16left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x16right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x16 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x15+""+"and"+""+x16;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= prNot EXPRESION 
            {
              Object RESULT =null;
		int pnoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pnoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pno = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int x17left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x17right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x17 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT="not"+""+x17;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= cadena 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=ca;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= error EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
