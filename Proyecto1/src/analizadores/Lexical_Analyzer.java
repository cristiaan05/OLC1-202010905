/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LexicalAnalyzer.jflex</tt>
 */
public class Lexical_Analyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 15, 53, 51, 51,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    52,  0,  4,  0, 12,  0,  0,  5, 37, 38, 11, 33, 42, 34,  2, 10, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 41,  0,  0, 47, 19, 
     0, 29, 46, 22, 28, 26, 24, 44, 48, 21, 50, 17, 30, 36,  8, 23, 
    35, 49, 27, 32,  9, 45, 25, 17, 17, 43, 17, 39,  7, 40,  0, 16, 
     0, 29, 46, 22, 28, 26, 24, 44, 48, 21, 50, 17, 30, 36,  8, 23, 
    35, 49, 27, 32,  9, 45, 25, 17, 17, 43, 17, 13,  3, 14,  0,  0, 
     0,  0,  0,  0,  0, 53,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 
     0,  0, 18,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\1\1\4\1\5"+
    "\1\1\1\6\1\7\12\1\1\10\1\11\2\1\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\2\1\2\0\1\20"+
    "\1\0\1\21\4\0\1\22\7\0\1\23\12\0\1\24"+
    "\1\0\1\25\10\0\1\26\1\21\1\0\1\27\2\0"+
    "\1\30\4\0\1\31\4\0\1\32\11\0\1\33\4\0"+
    "\1\34\10\0\1\35\5\0\1\36\2\0\1\37\15\0"+
    "\1\40\25\0\1\41\11\0\1\42\2\0\1\43\1\0"+
    "\1\44\1\0\1\45\1\46\1\47\1\50\1\51\6\0"+
    "\1\52\1\0\1\53\20\0\1\54\16\0\1\55\6\0"+
    "\1\56\5\0\1\57\2\0\1\60\1\61\2\0\1\62"+
    "\2\0\1\63\3\0\1\64\1\65\1\0\1\66\1\67"+
    "\1\0\1\70\1\71\5\0\1\72\2\0\1\73\2\0"+
    "\1\74\4\0\1\75\5\0\1\76\4\0\1\77\1\100"+
    "\1\0\1\101\6\0\1\102\1\103\5\0\1\104\1\105"+
    "\1\106\1\0\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\66\0\u010e\0\u0144"+
    "\0\66\0\u017a\0\66\0\66\0\u01b0\0\u01e6\0\u021c\0\u0252"+
    "\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\66\0\u03cc"+
    "\0\u0402\0\u0438\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\u046e\0\u04a4\0\u04da\0\242\0\66\0\u0510\0\66\0\u0546"+
    "\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6"+
    "\0\u072c\0\u0762\0\u0798\0\66\0\u07ce\0\u0804\0\u083a\0\u0870"+
    "\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\66\0\u09ea"+
    "\0\66\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u04da\0\u0510\0\u0bd0\0\66\0\u0c06\0\u0c3c\0\66"+
    "\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec"+
    "\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c"+
    "\0\u0fd2\0\u1008\0\u103e\0\66\0\u1074\0\u10aa\0\u10e0\0\u1116"+
    "\0\66\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290"+
    "\0\u12c6\0\66\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\66"+
    "\0\u140a\0\u1440\0\66\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e"+
    "\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe"+
    "\0\66\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878"+
    "\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28"+
    "\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\66\0\u1ba2"+
    "\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52"+
    "\0\66\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\66"+
    "\0\u1ecc\0\66\0\66\0\66\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4"+
    "\0\u1fda\0\u2010\0\66\0\u2046\0\66\0\u207c\0\u20b2\0\u20e8"+
    "\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298"+
    "\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\66\0\u23dc\0\u2412"+
    "\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2"+
    "\0\u25f8\0\u262e\0\u2664\0\u269a\0\66\0\u26d0\0\u2706\0\u273c"+
    "\0\u2772\0\u27a8\0\u27de\0\66\0\u2814\0\u284a\0\u2880\0\u28b6"+
    "\0\u28ec\0\66\0\u2922\0\u2958\0\66\0\u298e\0\u29c4\0\u29fa"+
    "\0\66\0\u2a30\0\u2a66\0\66\0\u2a9c\0\u2ad2\0\u2b08\0\66"+
    "\0\66\0\u2b3e\0\66\0\66\0\u2b74\0\66\0\66\0\u2baa"+
    "\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\66\0\u2cb8\0\u2cee\0\66"+
    "\0\u2d24\0\u2d5a\0\66\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\66"+
    "\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\66\0\u2f76\0\u2fac"+
    "\0\u2fe2\0\u3018\0\66\0\66\0\u304e\0\66\0\u3084\0\u30ba"+
    "\0\u30f0\0\u3126\0\u315c\0\u3192\0\66\0\66\0\u31c8\0\u31fe"+
    "\0\u3234\0\u326a\0\u32a0\0\66\0\66\0\66\0\u32d6\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\2\1\4\1\5\1\6\1\2\1\7"+
    "\1\2\1\10\1\11\3\2\1\6\1\12\1\2\1\13"+
    "\1\14\2\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\2\2\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\3\2\1\41"+
    "\1\2\1\42\2\2\2\6\70\0\1\3\1\43\63\0"+
    "\4\44\1\45\61\44\4\46\1\0\1\47\1\0\1\50"+
    "\4\46\1\51\2\46\1\0\46\46\27\0\1\52\25\0"+
    "\1\53\22\0\1\54\1\55\53\0\1\56\6\0\2\56"+
    "\7\0\1\56\3\0\12\56\1\0\1\56\2\0\2\56"+
    "\6\0\4\56\1\0\3\56\13\0\1\57\33\0\1\60"+
    "\50\0\1\61\5\0\1\62\50\0\1\63\12\0\1\64"+
    "\56\0\2\65\7\0\1\66\17\0\1\67\42\0\1\70"+
    "\43\0\1\71\26\0\2\72\21\0\1\73\35\0\1\74"+
    "\65\0\1\75\43\0\1\76\101\0\2\77\4\0\1\100"+
    "\112\0\1\101\35\0\1\102\5\0\1\103\54\0\2\104"+
    "\1\0\1\105\2\0\1\106\2\0\1\107\57\0\1\110"+
    "\73\0\1\111\31\0\1\112\1\0\1\112\60\0\1\112"+
    "\6\0\1\47\64\0\1\46\1\113\2\0\2\46\61\0"+
    "\1\47\7\0\1\114\61\0\1\115\120\0\1\116\21\0"+
    "\17\54\1\0\46\54\13\55\1\117\52\55\1\0\1\56"+
    "\6\0\2\56\6\0\1\120\1\56\3\0\12\56\1\0"+
    "\1\56\2\0\2\56\6\0\4\56\1\0\3\56\27\0"+
    "\2\121\1\122\25\0\1\123\54\0\1\124\32\0\1\125"+
    "\33\0\1\126\54\0\1\127\1\130\70\0\2\131\35\0"+
    "\1\132\113\0\1\133\37\0\1\134\110\0\1\135\43\0"+
    "\1\136\74\0\1\137\77\0\1\140\44\0\1\141\31\0"+
    "\1\142\42\0\1\143\101\0\1\144\105\0\1\145\22\0"+
    "\1\146\107\0\1\147\64\0\1\150\67\0\1\151\41\0"+
    "\1\152\1\153\127\0\1\154\41\0\1\155\64\0\1\156"+
    "\10\0\2\157\26\0\1\160\116\0\1\161\33\0\12\55"+
    "\1\162\1\117\52\55\26\0\1\163\72\0\1\164\65\0"+
    "\1\165\65\0\1\166\52\0\1\167\74\0\1\170\73\0"+
    "\1\171\62\0\1\172\57\0\2\173\60\0\1\174\104\0"+
    "\2\175\53\0\1\176\73\0\1\177\60\0\1\200\62\0"+
    "\2\201\6\0\1\202\57\0\1\203\66\0\1\204\70\0"+
    "\1\205\71\0\1\206\104\0\1\207\42\0\1\210\70\0"+
    "\1\211\40\0\1\212\104\0\1\213\65\0\1\214\65\0"+
    "\1\215\74\0\1\216\61\0\1\217\44\0\1\220\55\0"+
    "\1\160\14\0\1\221\102\0\1\222\56\0\2\223\72\0"+
    "\1\224\65\0\1\225\57\0\2\226\71\0\1\227\11\0"+
    "\1\230\50\0\1\231\47\0\1\232\105\0\1\233\6\0"+
    "\2\234\2\0\1\235\1\236\50\0\1\237\62\0\2\240"+
    "\75\0\1\241\40\0\1\242\131\0\1\243\35\0\2\244"+
    "\115\0\1\245\43\0\1\246\43\0\1\247\103\0\1\250"+
    "\46\0\1\251\65\0\1\252\66\0\1\253\107\0\1\254"+
    "\66\0\1\255\64\0\1\256\64\0\1\257\66\0\1\260"+
    "\67\0\1\261\35\0\1\262\107\0\1\263\65\0\1\264"+
    "\102\0\1\265\60\0\2\266\71\0\1\267\56\0\1\270"+
    "\65\0\1\271\41\0\1\272\111\0\1\273\105\0\1\274"+
    "\34\0\2\275\4\0\1\276\70\0\1\277\54\0\2\300"+
    "\4\0\1\301\62\0\1\302\72\0\1\303\57\0\1\304"+
    "\114\0\1\305\40\0\1\306\46\0\1\307\64\0\1\310"+
    "\101\0\2\311\60\0\1\312\73\0\1\313\72\0\1\314"+
    "\52\0\1\315\74\0\1\316\56\0\1\317\102\0\1\320"+
    "\50\0\1\321\77\0\1\322\70\0\1\323\54\0\2\324"+
    "\76\0\1\325\62\0\1\326\64\0\1\327\43\0\1\330"+
    "\131\0\1\331\44\0\1\332\64\0\1\333\44\0\1\334"+
    "\64\0\1\335\107\0\1\336\65\0\1\337\70\0\1\340"+
    "\62\0\1\341\70\0\1\342\65\0\1\343\63\0\1\344"+
    "\60\0\1\345\63\0\2\346\75\0\1\347\57\0\1\350"+
    "\65\0\1\351\46\0\1\352\136\0\1\353\14\0\1\354"+
    "\110\0\1\355\65\0\1\356\61\0\1\357\73\0\1\360"+
    "\63\0\1\361\60\0\1\362\114\0\1\363\45\0\1\364"+
    "\40\0\1\365\104\0\1\366\71\0\1\367\71\0\2\370"+
    "\63\0\1\371\62\0\1\372\65\0\1\373\65\0\1\374"+
    "\61\0\1\375\73\0\1\376\67\0\2\377\45\0\1\u0100"+
    "\65\0\1\u0101\122\0\1\u0102\21\0\1\u0103\74\0\1\u0104"+
    "\100\0\1\u0105\76\0\1\u0106\45\0\2\u0107\50\0\1\u0108"+
    "\66\0\1\u0109\110\0\1\u010a\60\0\1\u010b\70\0\1\u010c"+
    "\43\0\1\u010d\101\0\2\u010e\64\0\2\u010f\72\0\1\u0110"+
    "\70\0\1\u0111\40\0\1\u0112\107\0\1\u0113\62\0\1\u0114"+
    "\71\0\1\u0115\61\0\1\u0116\46\0\1\u0117\66\0\1\u0118"+
    "\130\0\1\u0119\65\0\1\u011a\47\0\1\u011b\65\0\1\u011c"+
    "\40\0\1\u011d\64\0\1\u011e\112\0\1\u011f\41\0\1\u0120"+
    "\107\0\1\u0121\107\0\1\u0122\65\0\1\u0123\43\0\1\u0124"+
    "\71\0\2\u0125\57\0\1\u0126\70\0\1\u0127\65\0\1\u0128"+
    "\65\0\1\u0129\57\0\1\u012a\71\0\1\u012b\70\0\1\u012c"+
    "\65\0\1\u012d\66\0\2\u012e\51\0\2\u012f\67\0\1\u0130"+
    "\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13068];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\1\11\1\1\2\11"+
    "\12\1\1\11\3\1\6\11\2\1\2\0\1\11\1\0"+
    "\1\11\4\0\1\1\7\0\1\11\12\0\1\11\1\0"+
    "\1\11\10\0\2\1\1\0\1\11\2\0\1\11\4\0"+
    "\1\1\4\0\1\1\11\0\1\11\4\0\1\11\10\0"+
    "\1\11\5\0\1\11\2\0\1\11\15\0\1\11\25\0"+
    "\1\11\11\0\1\11\2\0\1\1\1\0\1\1\1\0"+
    "\1\11\1\1\3\11\6\0\1\11\1\0\1\11\20\0"+
    "\1\11\16\0\1\11\6\0\1\11\5\0\1\11\2\0"+
    "\1\11\1\1\2\0\1\11\2\0\1\11\3\0\2\11"+
    "\1\0\2\11\1\0\2\11\5\0\1\11\2\0\1\11"+
    "\2\0\1\11\4\0\1\11\5\0\1\11\4\0\2\11"+
    "\1\0\1\11\6\0\2\11\5\0\3\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexical_Analyzer(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico : "+yytext()+ "Linea"+(yyline+1)+" Columna "+yycolumn);
            } 
            // fall through
          case 72: break;
          case 2: 
            { System.out.println("Reconocio token:<entero> lexema:"+yytext());
                      return new Symbol(Simbolos.nEntero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 3: 
            { /*este es un comentario en java, omitirlos*/
            } 
            // fall through
          case 74: break;
          case 4: 
            { System.out.println("Reconocio token: <div> lexema: "+yytext()); 
              return new Symbol(Simbolos.div, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 5: 
            { System.out.println("Reconocio token: <per> lexema: "+yytext()); 
              return new Symbol(Simbolos.per, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 6: 
            { System.out.println("Reconocio token: <tkInterLeft> lexema: "+yytext()); 
              return new Symbol(Simbolos.tkInterLeft, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 7: 
            { System.out.println("Reconocio token: <tkInterRight> lexema: "+yytext()); 
              return new Symbol(Simbolos.tkInterRight, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 8: 
            { System.out.println("Reconocio token: <plus> lexema: "+yytext()); 
              return new Symbol(Simbolos.plus, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 9: 
            { System.out.println("Reconocio token: <minus> lexema: "+yytext()); 
              return new Symbol(Simbolos.minus, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 10: 
            { System.out.println("Reconocio token: <leftPar> lexema: "+yytext()); 
              return new Symbol(Simbolos.leftPar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 11: 
            { System.out.println("Reconocio token: <rightPar> lexema: "+yytext()); 
              return new Symbol(Simbolos.rightPar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 12: 
            { System.out.println("Reconocio token: <leftCor> lexema: "+yytext()); 
              return new Symbol(Simbolos.leftCor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 13: 
            { System.out.println("Reconocio token: <rightCor> lexema: "+yytext()); 
              return new Symbol(Simbolos.rightCor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 14: 
            { System.out.println("Reconocio token: <dotComma> lexema: "+yytext()); 
              return new Symbol(Simbolos.dotComma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 15: 
            { System.out.println("Reconocio token: <comma> lexema: "+yytext()); 
              return new Symbol(Simbolos.comma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 16: 
            { System.out.println("Reconocio token:<cadena> lexema: "+yytext());
                     return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 17: 
            { System.out.println("Reconocio token:<charNormal> lexema: "+yytext());
                     return new Symbol(Simbolos.charNormal, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 18: 
            { System.out.println("Reconocio token:<comment> lexema: "+yytext());
                     return new Symbol(Simbolos.comment, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 19: 
            { System.out.println("Reconocio token: <or> lexema: "+yytext()); 
              return new Symbol(Simbolos.prOr, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 20: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prIf, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 21: 
            { System.out.println("Reconocio token: <tkAsignar> lexema: "+yytext()); 
              return new Symbol(Simbolos.tkAsignar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 22: 
            { System.out.println("Reconocio token:<decimal> lexema:"+yytext());
                     return new Symbol(Simbolos.nDecimal, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 23: 
            { System.out.println("Reconocio token: <not> lexema: "+yytext()); 
              return new Symbol(Simbolos.prNot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 24: 
            { System.out.println("Reconocio token:<varName> lexema: "+yytext());
                     return new Symbol(Simbolos.varName, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 25: 
            { System.out.println("Reconocio palabra_reservada 'con', lexema:"+yytext());
              return new Symbol(Simbolos.prCon, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 26: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 27: 
            { System.out.println("Reconocio token: <and> lexema: "+yytext()); 
              return new Symbol(Simbolos.prAnd, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 28: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prMod, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 29: 
            { System.out.println("Reconocio token:<multiline> lexema: "+yytext());
                     return new Symbol(Simbolos.multiline, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 30: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prComo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 31: 
            { System.out.println("Reconocio palabra_reservada 'o_si', lexema:"+yytext());
              return new Symbol(Simbolos.prElseIf, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 32: 
            { System.out.println("Reconocio palabra_reservada 'Para', lexema:"+yytext());
              return new Symbol(Simbolos.prFor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 33: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext()); 
                    return new Symbol(Simbolos.prFalse, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 34: 
            { System.out.println("Reconocio palabra_reservada 'segun', lexema:"+yytext());
              return new Symbol(Simbolos.prSegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 35: 
            { System.out.println("Reconocio token: <menor> lexema: "+yytext()); 
              return new Symbol(Simbolos.menor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 36: 
            { System.out.println("Reconocio token: <mayor> lexema: "+yytext()); 
              return new Symbol(Simbolos.mayor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 37: 
            { System.out.println("Reconocio palabra_reservada 'hacer', lexema:"+yytext());
              return new Symbol(Simbolos.prHacer, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 38: 
            { System.out.println("Reconocio palabra_reservada 'hasta', lexema:"+yytext());
              return new Symbol(Simbolos.prHasta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 39: 
            { System.out.println("Reconocio token:<charAscii> lexema: "+yytext());
                     return new Symbol(Simbolos.charAscii, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 40: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prNumber, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 41: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext()); 
                    return new Symbol(Simbolos.prInicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 42: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prChain, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 43: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prEndIf, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 44: 
            { System.out.println("Reconocio palabra_reservada 'metodo', lexema:"+yytext());
              return new Symbol(Simbolos.prMetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 45: 
            { System.out.println("Reconocio palabra_reservada 'funcion', lexema:"+yytext());
              return new Symbol(Simbolos.prFunction, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 46: 
            { System.out.println("Reconocio palabra_reservada 'repetir', lexema:"+yytext());
              return new Symbol(Simbolos.prDo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 47: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prBoolean, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 48: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prIngresar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 49: 
            { System.out.println("Reconocio palabra_reservada 'imprimir', lexema:"+yytext());
              return new Symbol(Simbolos.prPrint, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 50: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prChar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 51: 
            { System.out.println("Reconocio palabra_reservada 'Fin Para', lexema:"+yytext());
              return new Symbol(Simbolos.prEndFor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 52: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prEntonces, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 53: 
            { System.out.println("Reconocio token: <equals> lexema: "+yytext()); 
              return new Symbol(Simbolos.equals, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 54: 
            { System.out.println("Reconocio palabra_reservada 'ejecutar', lexema:"+yytext());
              return new Symbol(Simbolos.prEjecutar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 55: 
            { System.out.println("Reconocio palabra_reservada 'return', lexema:"+yytext());
              return new Symbol(Simbolos.prReturn, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 56: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prExponent, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 57: 
            { System.out.println("Reconocio palabra_reservada 'mientras', lexema:"+yytext());
              return new Symbol(Simbolos.prWhile, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 58: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prConValor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 59: 
            { System.out.println("Reconocio palabra_reservada 'fin segun', lexema:"+yytext());
              return new Symbol(Simbolos.prEndSegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 60: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext()); 
                    return new Symbol(Simbolos.prTrue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 61: 
            { System.out.println("Reconocio palabra_reservada 'hasta_que', lexema:"+yytext());
              return new Symbol(Simbolos.prDoWhile, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 62: 
            { System.out.println("Reconocio palabra_reservada 'fin_metodo', lexema:"+yytext());
              return new Symbol(Simbolos.prEndMetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 63: 
            { System.out.println("Reconocio palabra_reservada 'incremental', lexema:"+yytext());
              return new Symbol(Simbolos.prIncremental, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 64: 
            { System.out.println("Reconocio palabra_reservada 'imprimir nl', lexema:"+yytext());
              return new Symbol(Simbolos.prPrintnl, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 65: 
            { System.out.println("Reconocio palabra_reservada 'fin_funcion', lexema:"+yytext());
              return new Symbol(Simbolos.prEndFunction, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 66: 
            { System.out.println("Reconocio palabra_reservada 'Fin mientras', lexema:"+yytext());
              return new Symbol(Simbolos.prEndWhile, yycolumn, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 67: 
            { System.out.println("Reconocio token: <notEquals> lexema: "+yytext()); 
              return new Symbol(Simbolos.notEquals, yycolumn, yyline, yytext());
            } 
            // fall through
          case 138: break;
          case 68: 
            { System.out.println("Reconocio token: <menorigual> lexema: "+yytext()); 
                return new Symbol(Simbolos.menorigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 139: break;
          case 69: 
            { System.out.println("Reconocio token: <mayorigual> lexema: "+yytext()); 
              return new Symbol(Simbolos.mayorigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 140: break;
          case 70: 
            { System.out.println("Reconocio palabra_reservada 'con_parametros', lexema:"+yytext());
              return new Symbol(Simbolos.prParametros, yycolumn, yyline, yytext());
            } 
            // fall through
          case 141: break;
          case 71: 
            { System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
              return new Symbol(Simbolos.prElse, yycolumn, yyline, yytext());
            } 
            // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
