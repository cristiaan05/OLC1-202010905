package analizadores;
import java_cup.runtime.Symbol;
import java.io.*;
import javax.swing.JOptionPane;

parser code
{:
    public static int conta=0;
    public static int contadorVar=0;
    public static int contadorG=0;
    public static String cuerpoArbol="";
    public static String swcase="";
    public static String pythonText="";
    public static String noRecuperable="";
    public static String recuperable="";
    public static int contador=0;
    public void syntax_error(Symbol s){
        contador+=1;
        recuperable+="<tr><th scope=\"row\">"+contador+"</th><td>Sintáctico Recuperable</td><td>"+(s.value)+"</td><td>"+((s.right))+"</td><td>"+(s.left)+"</td> </tr>";
        System.out.println("Se recupero de Error de sintaxis en: " + " Linea "+(s.right+1)+" columna "+(s.left+1) + " No se esperaba un " + s.value );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        contador+=1;
        noRecuperable+="<tr><th scope=\"row\">"+contador+"</th><td>Sintáctico No Recuperable</td><td>"+(s.value)+"</td><td>"+((s.right))+"</td><td>"+(s.left)+"</td> </tr>";
        JOptionPane.showMessageDialog(null, "Ocurrio un error sintactico y no me pude recuperar, revise su pseudocodigo por favor");
        System.out.println("No se Pudo recuperar de Error de sintaxis en: " + " Linea "+(s.right+1)+" columna "+(s.left+1) + " No se esperaba un " + s.value );
    }

    public void graficarArbol(){
        
        String cabeza="digraph G {"
                       +" graph[nodesep=\"0.75\"]label=\"Arbol Sintactico\";"
                       +" node [shape=box];"
                       +" rankdir = \"TB\" "
                        +"global[label=\"PSEUDOCODIGO\" width=2];\n"
                       +" prInicio[label=\"prInicio\"  width = 2];\n"
                       +" Instr[label=\"INSTRUCCIONES\" width = 2];\n"
                       +" prFin[label=\"prFin\"  width = 2];\n"
                       +" intru[label=\"INSTRUCCION\", width = 2];\n"
                       +" impre[label=\"IMPRESION\", width = 2];\n"
                       +" decla[label=\"DECLARACION\",width =2];\n"
                       +" asig[label=\"ASIGNACION\", width=2];\n"
                       +" conSI[label=\"CONDICIONAL SI\", width=2];\n"
                       +" segun[label=\"SEGUN\", width=2];\n"
                       +"     /*imrpesion*/"
                       +" impLn0[label=\"imprimir_nl\",width =2];\n"
                       +" impN0[label=\"imprimir\",width =2];\n"
                       +" parIz0[label=\"Parentesis izq\"];\n"
                       +" caden0[label=\"cadena\", width =2];\n"
                       +" parDe0[label=\"Parentesis der\"];\n"
                       +" varia0[label=\"variable\", width =2];\n"
                       +" puncoma0[label=\"puntoycoma\",width =2];\n"
                       +" /*declaracion*/"
                       +" prIngresar0[label=\"prIngresar\", width=2];\n"
                       +" varName0[label=\"id\", width=2];\n"
                       +" prComo0[label=\"prComo\",width=2];\n"
                     +"   tipoDato0[label=\"tipodedato\",width=2];\n"
                      +"  prConValor0[label=\"prconvalor\",width=2];\n"
                      +"  EXP0[label=\"EXPRESION\",width=2];\n"
                      +"  dotComma0[label=\"PUNTO Y COMA\",width=2];\n"
                      +"  /*asignacion*/"
                      +"  varName_0[label=\"varName\",width=2];\n"
                      +"  tkAsignar_0[label=\"tkAsignar\",width=2];\n"
                      +"  EXP_0[label=\"EXPRESION\",width=2];\n"
                      +"  dotComma_0[label=\"PUNTO Y COMA\",width=2];\n"
                      +"  /*condicional si*/"
                      +"  prIf_0[label=\"prIf\",width=2];\n"
                      +"  EXP_0[label=\"EXPRESOIN\",width=2];\n"
                      +"  prElse_0[label=\"prElse\",width=2];\n"
                      +"  prElseIf_0[label=\"prElseIf\",width=2];\n"
                      +"  prEntonces_0[label=\"prEntonces\",width=2];\n"
                      +"  INS_0[label=\"INSTRUCCION\",width=2];\n"
                      +"  prEndIf_0[label=\"prEndIf\",width=2];\n"
                        
                      +"  /*condicional segun*/"
                      +"  prSegun_0[label=\"prSegun\",width=2];\n"
                      +"  prEntonces_0[label=\"prEntonces\",width=2];\n"
                      +"  INS_0[label=\"INSTRUCCIONES\",width=2];\n"
                      +"  prHacer_0[label=\"prHacer\",width=2];\n"
                      +"  tkInterLeft_0[label=\"¿\",width=2];\n"
                      +"  EXP_0[label=\"EXPRESION\",width=2];\n"
                      +"  tkInterRight_0[label=\"?\",width=2];\n"
                      +"  prEndSegun_0[label=\"prEndSegun\",width=2];\n"
                        
                      +"  global -> Instr;\n"
                      +"  global -> prFin;\n"
                      +"  global -> prInicio;\n"
                      +"  Instr -> intru;\n"
                      +"  intru -> impre;\n"
                      +"  intru -> decla;\n"
                      +"  intru -> asig;\n"
                      +"  intru-> conSI;\n"
                      +"  intru -> segun;\n"
                      +"  decla -> prIngresar0;\n"
                  +"      decla -> varName0;\n"
                  +"      decla -> prComo0;\n"
                  +"      decla -> tipoDato0;\n"
                  +"      decla -> prConValor0;\n"
                        +"decla -> EXP0;\n"
                        +"decla ->dotComma0;\n"
                        
                       +" impre -> impLn0;\n"
                       +" impre -> impN0;\n"
                       +" impre -> varia0;\n"
                       +" impre -> caden0;\n"
                       +" impre -> puncoma0;\n"
                       +" impre -> parIz0;\n"
                       +" impre -> parDe0;\n"
                        
                       +" asig -> varName1;\n"
                        +"asig -> tkAsignar0;\n"
                        +"asig -> EXP1;\n"
                       +" asig -> dotComma1;\n"
                        
                      +"  conSI -> prIf_0;\n"
                      +"  conSI -> EXP_0;\n"
                      +"  conSI -> prEntonces_0;\n"
                      +"  conSI -> INS_0;\n"
                      +"  conSI -> prEndIf_0;\n"
                      +"  conSI -> prElseIf_0;\n"
                       +" conSI -> prElse_0;\n"
                        
                       +" segun -> prSegun_0;\n"
                       +" segun -> prHacer_0;\n"
                       +" segun -> tkInterLeft_0;\n"
                       +" segun -> EXP_0;\n"
                        +"segun -> tkInterRight_0;\n"
                        +"segun -> prEntonces_0;\n"
                       +" segun -> INS_0;\n"
                       +" segun -> prEndSegun_0;\n";
       
       String pie = "}";
      try{
            PrintWriter writer = new PrintWriter("Arbol202010905.dot");
            writer.println(cabeza);
            writer.println(cuerpoArbol);
            writer.println(pie);
            writer.close();
            System.out.println("Finalizo");
            }catch (Exception e) {
                System.out.println("Error");
            }
    }

:}

//definicion de terminales
terminal prInicio,prFin;
terminal nEntero,nDecimal,cadena,prTrue,prFalse,charAscii,charNormal;
terminal comment,multiline;
terminal plus,minus,per,div,prExponent,prMod,leftPar,rightPar;
terminal mayor,menor,mayorigual,menorigual,equals,notEquals;
terminal prOr,prAnd,prNot;
terminal prIngresar,prComo,prNumber,prChain,prBoolean,prChar,prConValor;
terminal dotComma,comma;
terminal varName;
terminal rightCor,leftCor;
terminal tkAsignar;
terminal prIf,prEntonces,prEndIf,prElse,prElseIf;
terminal prSegun, prHacer,prEndSegun,tkInterLeft,tkInterRight;
terminal prFor,prHasta, prCon, prIncremental, prEndFor;
terminal prWhile,prEndWhile,prDo,prDoWhile,prReturn;
terminal prMetodo,prEndMetodo,prParametros;
terminal prFunction,prEndFunction;
terminal prEjecutar,prPrint,prPrintnl;

//definicion de no terminales
non terminal INICIO,INSTRUCCIONES,INSTRUCCION,DECLARACION,ASIGNACION,EXPRESION;
non terminal LISTAVAR,DECLA;
//non terminal NUMERICA,
non terminal BOOLEANA,CONDICION,CARACTER;
non terminal IF,ELSEIF,COMENTARIOS;
non terminal SWITCH,CASES,CASE;
non terminal FOR,WHILE,DOWHILE,RETURN;
non terminal DATATYPE,PARAMETROS,METODO,METODOP;
non terminal FUNCTIONP,FUNCTION;
non terminal CALL,LISTAEXPCALL,PRINT;
//non terminal SUMA,RESTA,MULTIPLICACION,DIVISION,POTENCIA,MODULO,PARENTESIS,OPERANDO1,OPERANDO2;


precedence left plus,minus;
precedence left per,div,prMod;
precedence left prExponent;
precedence left mayor,menor,mayorigual,menorigual,equals,notEquals;
precedence left prOr,prAnd;
precedence left prNumber,prChain,prChar,prBoolean;
precedence left comma,varName;

//gramaticas
start with INICIO;

INICIO::= prInicio:in INSTRUCCIONES  prFin:fn {: 
        cuerpoArbol+="prInicio1"+ "[label=\""+in+"\",width = 2, group=\"0\"]\n"+"prInicio"+"->"+"prInicio1"+"\n;";
        cuerpoArbol+= "prFin1"+"[label=\""+fn+"\", width = 2, group=\"0\"]\n"+"prFin"+ "->" +"prFin1"+ "\n;";
        System.out.println(pythonText);
        graficarArbol();
:}
;

INSTRUCCIONES::= INSTRUCCIONES:ins INSTRUCCION:is {:RESULT= ins+""+is;:}
                | INSTRUCCION:in {:RESULT=in;:}
;

INSTRUCCION::= DECLARACION:de dotComma {:RESULT=de;:}
             | ASIGNACION:as dotComma:d {:RESULT=pythonText+=as;
                 cuerpoArbol+= "dotComma"+(conta+1)+"[label=\""+d+"\", width = 2, group="+(contadorG+1)+ "]\n"+"dotComma0"+conta +"-> dotComma0"+(conta+1)+";\n";
                    :}
             | IF
             | SWITCH
             | FOR:f {:RESULT=f;:}
             | WHILE
             | DOWHILE
             | RETURN dotComma
             | METODO
             | COMENTARIOS:comen {:RESULT=comen;:}
             | FUNCTION
             | CALL dotComma
             | PRINT:pri {:RESULT= pythonText+=pri;:}
             | error INSTRUCCION
             | error dotComma
;

DECLARACION::= prIngresar:a LISTAVAR prComo:b DECLA:d {:RESULT= " = "+d+ "\n";
               cuerpoArbol+= "prIngresar"+(conta+1)+"[label=\""+a+"\", width = 2, group="+(contadorG+1)+ "]\n"+"prIngresar"+conta+ "-> prIngresar"+(conta+1)+";\n";            
               cuerpoArbol+= "prComo"+(conta+1)+"[label=\""+b+"\", width = 2, group="+(contadorG+1)+ "]\n"+"prComo"+conta+ "-> prComo"+(conta+1)+";\n";
               cuerpoArbol+= "tipoDato"+(conta+1)+"[label="+d+", width = 2, group="+(contadorG+1)+ "]\n"+"tipoDato"+conta +"-> tipoDato"+(conta+1)+";\n";
               conta+=1;
            :}
;

ASIGNACION::= LISTAVAR:li tkAsignar EXPRESION:exp {:RESULT= li+" = " +exp+"\n";:};

IF::= prIf EXPRESION:e prEntonces INSTRUCCIONES:i prEndIf 
     {:pythonText+= "if "+e+":"+"\n"+"     "+i+"\n" ;

      :}
    | prIf EXPRESION:e2 prEntonces INSTRUCCIONES:i2 prElse INSTRUCCIONES:ie prEndIf
     {:pythonText+="if "+e2+":"+"\n"+"    "+i2+"\n"+"else:"+"\n"+"    "+ie+"\n";:}
    | prIf EXPRESION:e3 prEntonces INSTRUCCIONES:i3 ELSEIF:elif prElse INSTRUCCIONES:ie2 prEndIf{:pythonText+=
        "if "+e3+":"+"\n"+"     "+i3+"\n"+elif+"\n"+"else:"+"\n"+"      "+ie2+"\n"
    ;:}
;

ELSEIF::= prElseIf EXPRESION:e prEntonces INSTRUCCIONES:i {:RESULT="elif "+e+":"+"\n"+"     "+i+"\n";:}
        | ELSEIF:eif prElseIf EXPRESION:e1 prEntonces INSTRUCCIONES:i1 {:RESULT=eif+"elif "+e1+":"+"\n"+"     "+i1+"\n";:}
;

SWITCH::= prSegun EXPRESION:e prHacer CASES:c prEndSegun
           {: pythonText+="if "+e+""+c+"\n";:}
;

CASES::= CASES:ca CASE:c0 {:RESULT=ca+"elif "+""+swcase+""+c0;:}
        | CASE:c {:RESULT=c+"\n";:}
;

CASE::= tkInterLeft EXPRESION:e tkInterRight prEntonces INSTRUCCIONES:i {:RESULT= "=="+e+":"+"\n"+"    "+i+"\n";:}
      | CASE:c prElse prEntonces INSTRUCCIONES:i1 {:RESULT=c+"else:"+"\n"+"     "+i1+"\n" ;:}
;

FOR::= prFor varName:v tkAsignar EXPRESION:e prHasta EXPRESION:ee prHacer INSTRUCCIONES:i prEndFor
        {:RESULT=pythonText+="for "+v+ " in range(" +e+","+ee+")"+":"+"\n"+"       "+i+"\n" ;:}
    |   prFor varName tkAsignar EXPRESION prHasta EXPRESION prHacer prEndFor
        
    |   prFor varName tkAsignar EXPRESION prHasta EXPRESION prCon prIncremental EXPRESION prHacer INSTRUCCIONES prEndFor
;

WHILE::= prWhile EXPRESION prHacer INSTRUCCIONES prEndWhile
        | prWhile EXPRESION prHacer prEndWhile
;

DOWHILE::= prDo INSTRUCCIONES prDoWhile EXPRESION
        |   prDo prDoWhile EXPRESION
;

RETURN::= prReturn EXPRESION;

METODO::= prMetodo varName METODOP prEndMetodo;

METODOP::= prParametros leftPar PARAMETROS rightPar INSTRUCCIONES 
        |   INSTRUCCIONES 
;

PARAMETROS::= varName DATATYPE
            |  PARAMETROS comma varName DATATYPE 
;

DATATYPE::= prNumber
        |   prChain
        |   prBoolean
        |   prChar
;

FUNCTION::= prFunction varName DATATYPE FUNCTIONP prEndFunction;

FUNCTIONP::= prParametros leftPar PARAMETROS rightPar INSTRUCCIONES
          | INSTRUCCIONES
;

CALL::= prEjecutar varName leftPar rightPar
    |   prEjecutar varName leftPar PARAMETROS rightPar
    |   prEjecutar varName leftPar LISTAEXPCALL rightPar
;

LISTAEXPCALL::= EXPRESION
            |  LISTAEXPCALL comma EXPRESION
;

PRINT::= prPrint EXPRESION:e dotComma {:RESULT="print("+e+");"+"\n";:}
       | prPrintnl EXPRESION:ee dotComma {:RESULT="print("+ee+");"+"\n";:}
;

COMENTARIOS::= multiline:ml {: RESULT= "\""+ml+"\"";:}
             | comment:com  {: RESULT= "#"+com;:}
;

LISTAVAR::= LISTAVAR:l comma varName:v1 {: RESULT= l+","+ v1;
            cuerpoArbol+= "varName"+(contadorVar+1)+"[label=\""+v1+"\", width = 2, group="+(contadorG+1)+ "]\n"+"varName"+contadorVar+ "-> varName"+(contadorVar+1)+";\n";
            contadorVar+=1;
            :}
          | varName:v2 {: RESULT= v2+"  ";
                cuerpoArbol+= "varName"+(contadorVar+1)+"[label=\""+v2+"\", width = 2, group="+(contadorG+1)+ "]\n"+"varName"+contadorVar+ "-> varName"+(contadorVar+1)+";\n";
                contadorVar+=1;
                :}
;

DECLA::= prNumber prConValor:b EXPRESION:exp {:RESULT=exp;
         cuerpoArbol+= "prConValor"+(conta+1)+"[label=\""+b+"\", width = 2, group="+(contadorG+1)+ "]\n"+"prConValor"+contador+ "-> prConValor"+(conta+1)+";\n";
         cuerpoArbol+= "EXP"+(conta+1)+"[label=\""+exp+"\", width = 2, group="+(contadorG+1)+ "]\n"+"EXP"+conta +"-> EXP"+(conta+1)+";\n";    
        :}
       |  prBoolean prConValor:a BOOLEANA:b {:RESULT=b;
         cuerpoArbol+= "prConValor"+(conta+1)+"[label=\""+a+"\", width = 2, group="+(contadorG+1)+ "]\n"+"prConValor"+conta+ "-> prConValor"+(conta+1)+";\n";
         cuerpoArbol+= "EXP"+(conta+1)+"[label=\""+b+"\", width = 2, group="+(contadorG+1)+ "]\n"+"EXP"+conta +"-> EXP"+(conta+1)+";\n";    
        
        :}
       |  prBoolean prConValor:b CONDICION:con {:RESULT=con;
         cuerpoArbol+= "prConValor"+(conta+1)+"[label=\""+b+"\", width = 2, group="+(contadorG+1)+ "]\n"+"prConValor"+conta+ "-> prConValor"+(conta+1)+";\n";
         cuerpoArbol+= "EXP"+(conta+1)+"[label=\""+con+"\", width = 2, group="+(contadorG+1)+ "]\n"+"EXP"+conta +"-> EXP"+(conta+1)+";\n";    
        
        :}
       |  prChar prConValor:b CARACTER:ch {:RESULT=ch;
          cuerpoArbol+= "prConValor"+(conta+1)+"[label=\""+b+"\", width = 2, group="+(contadorG+1)+ "]\n"+"prConValor"+conta+ "-> prConValor"+(conta+1)+";\n";
         cuerpoArbol+= "EXP"+(conta+1)+"[label=\""+ch+"\", width = 2, group="+(contadorG+1)+ "]\n"+"EXP"+conta +"-> EXP"+(conta+1)+";\n";    
         
        :}
       |  prChain prConValor:b cadena:c {: RESULT= c;
        cuerpoArbol+= "prConValor"+(conta+1)+"[label=\""+b+"\", width = 2, group="+(contadorG+1)+ "]\n"+"prConValor"+conta+ "-> prConValor"+(conta+1)+";\n";
         cuerpoArbol+= "EXP"+(conta+1)+"[label="+c+", width = 2, group="+(contadorG+1)+ "]\n"+"EXP"+conta +"-> EXP"+(conta+1)+";\n";    
         
        :}
;   


BOOLEANA::= prTrue:t {: RESULT= "true" ;:}
          | prFalse:f {: RESULT= "false" ;:}
;

CONDICION::= EXPRESION:x mayor:my EXPRESION:x1  {:RESULT=x+""+">"+""+x1;:}
          |  EXPRESION:x2 menor:me EXPRESION:x3  {:RESULT=x2+""+"<"+""+x3;:}
          |  EXPRESION:x4 mayorigual:mi EXPRESION:x5 {:RESULT=x4+""+">="+""+x5;:} 
          |  EXPRESION:x6 menorigual:mei EXPRESION:x7  {:RESULT=x6+""+"<="+""+x7;:}
          |  EXPRESION:x8 equals:eq EXPRESION:x9 {:RESULT=x8+""+"=="+""+x9;:}
          |  EXPRESION:x10 notEquals:ne EXPRESION:x11 {:RESULT=x10+""+"!="+""+x11;:}
;

CARACTER::= charAscii:ca {: RESULT= ca ;:}
          | charNormal:cn {: RESULT= cn ;:}
;


EXPRESION::= EXPRESION:e1 plus:p EXPRESION:e2 {:RESULT=e1+""+p+""+e2;:}
          |  EXPRESION:e3 minus:m EXPRESION:e4  {:RESULT=e3+""+m+""+e4;:}
          |  EXPRESION:e5 per:per EXPRESION:e6 {:RESULT=e5+""+per+""+e6;:} 
          |  EXPRESION:e7 div:div EXPRESION:e8  {:RESULT=e7+""+"/"+""+e8;:}
          |  EXPRESION:e9 prExponent leftCor:corl EXPRESION:e10 rightCor:rcorl {:RESULT=e9+"**"+"("+""+e10+""+")";:}
          |  EXPRESION:e11 prMod:mod EXPRESION:e12 {:RESULT=e11+""+"%"+""+e12;:}
          |  nDecimal:deci  {:RESULT=deci;:}
          |  leftPar:lp EXPRESION:ep rightPar:rp {:RESULT=lp+""+ep+""+rp;:}
          |  leftCor:lc EXPRESION:ep2 rightCor:rc  {:RESULT=lc+""+ep2+""+rc;:}
          |  nEntero:ne {:RESULT=ne;:}
          |  varName:var {:RESULT=var;:}
          |  BOOLEANA:bool {:RESULT=bool;:}
          |  EXPRESION:x mayor:my EXPRESION:x2  {:RESULT=x+""+">"+""+x2;:}
          |  EXPRESION:x3 menor:me EXPRESION:x4  {:RESULT=x3+""+"<"+""+x4;:}
          |  EXPRESION:x5 mayorigual:mi EXPRESION:x6 {:RESULT=x5+""+">="+""+x6;:} 
          |  EXPRESION:x7 menorigual:mei EXPRESION:x8  {:RESULT=x7+""+"<="+""+x8;:}
          |  EXPRESION:x9 equals:eq EXPRESION:x10 {:RESULT=x9+""+"=="+""+x10;:}
          |  EXPRESION:x11 notEquals:ne EXPRESION:x12 {:RESULT=x11+""+"!="+""+x12;:}
          |  EXPRESION:x13 prOr:po EXPRESION:x14 {:RESULT=x13+""+"or"+""+x14;:}
          |  EXPRESION:x15 prAnd:pa EXPRESION:x16 {:RESULT=x15+""+"and"+""+x16;:}
          |  prNot:pno EXPRESION:x17 {:RESULT="not"+""+x17;:}
          |  cadena:ca {:RESULT=ca;:}
          |  error EXPRESION
;



