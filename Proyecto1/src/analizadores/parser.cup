package analizadores;
import java_cup.runtime.Symbol;
import java.io.*;


parser code
{:
    public void syntax_error(Symbol s){
        System.out.println("Se recupero de Error de sintaxis en: " + " Linea "+(s.right)+" columna "+(s.left) + " No se esperaba un " + s.value );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       System.out.println("No se Pudo recuperar de Error de sintaxis en: " + " Linea "+(s.right)+" columna "+(s.left) + " No se esperaba un " + s.value );
    }
:}

//definicion de terminales
terminal prInicio,prFin;
terminal nEntero,nDecimal,cadena,prTrue,prFalse,charAscii,charNormal;
terminal comment,multiline;
terminal plus,minus,per,div,prExponent,prMod,leftPar,rightPar;
terminal mayor,menor,mayorigual,menorigual,equals,notEquals;
terminal prOr,prAnd,prNot;
terminal prIngresar,prComo,prNumber,prChain,prBoolean,prChar,prConValor;
terminal dotComma,comma;
terminal varName;
terminal rightCor,leftCor;
terminal tkAsignar;
terminal prIf,prEntonces,prEndIf,prElse,prElseIf;
terminal prSegun, prHacer,prEndSegun,tkInterLeft,tkInterRight;
terminal prFor,prHasta, prCon, prIncremental, prEndFor;
terminal prWhile,prEndWhile,prDo,prDoWhile,prReturn;
terminal prMetodo,prEndMetodo,prParametros;
terminal prFunction,prEndFunction;
terminal prEjecutar,prPrint,prPrintnl;

//definicion de no terminales
non terminal INICIO,INSTRUCCIONES,INSTRUCCION,DECLARACION,ASIGNACION,EXPRESION;
non terminal LISTAVAR,DECLA;
//non terminal NUMERICA,
non terminal BOOLEANA,CARACTER;
non terminal IF,ELSEIF,COMENTARIOS;
non terminal SWITCH,CASES,CASE;
non terminal FOR,WHILE,DOWHILE,RETURN;
non terminal DATATYPE,PARAMETROS,METODO,METODOP;
non terminal FUNCTIONP,FUNCTION;
non terminal CALL,LISTAEXPCALL,PRINT;
//non terminal SUMA,RESTA,MULTIPLICACION,DIVISION,POTENCIA,MODULO,PARENTESIS,OPERANDO1,OPERANDO2;


precedence left plus,minus;
precedence left per,div,prMod;
precedence left prExponent;
precedence left mayor,menor,mayorigual,menorigual,equals,notEquals;
precedence left prOr,prAnd;
precedence left prNumber,prChain,prChar,prBoolean;
precedence left comma,varName;

//gramaticas
start with INICIO;

INICIO::= prInicio INSTRUCCIONES  prFin;


INSTRUCCIONES::= INSTRUCCIONES INSTRUCCION
                | INSTRUCCION
;

INSTRUCCION::= DECLARACION dotComma
             | ASIGNACION dotComma
             | IF
             | SWITCH
             | FOR
             | WHILE
             | DOWHILE
             | RETURN dotComma
             | METODO
             | COMENTARIOS
             | FUNCTION
             | CALL dotComma
             | PRINT
             | error INSTRUCCION
             | error dotComma
;

DECLARACION::= prIngresar LISTAVAR prComo DECLA;

ASIGNACION::= LISTAVAR tkAsignar EXPRESION;

IF::= prIf EXPRESION prEntonces INSTRUCCIONES prEndIf
    | prIf EXPRESION prEntonces INSTRUCCIONES prElse INSTRUCCIONES prEndIf
    | prIf EXPRESION prEntonces INSTRUCCIONES ELSEIF prElse INSTRUCCIONES prEndIf
;

ELSEIF::= prElseIf EXPRESION prEntonces INSTRUCCIONES
        | ELSEIF prElseIf EXPRESION prEntonces INSTRUCCIONES
;

SWITCH::= prSegun EXPRESION prHacer CASES prEndSegun;

CASES::= CASES CASE
        | CASE
;

CASE::= tkInterLeft EXPRESION tkInterRight prEntonces INSTRUCCIONES 
      | CASE prElse prEntonces INSTRUCCIONES
;

FOR::= prFor varName tkAsignar EXPRESION prHasta EXPRESION prHacer INSTRUCCIONES prEndFor
    |   prFor varName tkAsignar EXPRESION prHasta EXPRESION prHacer prEndFor
    |   prFor varName tkAsignar EXPRESION prHasta EXPRESION prCon prIncremental EXPRESION prHacer INSTRUCCIONES prEndFor
;

WHILE::= prWhile EXPRESION prHacer INSTRUCCIONES prEndWhile
        | prWhile EXPRESION prHacer prEndWhile
;

DOWHILE::= prDo INSTRUCCIONES prDoWhile EXPRESION
        |   prDo prDoWhile EXPRESION
;

RETURN::= prReturn EXPRESION;

METODO::= prMetodo varName METODOP prEndMetodo;

METODOP::= prParametros leftPar PARAMETROS rightPar INSTRUCCIONES 
        |   INSTRUCCIONES 
;

PARAMETROS::= varName DATATYPE
            |  PARAMETROS comma varName DATATYPE 
;

DATATYPE::= prNumber
        |   prChain
        |   prBoolean
        |   prChar
;

FUNCTION::= prFunction varName DATATYPE FUNCTIONP prEndFunction;

FUNCTIONP::= prParametros leftPar PARAMETROS rightPar INSTRUCCIONES
          | INSTRUCCIONES
;

CALL::= prEjecutar varName leftPar rightPar
    |   prEjecutar varName leftPar PARAMETROS rightPar
    |   prEjecutar varName leftPar LISTAEXPCALL rightPar
;

LISTAEXPCALL::= EXPRESION
            |  LISTAEXPCALL comma EXPRESION
;

PRINT::= prPrint EXPRESION dotComma
       | prPrintnl EXPRESION dotComma
;
COMENTARIOS::= multiline
             | comment
;

LISTAVAR::= LISTAVAR comma varName
          | varName
;

DECLA::= prNumber prConValor EXPRESION
       |  prBoolean prConValor BOOLEANA
       |  prChar prConValor CARACTER
       |  prChain prConValor cadena
;   

//       prNumber prConValor EXPRESION
 //     |   prNumber prConValor nEntero
//      |   prNumber prConValor nDecimal
//      |   prBoolean prConValor BOOLEANA
 //     |   DATATYPE

/*
NUMERICA::= nEntero
          | nDecimal
;*/
// EXPRESION

BOOLEANA::= prTrue
          | prFalse
;

CARACTER::= charAscii
          | charNormal
;


//DATATYPE::= prChain prConValor cadena
//          | prChar prConValor charAscii
//          | prChar prConValor charNormal
//;



EXPRESION::= EXPRESION plus EXPRESION
          |  EXPRESION minus EXPRESION
          |  EXPRESION per EXPRESION
          |  EXPRESION div EXPRESION
          |  EXPRESION prExponent leftCor EXPRESION rightCor
          |  EXPRESION prMod EXPRESION
          |  nDecimal
          |  leftPar EXPRESION rightPar
          |  leftCor EXPRESION rightCor
          |  nEntero
          |  varName
          |  prTrue
          |  prFalse
          |  EXPRESION mayor EXPRESION
          |  EXPRESION menor EXPRESION
          |  EXPRESION mayorigual EXPRESION
          |  EXPRESION menorigual EXPRESION
          |  EXPRESION equals EXPRESION
          |  EXPRESION notEquals EXPRESION
          |  EXPRESION prOr EXPRESION
          |  EXPRESION prAnd EXPRESION
          |  prNot EXPRESION
          |  cadena
          | error EXPRESION
;

/*SUMA
           | RESTA
           | MULTIPLICACION
           | DIVISION
           | POTENCIA
           | MODULO
           | PARENTESIS
*/

/*
SUMA::= OPERANDO1 plus OPERANDO2;

RESTA::= OPERANDO1 minus OPERANDO2;

MULTIPLICACION::= OPERANDO1 per OPERANDO2;

DIVISION::= OPERANDO1 div OPERANDO2;

POTENCIA::= OPERANDO1 prExponent OPERANDO2;

MODULO::= OPERANDO1 prMod OPERANDO2;

PARENTESIS::= leftPar EXPRESION rightPar;
*/
/*
OPERANDO1::= nEntero
          | nDecimal
          | varName
;

OPERANDO2::= nEntero
          | nDecimal
          | varName
;
*/
//  | pare1 relacional pare2 
