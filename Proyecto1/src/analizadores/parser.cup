package analizadores;
import java_cup.runtime.Symbol;
import java.io.*;
import javax.swing.JOptionPane;

parser code
{:
    public static String pythonText="";
    public static String noRecuperable="";
    public static String recuperable="";
    public static int contador=0;
    public void syntax_error(Symbol s){
        contador+=1;
        recuperable+="<tr><th scope=\"row\">"+contador+"</th><td>Sintáctico Recuperable</td><td>"+(s.value)+"</td><td>"+((s.right))+"</td><td>"+(s.left)+"</td> </tr>";
        System.out.println("Se recupero de Error de sintaxis en: " + " Linea "+(s.right+1)+" columna "+(s.left+1) + " No se esperaba un " + s.value );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        contador+=1;
        noRecuperable+="<tr><th scope=\"row\">"+contador+"</th><td>Sintáctico No Recuperable</td><td>"+(s.value)+"</td><td>"+((s.right))+"</td><td>"+(s.left)+"</td> </tr>";
        JOptionPane.showMessageDialog(null, "Ocurrio un error sintactico y no me pude recuperar, revise su pseudocodigo por favor");
        System.out.println("No se Pudo recuperar de Error de sintaxis en: " + " Linea "+(s.right+1)+" columna "+(s.left+1) + " No se esperaba un " + s.value );
    }

:}

//definicion de terminales
terminal prInicio,prFin;
terminal nEntero,nDecimal,cadena,prTrue,prFalse,charAscii,charNormal;
terminal comment,multiline;
terminal plus,minus,per,div,prExponent,prMod,leftPar,rightPar;
terminal mayor,menor,mayorigual,menorigual,equals,notEquals;
terminal prOr,prAnd,prNot;
terminal prIngresar,prComo,prNumber,prChain,prBoolean,prChar,prConValor;
terminal dotComma,comma;
terminal varName;
terminal rightCor,leftCor;
terminal tkAsignar;
terminal prIf,prEntonces,prEndIf,prElse,prElseIf;
terminal prSegun, prHacer,prEndSegun,tkInterLeft,tkInterRight;
terminal prFor,prHasta, prCon, prIncremental, prEndFor;
terminal prWhile,prEndWhile,prDo,prDoWhile,prReturn;
terminal prMetodo,prEndMetodo,prParametros;
terminal prFunction,prEndFunction;
terminal prEjecutar,prPrint,prPrintnl;

//definicion de no terminales
non terminal INICIO,INSTRUCCIONES,INSTRUCCION,DECLARACION,ASIGNACION,EXPRESION;
non terminal LISTAVAR,DECLA;
//non terminal NUMERICA,
non terminal BOOLEANA,CARACTER;
non terminal IF,ELSEIF,COMENTARIOS;
non terminal SWITCH,CASES,CASE;
non terminal FOR,WHILE,DOWHILE,RETURN;
non terminal DATATYPE,PARAMETROS,METODO,METODOP;
non terminal FUNCTIONP,FUNCTION;
non terminal CALL,LISTAEXPCALL,PRINT;
//non terminal SUMA,RESTA,MULTIPLICACION,DIVISION,POTENCIA,MODULO,PARENTESIS,OPERANDO1,OPERANDO2;


precedence left plus,minus;
precedence left per,div,prMod;
precedence left prExponent;
precedence left mayor,menor,mayorigual,menorigual,equals,notEquals;
precedence left prOr,prAnd;
precedence left prNumber,prChain,prChar,prBoolean;
precedence left comma,varName;

//gramaticas
start with INICIO;

INICIO::= prInicio INSTRUCCIONES  prFin {: System.out.println(pythonText); :}
;

INSTRUCCIONES::= INSTRUCCIONES INSTRUCCION
                | INSTRUCCION
;

INSTRUCCION::= DECLARACION dotComma
             | ASIGNACION dotComma
             | IF
             | SWITCH
             | FOR
             | WHILE
             | DOWHILE
             | RETURN dotComma
             | METODO
             | COMENTARIOS
             | FUNCTION
             | CALL dotComma
             | PRINT
             | error INSTRUCCION
             | error dotComma
;

DECLARACION::= prIngresar LISTAVAR prComo DECLA:d {: pythonText += " = "+d+ "\n";:}
;

ASIGNACION::= LISTAVAR tkAsignar EXPRESION;

IF::= prIf EXPRESION prEntonces INSTRUCCIONES prEndIf
    | prIf EXPRESION prEntonces INSTRUCCIONES prElse INSTRUCCIONES prEndIf
    | prIf EXPRESION prEntonces INSTRUCCIONES ELSEIF prElse INSTRUCCIONES prEndIf
;

ELSEIF::= prElseIf EXPRESION prEntonces INSTRUCCIONES
        | ELSEIF prElseIf EXPRESION prEntonces INSTRUCCIONES
;

SWITCH::= prSegun EXPRESION prHacer CASES prEndSegun;

CASES::= CASES CASE
        | CASE
;

CASE::= tkInterLeft EXPRESION tkInterRight prEntonces INSTRUCCIONES 
      | CASE prElse prEntonces INSTRUCCIONES
;

FOR::= prFor varName tkAsignar EXPRESION prHasta EXPRESION prHacer INSTRUCCIONES prEndFor
    |   prFor varName tkAsignar EXPRESION prHasta EXPRESION prHacer prEndFor
    |   prFor varName tkAsignar EXPRESION prHasta EXPRESION prCon prIncremental EXPRESION prHacer INSTRUCCIONES prEndFor
;

WHILE::= prWhile EXPRESION prHacer INSTRUCCIONES prEndWhile
        | prWhile EXPRESION prHacer prEndWhile
;

DOWHILE::= prDo INSTRUCCIONES prDoWhile EXPRESION
        |   prDo prDoWhile EXPRESION
;

RETURN::= prReturn EXPRESION;

METODO::= prMetodo varName METODOP prEndMetodo;

METODOP::= prParametros leftPar PARAMETROS rightPar INSTRUCCIONES 
        |   INSTRUCCIONES 
;

PARAMETROS::= varName DATATYPE
            |  PARAMETROS comma varName DATATYPE 
;

DATATYPE::= prNumber
        |   prChain
        |   prBoolean
        |   prChar
;

FUNCTION::= prFunction varName DATATYPE FUNCTIONP prEndFunction;

FUNCTIONP::= prParametros leftPar PARAMETROS rightPar INSTRUCCIONES
          | INSTRUCCIONES
;

CALL::= prEjecutar varName leftPar rightPar
    |   prEjecutar varName leftPar PARAMETROS rightPar
    |   prEjecutar varName leftPar LISTAEXPCALL rightPar
;

LISTAEXPCALL::= EXPRESION
            |  LISTAEXPCALL comma EXPRESION
;

PRINT::= prPrint EXPRESION dotComma
       | prPrintnl EXPRESION dotComma
;
COMENTARIOS::= multiline
             | comment
;

LISTAVAR::= LISTAVAR comma varName:v1 {: pythonText+= ","+ v1;:}
          | varName:v2 {: pythonText+= v2+"  ";:}
;

DECLA::= prNumber prConValor EXPRESION:exp {:RESULT=exp;:}
       |  prBoolean prConValor BOOLEANA:b {:RESULT=b;:}
       |  prChar prConValor CARACTER:ch {:RESULT=ch;:}
       |  prChain prConValor cadena:c {: RESULT= c;:}
;   

//       prNumber prConValor EXPRESION
 //     |   prNumber prConValor nEntero
//      |   prNumber prConValor nDecimal
//      |   prBoolean prConValor EXPRESION
 //     |   DATATYPE

/*
NUMERICA::= nEntero 
          | nDecimal
;*/
// EXPRESION

BOOLEANA::= prTrue:t {: RESULT= t ;:}
          | prFalse:f {: RESULT= f ;:}
;

CARACTER::= charAscii:ca {: RESULT= ca ;:}
          | charNormal:cn {: RESULT= cn ;:}
;


//DATATYPE::= prChain prConValor cadena
//          | prChar prConValor charAscii
//          | prChar prConValor charNormal
//;



EXPRESION::= EXPRESION:e1 plus:p EXPRESION:e2 {:RESULT=e1+""+p+""+e2;:}
          |  EXPRESION:e3 minus:m EXPRESION:e4  {:RESULT=e3+""+m+""+e4;:}
          |  EXPRESION:e5 per:per EXPRESION:e6 {:RESULT=e5+""+per+""+e6;:} 
          |  EXPRESION:e7 div:div EXPRESION:e8  {:RESULT=e7+""+"/"+""+e8;:}
          |  EXPRESION:e9 prExponent leftCor:corl EXPRESION:e10 rightCor:rcorl {:RESULT=e9+"**"+"("+""+e10+""+")";:}
          |  EXPRESION:e11 prMod:mod EXPRESION:e12 {:RESULT=e11+""+"%"+""+e12;:}
          |  nDecimal:deci  {:RESULT=deci;:}
          |  leftPar:lp EXPRESION:ep rightPar:rp {:RESULT=lp+""+ep+""+rp;:}
          |  leftCor:lc EXPRESION:ep2 rightCor:rc  {:RESULT=lc+""+ep2+""+rc;:}
          |  nEntero:ne {:RESULT=ne;:}
          |  varName:var {:RESULT=var;:}
          |  BOOLEANA:bol {:RESULT=bol;:}
          |  EXPRESION:x mayor:my EXPRESION:x2  {:RESULT=x+""+">"+""+x2;:}
          |  EXPRESION:x3 menor:me EXPRESION:x4  {:RESULT=x3+""+"<"+""+x4;:}
          |  EXPRESION:x5 mayorigual:mi EXPRESION:x6 {:RESULT=x5+""+">="+""+x6;:} 
          |  EXPRESION:x7 menorigual:mei EXPRESION:x8  {:RESULT=x7+""+"<="+""+x8;:}
          |  EXPRESION:x9 equals:eq EXPRESION:x10 {:RESULT=x9+""+"=="+""+x10;:}
          |  EXPRESION:x11 notEquals:ne EXPRESION:x12 {:RESULT=x11+""+"!="+""+x12;:}
          |  EXPRESION:x13 prOr:po EXPRESION:x14 {:RESULT=x13+""+"or"+""+x14;:}
          |  EXPRESION:x15 prAnd:pa EXPRESION:x16 {:RESULT=x15+""+"and"+""+x16;:}
          |  prNot:pno EXPRESION:x17 {:RESULT="not"+""+x17;:}
          |  cadena:ca {:RESULT=ca;:}
          | error EXPRESION
;



