/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,20],$V2=[1,21],$V3=[1,22],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[2,5,25,27,36,43,48,51,53,54,55,56,63,64,65,66,67],$Ve=[1,41],$Vf=[1,43],$Vg=[2,79],$Vh=[1,45],$Vi=[1,46],$Vj=[26,27,30],$Vk=[10,23,38],$Vl=[1,58],$Vm=[1,65],$Vn=[1,59],$Vo=[1,61],$Vp=[1,60],$Vq=[1,62],$Vr=[1,63],$Vs=[1,57],$Vt=[1,64],$Vu=[1,66],$Vv=[1,67],$Vw=[10,26,31,36,52,57,58,59,60,61,62,68,69,70,71,72,73,74,75],$Vx=[1,77],$Vy=[1,90],$Vz=[1,91],$VA=[1,92],$VB=[1,93],$VC=[1,94],$VD=[1,95],$VE=[1,96],$VF=[1,97],$VG=[10,31],$VH=[1,108],$VI=[1,109],$VJ=[1,110],$VK=[1,111],$VL=[1,112],$VM=[1,113],$VN=[2,41],$VO=[1,135],$VP=[10,26,31,36,52,57,58,59,60,61,62,68,69,74,75],$VQ=[10,26,31,36,52,57,58,59,60,61,62,68,69,70,71,74,75],$VR=[1,163],$VS=[1,164],$VT=[1,171],$VU=[1,170],$VV=[1,172],$VW=[1,175],$VX=[1,174],$VY=[36,51,53],$VZ=[1,189],$V_=[36,38],$V$=[1,194],$V01=[1,210],$V11=[2,5,25,27,36,43,45,47,48,51,53,54,55,56,63,64,65,66,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ASIGNACION":8,"CASTEO":9,"ptcoma":10,"INCREMENTO":11,"DECREMENTO":12,"VECTOR":13,"AVECTOR":14,"MODIFICAVECTOR":15,"IF":16,"SWITCH":17,"WHILE":18,"PRINT":19,"PRINTLN":20,"TIPODATO":21,"LISTAID":22,"equals":23,"EXPRESION":24,"parentIzq":25,"parentDer":26,"varName":27,"increment":28,"reduction":29,"corcheL":30,"corcheR":31,"pr_new":32,"tkn_entero":33,"llabre":34,"VECTORES":35,"llcierra":36,"VECTORES2":37,"tkn_coma":38,"tkn_cadena":39,"tkn_char":40,"BOOL":41,"EXPVECTORES":42,"pr_if":43,"CONDICIONAL":44,"pr_else":45,"ELIF":46,"pr_elif":47,"pr_switch":48,"CASES":49,"CASE":50,"pr_case":51,"dospuntos":52,"pr_default":53,"pr_while":54,"pr_print":55,"pr_println":56,"equalsEquals":57,"different":58,"tkn_mayorigual":59,"tkn_menoriugal":60,"tkn_mayor":61,"tkn_menor":62,"pr_int":63,"pr_double":64,"pr_boolean":65,"pr_char":66,"pr_string":67,"sum":68,"difference":69,"product":70,"quotient":71,"potence":72,"mod":73,"or":74,"and":75,"not":76,"tkn_decimal":77,"pr_true":78,"pr_false":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"ptcoma",23:"equals",25:"parentIzq",26:"parentDer",27:"varName",28:"increment",29:"reduction",30:"corcheL",31:"corcheR",32:"pr_new",33:"tkn_entero",34:"llabre",36:"llcierra",38:"tkn_coma",39:"tkn_cadena",40:"tkn_char",43:"pr_if",45:"pr_else",47:"pr_elif",48:"pr_switch",51:"pr_case",52:"dospuntos",53:"pr_default",54:"pr_while",55:"pr_print",56:"pr_println",57:"equalsEquals",58:"different",59:"tkn_mayorigual",60:"tkn_menoriugal",61:"tkn_mayor",62:"tkn_menor",63:"pr_int",64:"pr_double",65:"pr_boolean",66:"pr_char",67:"pr_string",68:"sum",69:"difference",70:"product",71:"quotient",72:"potence",73:"mod",74:"or",75:"and",76:"not",77:"tkn_decimal",78:"pr_true",79:"pr_false"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[7,5],[7,3],[8,4],[9,7],[9,4],[11,2],[12,2],[13,11],[13,19],[13,19],[13,16],[13,9],[13,11],[35,3],[35,1],[35,3],[35,1],[35,3],[35,1],[35,3],[35,1],[37,5],[37,3],[14,4],[14,7],[15,7],[16,7],[16,11],[16,12],[16,8],[16,7],[16,11],[16,12],[16,8],[46,7],[46,8],[46,7],[46,8],[17,7],[49,2],[49,1],[50,4],[50,3],[18,7],[18,7],[19,5],[20,5],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[42,1],[42,1],[21,1],[21,1],[21,1],[21,1],[21,1],[22,3],[22,1],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,3],[24,3],[24,3],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[41,1],[41,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return  $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 3:
 this.$= [$$[$0]] 
break;
case 4:
 this.$=$$[$0]; 
break;
case 5: case 9: case 11: case 12: case 13: case 14: case 15: case 16: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 73: case 74: case 75: case 76: case 77: case 92: case 93: case 94: case 95: case 96: case 97: case 98:
this.$=$$[$0];
break;
case 6: case 7: case 8: case 10: case 39: case 40:
this.$=$$[$0-1];
break;
case 17:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + _$[$0-1].first_line + ', en la columna: ' + _$[$0-1].first_column); 
break;
case 18:

            this.$= new Declaracion($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 19:

        this.$= new Declaracion($$[$0-1],$$[$0-2],"",_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 20:
this.$= new Asignacion($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 21:

            this.$= new Cast($$[$0-5],$$[$0-6],$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
        
break;
case 22:

        this.$= new Cast("","",$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
        
break;
case 23:
this.$= new Incremento($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 24:
this.$= new Decremento($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 25:

    this.$=new Vector($$[$0-7],$$[$0-10],_$[$0-10].first_line,_$[$0-10].first_column);
    
break;
case 26: case 27:

        this.$=new Vector($$[$0-13],$$[$0-18],_$[$0-18].first_line,_$[$0-18].first_column);
        
break;
case 28:

        this.$=new Vector($$[$0-10],$$[$0-15],_$[$0-15].first_line,_$[$0-15].first_column);
        
break;
case 29:

        this.$=new Vector($$[$0-5],$$[$0-8],_$[$0-8].first_line,_$[$0-8].first_column);
        
break;
case 30:

        this.$=new Vector($$[$0-5],$$[$0-10],_$[$0-10].first_line,_$[$0-10].first_column);
        
break;
case 41:
this.$=new AVector($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 42:
this.$=new AVector($$[$0-6],$$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 43:

        this.$=new MVector($$[$0-6],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
        
break;
case 44: case 48:

        this.$=new If($$[$0-1],$$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column);
        
break;
case 45: case 49:

        this.$=new If($$[$0-5],$$[$0-8],_$[$0-10].first_line,_$[$0-10].first_column,undefined,$$[$0-1]);
        
break;
case 46: case 50:

        this.$=new If($$[$0-6],$$[$0-9],_$[$0-11].first_line,_$[$0-11].first_column,$$[$0-4],$$[$0-1]);
        
break;
case 47: case 51:

        this.$=new If($$[$0-2],$$[$0-5],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0]);
        
break;
case 52: case 54:

        this.$=[new Elif($$[$0-1],$$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column)];
        
break;
case 53: case 55:

        $$[$0-7].push(new Elif($$[$0-1],$$[$0-4],_$[$0-7].first_line,_$[$0-7].first_column));
        this.$=$$[$0-7];
        
break;
case 56:

            this.$=new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
        
break;
case 57:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 58:
this.$=[$$[$0]]
break;
case 59:
this.$ = new CaseSwitch($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 60:
this.$ = new CaseSwitch($$[$0-2], undefined, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 61: case 62:
this.$ = new While($$[$0-4], $$[$0-1]);
break;
case 63:

    this.$=new Print($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 64:

    this.$=new Println($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 65: case 66: case 67: case 68: case 69: case 70:
this.$= $$[$0-2]+$$[$0-1]+$$[$0];
break;
case 71: case 72:
this.$=$$[$0]
break;
case 78:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 79:
this.$ = [$$[$0]]
break;
case 80:
this.$=$$[$0-2] + "+" + $$[$0];
break;
case 81:
this.$=$$[$0-2] + "-" + $$[$0];
break;
case 82:
this.$=$$[$0-2] + "*" + $$[$0];
break;
case 83:
this.$=$$[$0-2] + "/" + $$[$0];
break;
case 84:
this.$=$$[$0-2] + "^" + $$[$0];
break;
case 85:
this.$=$$[$0-2] + "%" + $$[$0];
break;
case 86: case 87:
this.$=$$[$0-2] + $$[$0-1] + $$[$0];
break;
case 88:
this.$=$$[$0-1] +$$[$0];
break;
case 89:
this.$= $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 90: case 91:
this.$=$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 99: case 100: case 101:
this.$=[$$[$0]];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{1:[3]},{2:$V0,5:[1,32],6:33,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),{10:[1,34]},{10:[1,35]},{10:[1,36]},o($Vd,[2,9]),{10:[1,37]},o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),o($Vd,[2,15]),o($Vd,[2,16]),{10:[1,38]},{22:39,27:$Ve,30:[1,40]},{23:[1,42],38:$Vf},{21:44,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},o([23,38],$Vg,{28:$Vh,29:$Vi,30:[1,47]}),{25:[1,48]},{25:[1,49]},{25:[1,50]},{25:[1,51]},{25:[1,52]},o($Vj,[2,73]),o($Vj,[2,74]),o($Vj,[2,75]),o($Vj,[2,76]),o($Vj,[2,77]),{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,10]),o($Vd,[2,17]),{10:[1,54],23:[1,53],38:$Vf},{31:[1,55]},o($Vk,$Vg),{11:68,12:69,14:70,24:56,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{27:[1,71]},{26:[1,72]},o($Vw,[2,23]),o($Vw,[2,24]),{9:74,11:68,12:69,14:70,21:76,24:75,25:$Vx,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,42:73,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:79,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,44:78,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:80,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:81,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,44:82,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:83,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:84,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:85,25:[1,86],27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},o($Vd,[2,19]),{27:[1,87],30:[1,88]},{10:[1,89],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{11:68,12:69,14:70,24:98,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:99,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:100,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:101,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},o($Vw,[2,92]),o($Vw,[2,93]),o($Vw,[2,94]),o($Vw,[2,95]),o($Vw,[2,96],{28:$Vh,29:$Vi,30:[1,102]}),o($Vw,[2,97]),o($Vw,[2,98]),o($Vw,[2,99]),o($Vw,[2,100]),o($Vw,[2,101]),o($Vk,[2,78]),{11:68,12:69,14:70,24:103,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{31:[1,104]},o($VG,[2,71]),o($VG,[2,72],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF}),{22:105,27:$Ve},{11:68,12:69,14:70,21:44,24:99,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{26:[1,106]},{26:[1,107],57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{26:[1,114],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{26:[1,115],57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{26:[1,116]},{26:[1,117],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{26:[1,118],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{10:[1,119],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{11:68,12:69,14:70,21:120,24:99,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{23:[1,121]},{31:[1,122]},o($Vd,[2,20]),{11:68,12:69,14:70,24:123,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:124,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:125,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:126,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:127,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:128,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:129,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:130,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},o($Vw,[2,88]),{26:[1,131],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{31:[1,132],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{36:[1,133],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{9:74,11:68,12:69,14:70,21:76,24:75,25:$Vx,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,42:134,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc,76:$Vs,77:$Vt,78:$Vu,79:$Vv},o($VG,[2,22],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF}),{10:$VN,23:[1,136],30:$VO},{23:[1,137],38:$Vf},{34:[1,138]},{34:[1,139]},{11:68,12:69,14:70,24:140,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:141,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:142,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:143,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:144,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{11:68,12:69,14:70,24:145,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{34:[1,146]},{34:[1,147]},{34:[1,148]},{10:[1,149]},{10:[1,150]},o($Vd,[2,18]),{26:[1,151]},{32:[1,152],34:[1,153]},{27:[1,154]},o($VP,[2,80],{70:$VA,71:$VB,72:$VC,73:$VD}),o($VP,[2,81],{70:$VA,71:$VB,72:$VC,73:$VD}),o($VQ,[2,82],{72:$VC,73:$VD}),o($VQ,[2,83],{72:$VC,73:$VD}),o($Vw,[2,84]),o($Vw,[2,85]),o([10,26,31,36,52,57,58,59,60,61,62,74,75],[2,86],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD}),o([10,26,31,36,52,57,58,59,60,61,62,75],[2,87],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE}),o($Vw,[2,89]),o($Vw,[2,90]),o($Vw,[2,91]),{31:[1,155]},{9:74,11:68,12:69,14:70,21:76,24:75,25:$Vx,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,42:156,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{9:74,11:68,12:69,14:70,21:76,24:75,25:$Vx,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,42:157,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{25:[1,158]},{2:$V0,4:159,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{2:$V0,4:160,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{26:[2,65],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{26:[2,66],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{26:[2,67],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{26:[2,68],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{26:[2,69],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{26:[2,70],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{49:161,50:162,51:$VR,53:$VS},{2:$V0,4:165,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{2:$V0,4:166,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},o($Vd,[2,63]),o($Vd,[2,64]),{11:68,12:69,14:70,24:167,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{21:168,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{33:$VT,35:169,39:$VU,40:$VV,41:173,78:$VW,79:$VX},{23:[1,176]},o($Vw,$VN,{30:$VO}),{31:[1,177]},{10:[1,178]},{21:120,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{2:$V0,6:33,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,36:[1,179],43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{2:$V0,6:33,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,36:[1,180],43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{36:[1,181],50:182,51:$VR,53:$VS},o($VY,[2,58]),{11:68,12:69,14:70,24:183,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{52:[1,184]},{2:$V0,6:33,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,36:[1,185],43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{2:$V0,6:33,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,36:[1,186],43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},o($VG,[2,21],{68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF}),{30:[1,187]},{36:[1,188],38:$VZ},o($V_,[2,32]),o($V_,[2,34]),o($V_,[2,36]),o($V_,[2,38]),o($V_,[2,102]),o($V_,[2,103]),{32:[1,190],34:[1,191]},o($Vw,[2,42]),o($Vd,[2,43]),o($Vd,[2,44],{46:193,45:[1,192],47:$V$}),o($Vd,[2,48],{46:196,45:[1,195],47:$V$}),o($Vd,[2,56]),o($VY,[2,57]),{52:[1,197],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{2:$V0,4:198,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},o($Vd,[2,61]),o($Vd,[2,62]),{11:68,12:69,14:70,24:199,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{10:[1,200]},{33:[1,202],39:[1,201],40:[1,203],41:204,78:$VW,79:$VX},{21:205,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{34:[1,207],37:206},{34:[1,208]},o($Vd,[2,47],{45:[1,209],47:$V01}),{25:[1,211]},{34:[1,212]},o($Vd,[2,51],{45:[1,213],47:$V01}),{2:$V0,4:214,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},o($VY,[2,60],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,6:33,2:$V0,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc}),{31:[1,215],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},o($Vd,[2,29]),o($V_,[2,31]),o($V_,[2,33]),o($V_,[2,35]),o($V_,[2,37]),{30:[1,216]},{36:[1,217],38:[1,218]},{33:$VT,35:219,39:$VU,40:$VV,41:173,78:$VW,79:$VX},{2:$V0,4:220,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{34:[1,221]},{25:[1,222]},{11:68,12:69,14:70,24:224,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,44:223,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{2:$V0,4:225,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{34:[1,226]},o($VY,[2,59],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,6:33,2:$V0,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc}),{10:[1,227]},{25:[1,228],33:[1,229]},{10:[1,230]},{34:[1,231]},{36:[1,232],38:$VZ},{2:$V0,6:33,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,36:[1,233],43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{2:$V0,4:234,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{11:68,12:69,14:70,24:236,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,44:235,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{26:[1,237]},{26:[1,238],57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{2:$V0,6:33,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,36:[1,239],43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{2:$V0,4:240,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},o($Vd,[2,25]),{21:241,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{31:[1,242]},o($Vd,[2,30]),{33:$VT,35:243,39:$VU,40:$VV,41:173,78:$VW,79:$VX},o($V_,[2,40]),o($Vd,[2,45]),{2:$V0,6:33,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,36:[1,244],43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{26:[1,245]},{26:[1,246],57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{34:[1,247]},{34:[1,248]},o($Vd,[2,49]),{2:$V0,6:33,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,36:[1,249],43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{26:[1,250]},{30:[1,251]},{36:[1,252],38:$VZ},o($Vd,[2,46]),{34:[1,253]},{34:[1,254]},{2:$V0,4:255,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{2:$V0,4:256,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},o($Vd,[2,50]),{11:68,12:69,14:70,24:257,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},{25:[1,258],33:[1,259]},o($V_,[2,39]),{2:$V0,4:260,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{2:$V0,4:261,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{2:$V0,6:33,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,36:[1,262],43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{2:$V0,6:33,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,36:[1,263],43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{31:[1,264],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{21:265,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{31:[1,266]},{2:$V0,6:33,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,36:[1,267],43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},{2:$V0,6:33,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:18,22:19,25:$V1,27:$V2,36:[1,268],43:$V3,48:$V4,54:$V5,55:$V6,56:$V7,63:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc},o($V11,[2,52]),o($V11,[2,54]),{30:[1,269]},{26:[1,270]},{10:[1,271]},o($V11,[2,53]),o($V11,[2,55]),{33:[1,272]},{11:68,12:69,14:70,24:273,25:$Vl,27:$Vm,30:$Vn,33:$Vo,34:$Vp,39:$Vq,40:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv},o($Vd,[2,28]),{31:[1,274]},{31:[1,275],68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF},{10:[1,276]},{10:[1,277]},o($Vd,[2,26]),o($Vd,[2,27])],
defaultActions: {32:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo js
    const Type = require('./Symbol/Type');
    const {Declaracion} = require('./Instrucciones/Declaration');
    const {Asignacion}= require('./Instrucciones/Asignacion');
    const {Cast}=require('./Instrucciones/Cast');
    const {Incremento}= require('./Instrucciones/Incremento');
    const {Decremento}= require('./Instrucciones/Decremento');
    const {Vector}=require('./Instrucciones/Vector');
    const {AVector}=require('./Instrucciones/Avector');
    const {MVector}=require('./Instrucciones/MVector');
    const {If}=require('./Instrucciones/If');
    const {Elif}=require('./Instrucciones/Elif');
    const {Print}=require('./Instrucciones/Print');
    const {Println}=require('./Instrucciones/Println');
    const {Switch}=require('./Instrucciones/Switch');
    const {CaseSwitch} =require('./Instrucciones/CaseSwitch');
    const {While} =require('./Instrucciones/While');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://blank space ignore
break;
case 1://multiline comments    
break;
case 2:// line comments
break;
case 3:return 78
break;
case 4:return 79
break;
case 5:return 63
break;
case 6:return 64
break;
case 7:return 66
break;
case 8:return 65
break;
case 9:return 67
break;
case 10:return 32
break;
case 11:return 55
break;
case 12:return 56
break;
case 13:return 'pr_const'
break;
case 14:return 43
break;
case 15:return 45
break;
case 16:return 47
break;
case 17:return 48
break;
case 18:return 51
break;
case 19:return 53
break;
case 20:return 54
break;
case 21:return 'pr_for'
break;
case 22:return 'pr_do'
break;
case 23:return 'pr_until'
break;
case 24:return 'pr_break'
break;
case 25:return 'pr_continue'
break;
case 26:return 'pr_void'
break;
case 27:return 'pr_return'
break;
case 28:return 'pr_toLower'
break;
case 29:return 'pr_toUpper'
break;
case 30:return 'pr_round'
break;
case 31:return 'pr_length'
break;
case 32:return 'pr_typeof'
break;
case 33:return 'pr_toString'
break;
case 34:return 'pr_toCharArray'
break;
case 35:return 'pr_push'
break;
case 36:return 'pr_pop'
break;
case 37:return 'run'
break;
case 38:return 60;
break;
case 39:return 62;
break;
case 40:return 59;
break;
case 41:return 61;
break;
case 42:return 57;
break;
case 43:return 23;
break;
case 44:return 58;
break;
case 45:return 'inter';
break;
case 46:return 52;
break;
case 47:return 75;
break;
case 48:return 74;
break;
case 49:return 76;
break;
case 50:return 25;
break;
case 51:return 26;
break;
case 52:return 10;
break;
case 53:return 34;
break;
case 54:return 36;
break;
case 55:return 38;
break;
case 56:return 'tkn_punto';
break;
case 57:return 30;
break;
case 58:return 31;
break;
case 59:return 28;
break;
case 60:return 29;
break;
case 61:return 68;
break;
case 62:return 69;
break;
case 63:return 70;
break;
case 64:return 71;
break;
case 65:return 72;
break;
case 66:return 73;
break;
case 67:return 39
break;
case 68:return 40
break;
case 69:return 77
break;
case 70:return 33
break;
case 71:return 27
break;
case 72:return 5;
break;
case 73:
            console.log("Error L√©xico: "+yy_.yytext +" linea: " + yy_.yylloc.first_line +", columna: "+ yy_.yylloc.first_column+1)

break;
}
},
rules: [/^(?:\s+)/i,/^(?:[\/]\*[^*]*\*+([^/*][^*]*\*+)*[\/])/i,/^(?:[\/][\/][^\n]*)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:("[^\"]*"))/i,/^(?:('[^']'))/i,/^(?:([0-9]+(\.[0-9]+)\b))/i,/^(?:([0-9]+\b))/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}