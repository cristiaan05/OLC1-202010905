/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,28],$V1=[1,31],$V2=[1,32],$V3=[1,33],$V4=[1,34],$V5=[1,35],$V6=[1,36],$V7=[1,37],$V8=[1,38],$V9=[1,39],$Va=[1,40],$Vb=[1,41],$Vc=[1,43],$Vd=[1,44],$Ve=[1,45],$Vf=[1,42],$Vg=[1,46],$Vh=[1,47],$Vi=[1,48],$Vj=[1,49],$Vk=[2,5,36,39,48,54,58,61,63,64,65,69,71,72,73,77,78,79,80,81,89,90,91,92],$Vl=[1,63],$Vm=[1,65],$Vn=[1,67],$Vo=[1,68],$Vp=[1,69],$Vq=[2,110],$Vr=[1,80],$Vs=[1,87],$Vt=[1,81],$Vu=[1,83],$Vv=[1,82],$Vw=[1,84],$Vx=[1,85],$Vy=[1,79],$Vz=[1,86],$VA=[1,88],$VB=[1,89],$VC=[2,108],$VD=[37,39,42,46],$VE=[1,101],$VF=[10,34,50],$VG=[1,107],$VH=[10,37,43,48,50,62,83,84,85,86,87,88,93,94,95,96,97,98,99,100],$VI=[1,113],$VJ=[1,134],$VK=[1,135],$VL=[1,136],$VM=[1,137],$VN=[1,138],$VO=[1,139],$VP=[1,126],$VQ=[1,127],$VR=[1,128],$VS=[1,129],$VT=[1,130],$VU=[1,131],$VV=[1,132],$VW=[1,133],$VX=[2,5,36,39,42,45,46,48,51,52,54,58,61,63,64,65,69,71,72,73,77,78,79,80,81,89,90,91,92,101,102,103,104],$VY=[10,43],$VZ=[37,50],$V_=[36,39,42,45,46,51,52,101,102,103,104],$V$=[2,52],$V01=[1,202],$V11=[10,37,43,48,50,62,83,84,85,86,87,88,93,94,99,100],$V21=[10,37,43,48,50,62,83,84,85,86,87,88,93,94,95,96,99,100],$V31=[10,37,43,48,50,62,83,84,85,86,87,88,99,100],$V41=[1,239],$V51=[1,240],$V61=[1,255],$V71=[1,254],$V81=[1,256],$V91=[1,259],$Va1=[1,258],$Vb1=[48,61,63],$Vc1=[2,32],$Vd1=[1,281],$Ve1=[48,50],$Vf1=[2,5,36,39,48,54,55,57,58,61,63,64,65,69,71,72,73,77,78,79,80,81,89,90,91,92];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ASIGNACION":8,"CASTEO":9,"ptcoma":10,"INCREMENTO":11,"DECREMENTO":12,"VECTOR":13,"AVECTOR":14,"MODIFICAVECTOR":15,"IF":16,"SWITCH":17,"WHILE":18,"FOR":19,"DOWHILE":20,"DOUNTIL":21,"BREAK":22,"CONTINUE":23,"RETURN":24,"FUNCION":25,"METODO":26,"LLAMADA":27,"PRINT":28,"PRINTLN":29,"TOLOWER":30,"TOUPPER":31,"TIPODATO":32,"LISTAID":33,"equals":34,"EXPVECTORES":35,"parentIzq":36,"parentDer":37,"EXPRESION":38,"varName":39,"increment":40,"reduction":41,"corcheL":42,"corcheR":43,"pr_new":44,"tkn_entero":45,"llabre":46,"VECTORES":47,"llcierra":48,"VECTORES2":49,"tkn_coma":50,"tkn_cadena":51,"tkn_char":52,"BOOL":53,"pr_if":54,"pr_else":55,"ELIF":56,"pr_elif":57,"pr_switch":58,"CASES":59,"CASE":60,"pr_case":61,"dospuntos":62,"pr_default":63,"pr_while":64,"pr_for":65,"INICIALIZACION":66,"CONDICION":67,"ACTUALIZACION":68,"pr_do":69,"pr_until":70,"pr_break":71,"pr_continue":72,"pr_return":73,"PARAMETROS":74,"pr_void":75,"PARAMETROSCALL":76,"pr_print":77,"pr_string":78,"pr_toLower":79,"pr_toUpper":80,"pr_println":81,"CONDICIONAL":82,"equalsEquals":83,"different":84,"tkn_mayorigual":85,"tkn_menoriugal":86,"tkn_mayor":87,"tkn_menor":88,"pr_int":89,"pr_double":90,"pr_boolean":91,"pr_char":92,"sum":93,"difference":94,"product":95,"quotient":96,"potence":97,"mod":98,"or":99,"and":100,"not":101,"tkn_decimal":102,"pr_true":103,"pr_false":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"ptcoma",34:"equals",36:"parentIzq",37:"parentDer",39:"varName",40:"increment",41:"reduction",42:"corcheL",43:"corcheR",44:"pr_new",45:"tkn_entero",46:"llabre",48:"llcierra",50:"tkn_coma",51:"tkn_cadena",52:"tkn_char",54:"pr_if",55:"pr_else",57:"pr_elif",58:"pr_switch",61:"pr_case",62:"dospuntos",63:"pr_default",64:"pr_while",65:"pr_for",69:"pr_do",70:"pr_until",71:"pr_break",72:"pr_continue",73:"pr_return",75:"pr_void",77:"pr_print",78:"pr_string",79:"pr_toLower",80:"pr_toUpper",81:"pr_println",83:"equalsEquals",84:"different",85:"tkn_mayorigual",86:"tkn_menoriugal",87:"tkn_mayor",88:"tkn_menor",89:"pr_int",90:"pr_double",91:"pr_boolean",92:"pr_char",93:"sum",94:"difference",95:"product",96:"quotient",97:"potence",98:"mod",99:"or",100:"and",101:"not",102:"tkn_decimal",103:"pr_true",104:"pr_false"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[7,5],[7,3],[8,4],[9,7],[9,4],[11,2],[12,2],[13,11],[13,19],[13,19],[13,16],[13,9],[13,11],[47,3],[47,1],[47,3],[47,1],[47,3],[47,1],[47,3],[47,1],[49,5],[49,3],[14,4],[14,7],[15,7],[16,7],[16,11],[16,12],[16,8],[56,7],[56,8],[17,7],[59,2],[59,1],[60,4],[60,3],[18,7],[19,9],[66,1],[66,1],[67,1],[68,2],[68,2],[68,2],[20,9],[21,9],[22,1],[23,1],[24,2],[24,1],[25,9],[74,4],[74,2],[26,9],[27,4],[27,3],[76,3],[76,1],[28,5],[30,8],[30,7],[30,5],[31,8],[31,7],[31,5],[29,5],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[35,1],[35,1],[32,1],[32,1],[32,1],[32,1],[32,1],[33,3],[33,1],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,2],[38,3],[38,3],[38,3],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[53,1],[53,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return  $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 3:
 this.$= [$$[$0]] 
break;
case 4:
 this.$=$$[$0]; 
break;
case 5: case 9: case 11: case 12: case 13: case 14: case 15: case 21: case 22: case 24: case 25: case 26: case 27: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 104: case 105: case 106: case 107: case 108: case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 133: case 134:
this.$=$$[$0];
break;
case 6: case 7: case 8: case 10: case 18: case 19: case 20: case 23: case 50: case 51:
this.$=$$[$0-1];
break;
case 16: case 17:
this.$ = $$[$0];
break;
case 28:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + _$[$0-1].first_line + ', en la columna: ' + _$[$0-1].first_column); 
break;
case 29:

            this.$= new Declaracion($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 30:

        this.$= new Declaracion($$[$0-1],$$[$0-2],"",_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 31:

    this.$= new Asignacion($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 32:

            this.$= new Cast($$[$0-5],$$[$0-6],$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
        
break;
case 33:

        this.$= new Cast("","",$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
        
break;
case 34:
this.$= new Incremento($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 35:
this.$= new Decremento($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 36:

    this.$=new Vector($$[$0-7],$$[$0-10],_$[$0-10].first_line,_$[$0-10].first_column);
    
break;
case 37: case 38:

        this.$=new Vector($$[$0-13],$$[$0-18],_$[$0-18].first_line,_$[$0-18].first_column);
        
break;
case 39:

        this.$=new Vector($$[$0-10],$$[$0-15],_$[$0-15].first_line,_$[$0-15].first_column);
        
break;
case 40:

        this.$=new Vector($$[$0-5],$$[$0-8],_$[$0-8].first_line,_$[$0-8].first_column);
        
break;
case 41:

        this.$=new Vector($$[$0-5],$$[$0-10],_$[$0-10].first_line,_$[$0-10].first_column);
        
break;
case 52:
this.$=new AVector($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 53:
this.$=new AVector($$[$0-6],$$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 54:

        this.$=new MVector($$[$0-6],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
        
break;
case 55:

        this.$=new If($$[$0-1],$$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column);
        
break;
case 56:

        this.$=new If($$[$0-5],$$[$0-8],_$[$0-10].first_line,_$[$0-10].first_column,undefined,$$[$0-1]);
        
break;
case 57:

        this.$=new If($$[$0-6],$$[$0-9],_$[$0-11].first_line,_$[$0-11].first_column,$$[$0-4],$$[$0-1]);
        
break;
case 58:

        this.$=new If($$[$0-2],$$[$0-5],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0]);
        
break;
case 59:

        this.$=[new Elif($$[$0-1],$$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column)];
        
break;
case 60:

        $$[$0-7].push(new Elif($$[$0-1],$$[$0-4],_$[$0-7].first_line,_$[$0-7].first_column));
        this.$=$$[$0-7];
        
break;
case 61:

            this.$=new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
        
break;
case 62:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 63:
this.$=[$$[$0]]
break;
case 64:
this.$ = new CaseSwitch($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 65:
this.$ = new CaseSwitch($$[$0-2], undefined, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 66:
this.$ = new While($$[$0-4], $$[$0-1]);
break;
case 67:

      this.$ = new For($$[$0-6], $$[$0-5], $$[$0-4], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 68: case 69: case 71: case 72: case 73: case 110:
this.$ = [$$[$0]]
break;
case 70:
this.$ = $$[$0]
break;
case 74:

    this.$ = new DoWhile($$[$0-2], $$[$0-6]);
    
break;
case 75:

        this.$ = new DoUntil($$[$0-2], $$[$0-6]);
    
break;
case 76:
this.$=new Break(_$[$0].first_line, _$[$0].first_column); 
break;
case 77:
this.$=new Continue(_$[$0].first_line, _$[$0].first_column); 
break;
case 78:
 this.$= new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 79:
 this.$= new Return(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 80:

        this.$= new Funcion($$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1],_$[$0-8].first_line, _$[$0-8].first_column );
    
break;
case 81:
this.$=$$[$0-3]+", "+$$[$0-1]+" "+$$[$0];
break;
case 82:
this.$ = $$[$0-1]+" "+$$[$0];
break;
case 83:

        this.$= new Metodo($$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1],_$[$0-8].first_line, _$[$0-8].first_column );
    
break;
case 84:

            this.$= new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 85:

            this.$= new Llamada($$[$0-2],undefined,_$[$0-2].first_line, _$[$0-2].first_column )
    
break;
case 86:
this.$=$$[$0-2]+", "+$$[$0];
break;
case 87:
this.$ = $$[$0]+" ";
break;
case 88:

    this.$=new Print($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 89:

            this.$=new Tolower($$[$0-6],$$[$0-2],_$[$0-7].first_line,_$[$0-7].first_column,"de");
        
break;
case 90:

            this.$=new Tolower($$[$0-6],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column,"asig");
        
break;
case 91:

             this.$=new Tolower("null",$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
        
break;
case 92:

            this.$=new ToUpper($$[$0-6],$$[$0-2],_$[$0-7].first_line,_$[$0-7].first_column,"de");
        
break;
case 93:

            this.$=new ToUpper($$[$0-6],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column,"asig");
        
break;
case 94:

             this.$=new ToUpper("null",$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
        
break;
case 95:

    this.$=new Println($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 96: case 97: case 98: case 99: case 100: case 101:
this.$= $$[$0-2]+$$[$0-1]+$$[$0];
break;
case 102: case 103:
this.$=$$[$0]
break;
case 109:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 111:
this.$=$$[$0-2] + "+" + $$[$0];
break;
case 112:
this.$=$$[$0-2] + "-" + $$[$0];
break;
case 113:
this.$=$$[$0-2] + "*" + $$[$0];
break;
case 114:
this.$=$$[$0-2] + "/" + $$[$0];
break;
case 115:
this.$=$$[$0-2] + "^" + $$[$0];
break;
case 116:
this.$=$$[$0-2] + "%" + $$[$0];
break;
case 117: case 118:
this.$=$$[$0-2] + $$[$0-1] + $$[$0];
break;
case 119:
this.$=$$[$0-1] +$$[$0];
break;
case 120:
this.$= $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 121: case 122:
this.$=$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 130: case 131: case 132:
this.$=[$$[$0]];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{1:[3]},{2:$V0,5:[1,50],6:51,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},o($Vk,[2,3]),o($Vk,[2,4]),o($Vk,[2,5]),{10:[1,52]},{10:[1,53]},{10:[1,54]},o($Vk,[2,9]),{10:[1,55]},o($Vk,[2,11]),o($Vk,[2,12]),o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,17]),{10:[1,56]},{10:[1,57]},{10:[1,58]},o($Vk,[2,21]),o($Vk,[2,22]),{10:[1,59]},o($Vk,[2,24]),o($Vk,[2,25]),o($Vk,[2,26]),o($Vk,[2,27]),{10:[1,60]},{33:61,39:$Vl,42:[1,62]},{34:[1,64],50:$Vm},{32:66,78:$Vn,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{34:[1,72],36:[1,71],40:$Vo,41:$Vp,42:[1,70],50:$Vq},{36:[1,73]},{36:[1,74]},{36:[1,75]},{36:[1,76]},{46:[1,77]},{10:[2,76]},{10:[2,77]},{10:[2,79],11:90,12:91,14:92,27:94,36:$Vr,38:78,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{36:[1,95]},{36:[1,96]},{39:[1,97],42:$VC},{36:[1,98]},{36:[1,99]},o($VD,[2,104]),o($VD,[2,105]),o($VD,[2,106]),o($VD,[2,107]),{1:[2,1]},o($Vk,[2,2]),o($Vk,[2,6]),o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,10]),o($Vk,[2,18]),o($Vk,[2,19]),o($Vk,[2,20]),o($Vk,[2,23]),o($Vk,[2,28]),{10:$VE,34:[1,100],50:$Vm},{43:[1,102]},o($VF,$Vq),{9:104,11:90,12:91,14:92,27:94,32:106,35:103,36:$VG,38:105,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,78:$Vn,82:93,89:$Vg,90:$Vh,91:$Vi,92:$Vj,101:$Vy,102:$Vz,103:$VA,104:$VB},{39:[1,108]},{37:[1,109]},o($VD,$VC),o($VH,[2,34]),o($VH,[2,35]),{9:104,11:90,12:91,14:92,27:94,32:106,35:110,36:$VG,38:105,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,78:$Vn,82:93,89:$Vg,90:$Vh,91:$Vi,92:$Vj,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,32:114,36:$Vr,37:$VI,38:115,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,74:111,76:112,78:$Vn,82:93,89:$Vg,90:$Vh,91:$Vi,92:$Vj,101:$Vy,102:$Vz,103:$VA,104:$VB},{79:[1,116],80:[1,117]},{11:90,12:91,14:92,27:94,36:$Vr,38:118,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:119,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:120,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{7:122,8:123,32:124,33:30,39:$Vl,66:121,78:$Vn,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{2:$V0,4:125,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{10:[2,78],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{11:90,12:91,14:92,27:94,36:$Vr,38:140,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:141,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:142,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:143,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},o($VH,[2,123]),o($VH,[2,124]),o($VH,[2,125]),o($VH,[2,126]),o($VH,[2,127],{36:[1,145],40:$Vo,41:$Vp,42:[1,144]}),o($VH,[2,128]),o($VH,[2,129]),o($VH,[2,130]),o($VH,[2,131]),o($VH,[2,132]),o($VH,[2,133]),o($VH,[2,134]),{11:90,12:91,14:92,27:94,36:$Vr,38:146,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:147,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{34:[1,148]},{11:90,12:91,14:92,27:94,36:$Vr,38:149,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:150,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{9:104,11:90,12:91,14:92,27:94,32:106,35:151,36:[1,152],38:105,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,78:$Vn,82:93,89:$Vg,90:$Vh,91:$Vi,92:$Vj,101:$Vy,102:$Vz,103:$VA,104:$VB},o($VX,[2,30]),{39:[1,153],42:[1,154]},{10:[1,155]},o($VY,[2,102]),o($VY,[2,103],{83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW}),{33:156,39:$Vl},{11:90,12:91,14:92,27:94,32:66,36:$Vr,38:141,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,78:$Vn,82:93,89:$Vg,90:$Vh,91:$Vi,92:$Vj,101:$Vy,102:$Vz,103:$VA,104:$VB},o($VF,[2,109]),{11:90,12:91,14:92,27:94,36:$Vr,38:157,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{43:[1,158]},{37:[1,159],50:[1,160]},{37:[1,161],50:[1,162]},o($VH,[2,85]),{39:[1,163]},o($VZ,[2,87],{83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW}),{36:[1,164]},{36:[1,165]},{37:[1,166],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{37:[1,167],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{37:[1,168],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{11:90,12:91,14:92,27:94,36:$Vr,38:170,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,67:169,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},o($V_,[2,68]),o($V_,[2,69]),{33:171,39:$Vl},{2:$V0,6:51,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,48:[1,172],54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{11:90,12:91,14:92,27:94,36:$Vr,38:173,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:174,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:175,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:176,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:177,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:178,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:179,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:180,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:181,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:182,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:183,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:184,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:185,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:186,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},o($VH,[2,119]),{37:[1,187],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{43:[1,188],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{48:[1,189],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{9:104,11:90,12:91,14:92,27:94,32:106,35:190,36:$VG,38:105,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,78:$Vn,82:93,89:$Vg,90:$Vh,91:$Vi,92:$Vj,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,37:$VI,38:115,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,76:112,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{37:[1,191],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{37:[1,192],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{79:[1,193],80:[1,194]},{37:[1,195],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{37:[1,196],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{10:[1,197]},{11:90,12:91,14:92,27:94,32:198,36:$Vr,38:141,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,78:$Vn,82:93,89:$Vg,90:$Vh,91:$Vi,92:$Vj,101:$Vy,102:$Vz,103:$VA,104:$VB},{34:[1,199]},{43:[1,200]},o([2,5,36,37,39,42,45,46,48,51,52,54,58,61,63,64,65,69,71,72,73,77,78,79,80,81,89,90,91,92,101,102,103,104],[2,31]),{34:[1,201],50:$Vm},o($VY,[2,33],{83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW}),{10:$V$,34:[1,203],42:$V01},{62:[1,204]},{32:205,78:$Vn,89:$Vg,90:$Vh,91:$Vi,92:$Vj},o($VH,[2,84]),{11:90,12:91,14:92,27:94,36:$Vr,38:206,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},o($VZ,[2,82]),{11:90,12:91,14:92,27:94,36:$Vr,38:207,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:208,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{46:[1,209]},{46:[1,210]},{46:[1,211]},{10:[1,213],68:212},{10:[2,70],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{10:$VE,34:[1,214],50:$Vm},{64:[1,215],70:[1,216]},o($V11,[2,111],{95:$VR,96:$VS,97:$VT,98:$VU}),o($V11,[2,112],{95:$VR,96:$VS,97:$VT,98:$VU}),o($V21,[2,113],{97:$VT,98:$VU}),o($V21,[2,114],{97:$VT,98:$VU}),o($VH,[2,115]),o($VH,[2,116]),o([10,37,43,48,50,62,99,100],[2,117],{83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU}),o([10,37,43,48,50,62,100],[2,118],{83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV}),o($V31,[2,96],{93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU}),o($V31,[2,97],{93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU}),o($V31,[2,98],{93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU}),o($V31,[2,99],{93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU}),o($V31,[2,100],{93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU}),o($V31,[2,101],{93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU}),o($VH,[2,120]),o($VH,[2,121]),o($VH,[2,122]),{43:[1,217]},{10:[1,218]},{10:[1,219]},{36:[1,220]},{36:[1,221]},{10:[1,222]},{10:[1,223]},o($VX,[2,29]),{37:[1,224]},{44:[1,225],46:[1,226]},{39:[1,227]},{36:[1,228]},{9:104,11:90,12:91,14:92,27:94,32:106,35:229,36:$VG,38:105,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,78:$Vn,82:93,89:$Vg,90:$Vh,91:$Vi,92:$Vj,101:$Vy,102:$Vz,103:$VA,104:$VB},{9:104,11:90,12:91,14:92,27:94,32:106,35:230,36:$VG,38:105,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,78:$Vn,82:93,89:$Vg,90:$Vh,91:$Vi,92:$Vj,101:$Vy,102:$Vz,103:$VA,104:$VB},{32:231,75:[1,232],78:$Vn,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{39:[1,233]},o($VZ,[2,86],{83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW}),{37:[1,234],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{37:[1,235],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{2:$V0,4:236,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{59:237,60:238,61:$V41,63:$V51},{2:$V0,4:241,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{37:[1,242]},{8:245,11:243,12:244,33:30,39:[1,246]},{9:104,11:90,12:91,14:92,27:94,32:106,35:151,36:$VG,38:105,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,78:$Vn,82:93,89:$Vg,90:$Vh,91:$Vi,92:$Vj,101:$Vy,102:$Vz,103:$VA,104:$VB},{36:[1,247]},{36:[1,248]},o($VH,$V$,{42:$V01}),o($Vk,[2,88]),o($Vk,[2,95]),{11:90,12:91,14:92,27:94,36:$Vr,38:249,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:250,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},o($Vk,[2,91]),o($Vk,[2,94]),{11:90,12:91,14:92,27:94,36:$Vr,38:251,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{32:252,78:$Vn,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{45:$V61,47:253,51:$V71,52:$V81,53:257,103:$V91,104:$Va1},{34:[1,260]},{32:261,78:$Vn,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{43:[1,262]},{10:[1,263]},{46:[1,264]},{46:[1,265]},o($VZ,[2,81]),{10:[1,266]},{10:[1,267]},{2:$V0,6:51,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,48:[1,268],54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{48:[1,269],60:270,61:$V41,63:$V51},o($Vb1,[2,63]),{11:90,12:91,14:92,27:94,36:$Vr,38:271,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{62:[1,272]},{2:$V0,6:51,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,48:[1,273],54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{46:[1,274]},{37:[2,71]},{37:[2,72]},{37:[2,73]},o([34,50],$Vq,{40:$Vo,41:$Vp}),{11:90,12:91,14:92,27:94,36:$Vr,38:275,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{11:90,12:91,14:92,27:94,36:$Vr,38:276,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{37:[1,277],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{37:[1,278],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{10:$Vc1,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{42:[1,279]},{48:[1,280],50:$Vd1},o($Ve1,[2,43]),o($Ve1,[2,45]),o($Ve1,[2,47]),o($Ve1,[2,49]),o($Ve1,[2,135]),o($Ve1,[2,136]),{44:[1,282],46:[1,283]},{37:[1,284]},o($VH,[2,53]),o($Vk,[2,54]),{2:$V0,4:285,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{2:$V0,4:286,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},o($Vk,[2,90]),o($Vk,[2,93]),o($Vk,[2,55],{56:288,55:[1,287],57:[1,289]}),o($Vk,[2,61]),o($Vb1,[2,62]),{62:[1,290],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{2:$V0,4:291,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},o($Vk,[2,66]),{2:$V0,4:292,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{37:[1,293],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{37:[1,294],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{10:[1,295]},{10:[1,296]},{11:90,12:91,14:92,27:94,36:$Vr,38:297,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{10:[1,298]},{45:[1,300],51:[1,299],52:[1,301],53:302,103:$V91,104:$Va1},{32:303,78:$Vn,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{46:[1,305],49:304},{11:90,12:91,14:92,27:94,36:$Vr,38:306,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{2:$V0,6:51,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,48:[1,307],54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{2:$V0,6:51,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,48:[1,308],54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{46:[1,309]},o($Vk,[2,58],{55:[1,310],57:[1,311]}),{36:[1,312]},{2:$V0,4:313,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},o($Vb1,[2,65],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,6:51,2:$V0,36:$V1,39:$V2,54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj}),{2:$V0,6:51,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,48:[1,314],54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{10:[1,315]},{10:[1,316]},o($Vk,[2,89]),o($Vk,[2,92]),{43:[1,317],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},o($Vk,[2,40]),o($Ve1,[2,42]),o($Ve1,[2,44]),o($Ve1,[2,46]),o($Ve1,[2,48]),{42:[1,318]},{48:[1,319],50:[1,320]},{45:$V61,47:321,51:$V71,52:$V81,53:257,103:$V91,104:$Va1},o($VY,$Vc1,{83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW}),o($Vk,[2,80]),o($Vk,[2,83]),{2:$V0,4:322,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{46:[1,323]},{36:[1,324]},{11:90,12:91,14:92,27:94,36:$Vr,38:325,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},o($Vb1,[2,64],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,6:51,2:$V0,36:$V1,39:$V2,54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj}),o($Vk,[2,67]),o($Vk,[2,74]),o($Vk,[2,75]),{10:[1,326]},{36:[1,327],45:[1,328]},{10:[1,329]},{46:[1,330]},{48:[1,331],50:$Vd1},{2:$V0,6:51,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,48:[1,332],54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{2:$V0,4:333,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{11:90,12:91,14:92,27:94,36:$Vr,38:334,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{37:[1,335],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},o($Vk,[2,36]),{32:336,78:$Vn,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{43:[1,337]},o($Vk,[2,41]),{45:$V61,47:338,51:$V71,52:$V81,53:257,103:$V91,104:$Va1},o($Ve1,[2,51]),o($Vk,[2,56]),{2:$V0,6:51,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,48:[1,339],54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{37:[1,340],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{46:[1,341]},{37:[1,342]},{42:[1,343]},{48:[1,344],50:$Vd1},o($Vk,[2,57]),{46:[1,345]},{2:$V0,4:346,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{11:90,12:91,14:92,27:94,36:$Vr,38:347,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},{36:[1,348],45:[1,349]},o($Ve1,[2,50]),{2:$V0,4:350,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{2:$V0,6:51,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,48:[1,351],54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{43:[1,352],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{32:353,78:$Vn,89:$Vg,90:$Vh,91:$Vi,92:$Vj},{43:[1,354]},{2:$V0,6:51,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,33:30,36:$V1,39:$V2,48:[1,355],54:$V3,58:$V4,64:$V5,65:$V6,69:$V7,71:$V8,72:$V9,73:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,89:$Vg,90:$Vh,91:$Vi,92:$Vj},o($Vf1,[2,59]),{42:[1,356]},{37:[1,357]},{10:[1,358]},o($Vf1,[2,60]),{45:[1,359]},{11:90,12:91,14:92,27:94,36:$Vr,38:360,39:$Vs,42:$Vt,45:$Vu,46:$Vv,51:$Vw,52:$Vx,82:93,101:$Vy,102:$Vz,103:$VA,104:$VB},o($Vk,[2,39]),{43:[1,361]},{43:[1,362],83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{10:[1,363]},{10:[1,364]},o($Vk,[2,37]),o($Vk,[2,38])],
defaultActions: {38:[2,76],39:[2,77],50:[2,1],243:[2,71],244:[2,72],245:[2,73]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo js
    const Type = require('./Symbol/Type');
    const {Declaracion} = require('./Instrucciones/Declaration');
    const {Asignacion}= require('./Instrucciones/Asignacion');
    const {Cast}=require('./Instrucciones/Cast');
    const {Incremento}= require('./Instrucciones/Incremento');
    const {Decremento}= require('./Instrucciones/Decremento');
    const {Vector}=require('./Instrucciones/Vector');
    const {AVector}=require('./Instrucciones/Avector');
    const {MVector}=require('./Instrucciones/MVector');
    const {If}=require('./Instrucciones/If');
    const {Elif}=require('./Instrucciones/Elif');
    const {Print}=require('./Instrucciones/Print');
    const {Println}=require('./Instrucciones/Println');
    const {Switch}=require('./Instrucciones/Switch');
    const {CaseSwitch} =require('./Instrucciones/CaseSwitch');
    const {While} =require('./Instrucciones/While');
    const {For} =require('./Instrucciones/For');
    const {DoWhile} =require('./Instrucciones/DoWhile');
    const {DoUntil}=require('./Instrucciones/DoUntil');
    const {Break}=require('./Instrucciones/Break');
    const {Continue}=require('./Instrucciones/Continue');
    const {Return}=require('./Instrucciones/Return');
    const {Funcion}=require('./Instrucciones/Funcion');
    const {Metodo}=require('./Instrucciones/Metodo');
    const {Llamada}=require('./Instrucciones/Llamada');
    const {Tolower}=require('./Instrucciones/ToLower');
    const {ToUpper}=require('./Instrucciones/ToUpper');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://blank space ignore
break;
case 1://multiline comments    
break;
case 2:// line comments
break;
case 3:return 103
break;
case 4:return 104
break;
case 5:return 89
break;
case 6:return 90
break;
case 7:return 92
break;
case 8:return 91
break;
case 9:return 78
break;
case 10:return 44
break;
case 11:return 77
break;
case 12:return 81
break;
case 13:return 'pr_const'
break;
case 14:return 54
break;
case 15:return 55
break;
case 16:return 57
break;
case 17:return 58
break;
case 18:return 61
break;
case 19:return 63
break;
case 20:return 64
break;
case 21:return 65
break;
case 22:return 69
break;
case 23:return 70
break;
case 24:return 71
break;
case 25:return 72
break;
case 26:return 75
break;
case 27:return 73
break;
case 28:return 79
break;
case 29:return 80
break;
case 30:return 'pr_round'
break;
case 31:return 'pr_length'
break;
case 32:return 'pr_typeof'
break;
case 33:return 'pr_toString'
break;
case 34:return 'pr_toCharArray'
break;
case 35:return 'pr_push'
break;
case 36:return 'pr_pop'
break;
case 37:return 'run'
break;
case 38:return 86;
break;
case 39:return 88;
break;
case 40:return 85;
break;
case 41:return 87;
break;
case 42:return 83;
break;
case 43:return 34;
break;
case 44:return 84;
break;
case 45:return 'inter';
break;
case 46:return 62;
break;
case 47:return 100;
break;
case 48:return 99;
break;
case 49:return 101;
break;
case 50:return 36;
break;
case 51:return 37;
break;
case 52:return 10;
break;
case 53:return 46;
break;
case 54:return 48;
break;
case 55:return 50;
break;
case 56:return 'tkn_punto';
break;
case 57:return 42;
break;
case 58:return 43;
break;
case 59:return 40;
break;
case 60:return 41;
break;
case 61:return 93;
break;
case 62:return 94;
break;
case 63:return 95;
break;
case 64:return 96;
break;
case 65:return 97;
break;
case 66:return 98;
break;
case 67:return 51
break;
case 68:return 52
break;
case 69:return 102
break;
case 70:return 45
break;
case 71:return 39
break;
case 72:return 5;
break;
case 73:
            console.log("Error L√©xico: "+yy_.yytext +" linea: " + yy_.yylloc.first_line +", columna: "+ yy_.yylloc.first_column+1)

break;
}
},
rules: [/^(?:\s+)/i,/^(?:[\/]\*[^*]*\*+([^/*][^*]*\*+)*[\/])/i,/^(?:[\/][\/][^\n]*)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:("[^\"]*"))/i,/^(?:('[^']'))/i,/^(?:([0-9]+(\.[0-9]+)\b))/i,/^(?:([0-9]+\b))/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}