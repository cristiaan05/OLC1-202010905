/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,30],$V2=[1,31],$V3=[1,32],$V4=[1,33],$V5=[1,34],$V6=[1,35],$V7=[1,36],$V8=[1,37],$V9=[1,38],$Va=[1,39],$Vb=[1,40],$Vc=[1,42],$Vd=[1,43],$Ve=[1,41],$Vf=[1,44],$Vg=[1,45],$Vh=[1,46],$Vi=[1,47],$Vj=[2,5,35,38,47,53,57,60,62,63,64,68,70,71,72,76,77,78,79,87,88,89,90],$Vk=[1,61],$Vl=[1,63],$Vm=[1,65],$Vn=[33,49],$Vo=[2,105],$Vp=[1,66],$Vq=[1,67],$Vr=[1,77],$Vs=[1,84],$Vt=[1,78],$Vu=[1,80],$Vv=[1,79],$Vw=[1,81],$Vx=[1,82],$Vy=[1,76],$Vz=[1,83],$VA=[1,85],$VB=[1,86],$VC=[2,103],$VD=[36,38,41,45],$VE=[1,97],$VF=[10,33,49],$VG=[1,103],$VH=[10,36,42,47,49,61,81,82,83,84,85,86,91,92,93,94,95,96,97,98],$VI=[1,109],$VJ=[1,128],$VK=[1,129],$VL=[1,130],$VM=[1,131],$VN=[1,132],$VO=[1,133],$VP=[1,120],$VQ=[1,121],$VR=[1,122],$VS=[1,123],$VT=[1,124],$VU=[1,125],$VV=[1,126],$VW=[1,127],$VX=[2,5,35,38,41,44,45,47,50,51,53,57,60,62,63,64,68,70,71,72,76,77,78,79,87,88,89,90,99,100,101,102],$VY=[10,42],$VZ=[36,49],$V_=[35,38,41,44,45,50,51,99,100,101,102],$V$=[2,51],$V01=[1,191],$V11=[10,36,42,47,49,61,81,82,83,84,85,86,91,92,97,98],$V21=[10,36,42,47,49,61,81,82,83,84,85,86,91,92,93,94,97,98],$V31=[10,36,42,47,49,61,81,82,83,84,85,86,97,98],$V41=[1,222],$V51=[1,223],$V61=[1,237],$V71=[1,236],$V81=[1,238],$V91=[1,241],$Va1=[1,240],$Vb1=[47,60,62],$Vc1=[2,31],$Vd1=[1,260],$Ve1=[47,49],$Vf1=[2,5,35,38,47,53,54,56,57,60,62,63,64,68,70,71,72,76,77,78,79,87,88,89,90];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ASIGNACION":8,"CASTEO":9,"ptcoma":10,"INCREMENTO":11,"DECREMENTO":12,"VECTOR":13,"AVECTOR":14,"MODIFICAVECTOR":15,"IF":16,"SWITCH":17,"WHILE":18,"FOR":19,"DOWHILE":20,"DOUNTIL":21,"BREAK":22,"CONTINUE":23,"RETURN":24,"FUNCION":25,"METODO":26,"LLAMADA":27,"PRINT":28,"PRINTLN":29,"TOLOWER":30,"TIPODATO":31,"LISTAID":32,"equals":33,"EXPVECTORES":34,"parentIzq":35,"parentDer":36,"EXPRESION":37,"varName":38,"increment":39,"reduction":40,"corcheL":41,"corcheR":42,"pr_new":43,"tkn_entero":44,"llabre":45,"VECTORES":46,"llcierra":47,"VECTORES2":48,"tkn_coma":49,"tkn_cadena":50,"tkn_char":51,"BOOL":52,"pr_if":53,"pr_else":54,"ELIF":55,"pr_elif":56,"pr_switch":57,"CASES":58,"CASE":59,"pr_case":60,"dospuntos":61,"pr_default":62,"pr_while":63,"pr_for":64,"INICIALIZACION":65,"CONDICION":66,"ACTUALIZACION":67,"pr_do":68,"pr_until":69,"pr_break":70,"pr_continue":71,"pr_return":72,"PARAMETROS":73,"pr_void":74,"PARAMETROSCALL":75,"pr_print":76,"pr_string":77,"pr_toLower":78,"pr_println":79,"CONDICIONAL":80,"equalsEquals":81,"different":82,"tkn_mayorigual":83,"tkn_menoriugal":84,"tkn_mayor":85,"tkn_menor":86,"pr_int":87,"pr_double":88,"pr_boolean":89,"pr_char":90,"sum":91,"difference":92,"product":93,"quotient":94,"potence":95,"mod":96,"or":97,"and":98,"not":99,"tkn_decimal":100,"pr_true":101,"pr_false":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"ptcoma",33:"equals",35:"parentIzq",36:"parentDer",38:"varName",39:"increment",40:"reduction",41:"corcheL",42:"corcheR",43:"pr_new",44:"tkn_entero",45:"llabre",47:"llcierra",49:"tkn_coma",50:"tkn_cadena",51:"tkn_char",53:"pr_if",54:"pr_else",56:"pr_elif",57:"pr_switch",60:"pr_case",61:"dospuntos",62:"pr_default",63:"pr_while",64:"pr_for",68:"pr_do",69:"pr_until",70:"pr_break",71:"pr_continue",72:"pr_return",74:"pr_void",76:"pr_print",77:"pr_string",78:"pr_toLower",79:"pr_println",81:"equalsEquals",82:"different",83:"tkn_mayorigual",84:"tkn_menoriugal",85:"tkn_mayor",86:"tkn_menor",87:"pr_int",88:"pr_double",89:"pr_boolean",90:"pr_char",91:"sum",92:"difference",93:"product",94:"quotient",95:"potence",96:"mod",97:"or",98:"and",99:"not",100:"tkn_decimal",101:"pr_true",102:"pr_false"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[7,5],[7,3],[8,4],[9,7],[9,4],[11,2],[12,2],[13,11],[13,19],[13,19],[13,16],[13,9],[13,11],[46,3],[46,1],[46,3],[46,1],[46,3],[46,1],[46,3],[46,1],[48,5],[48,3],[14,4],[14,7],[15,7],[16,7],[16,11],[16,12],[16,8],[55,7],[55,8],[17,7],[58,2],[58,1],[59,4],[59,3],[18,7],[19,9],[65,1],[65,1],[66,1],[67,2],[67,2],[67,2],[20,9],[21,9],[22,1],[23,1],[24,2],[24,1],[25,9],[73,4],[73,2],[26,9],[27,4],[27,3],[75,3],[75,1],[28,5],[30,8],[30,5],[29,5],[80,3],[80,3],[80,3],[80,3],[80,3],[80,3],[34,1],[34,1],[31,1],[31,1],[31,1],[31,1],[31,1],[32,3],[32,1],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,2],[37,3],[37,3],[37,3],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[52,1],[52,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return  $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 3:
 this.$= [$$[$0]] 
break;
case 4:
 this.$=$$[$0]; 
break;
case 5: case 9: case 11: case 12: case 13: case 14: case 15: case 21: case 22: case 24: case 25: case 26: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 99: case 100: case 101: case 102: case 103: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 128: case 129:
this.$=$$[$0];
break;
case 6: case 7: case 8: case 10: case 18: case 19: case 20: case 23: case 49: case 50:
this.$=$$[$0-1];
break;
case 16: case 17:
this.$ = $$[$0];
break;
case 27:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + _$[$0-1].first_line + ', en la columna: ' + _$[$0-1].first_column); 
break;
case 28:

            this.$= new Declaracion($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 29:

        this.$= new Declaracion($$[$0-1],$$[$0-2],"",_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 30:

    this.$= new Asignacion($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 31:

            this.$= new Cast($$[$0-5],$$[$0-6],$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
        
break;
case 32:

        this.$= new Cast("","",$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
        
break;
case 33:
this.$= new Incremento($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 34:
this.$= new Decremento($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 35:

    this.$=new Vector($$[$0-7],$$[$0-10],_$[$0-10].first_line,_$[$0-10].first_column);
    
break;
case 36: case 37:

        this.$=new Vector($$[$0-13],$$[$0-18],_$[$0-18].first_line,_$[$0-18].first_column);
        
break;
case 38:

        this.$=new Vector($$[$0-10],$$[$0-15],_$[$0-15].first_line,_$[$0-15].first_column);
        
break;
case 39:

        this.$=new Vector($$[$0-5],$$[$0-8],_$[$0-8].first_line,_$[$0-8].first_column);
        
break;
case 40:

        this.$=new Vector($$[$0-5],$$[$0-10],_$[$0-10].first_line,_$[$0-10].first_column);
        
break;
case 51:
this.$=new AVector($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 52:
this.$=new AVector($$[$0-6],$$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 53:

        this.$=new MVector($$[$0-6],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
        
break;
case 54:

        this.$=new If($$[$0-1],$$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column);
        
break;
case 55:

        this.$=new If($$[$0-5],$$[$0-8],_$[$0-10].first_line,_$[$0-10].first_column,undefined,$$[$0-1]);
        
break;
case 56:

        this.$=new If($$[$0-6],$$[$0-9],_$[$0-11].first_line,_$[$0-11].first_column,$$[$0-4],$$[$0-1]);
        
break;
case 57:

        this.$=new If($$[$0-2],$$[$0-5],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0]);
        
break;
case 58:

        this.$=[new Elif($$[$0-1],$$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column)];
        
break;
case 59:

        $$[$0-7].push(new Elif($$[$0-1],$$[$0-4],_$[$0-7].first_line,_$[$0-7].first_column));
        this.$=$$[$0-7];
        
break;
case 60:

            this.$=new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
        
break;
case 61:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 62:
this.$=[$$[$0]]
break;
case 63:
this.$ = new CaseSwitch($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 64:
this.$ = new CaseSwitch($$[$0-2], undefined, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 65:
this.$ = new While($$[$0-4], $$[$0-1]);
break;
case 66:

      this.$ = new For($$[$0-6], $$[$0-5], $$[$0-4], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 67: case 68: case 70: case 71: case 72: case 105:
this.$ = [$$[$0]]
break;
case 69:
this.$ = $$[$0]
break;
case 73:

    this.$ = new DoWhile($$[$0-2], $$[$0-6]);
    
break;
case 74:

        this.$ = new DoUntil($$[$0-2], $$[$0-6]);
    
break;
case 75:
this.$=new Break(_$[$0].first_line, _$[$0].first_column); 
break;
case 76:
this.$=new Continue(_$[$0].first_line, _$[$0].first_column); 
break;
case 77:
 this.$= new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 78:
 this.$= new Return(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 79:

        this.$= new Funcion($$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1],_$[$0-8].first_line, _$[$0-8].first_column );
    
break;
case 80:
this.$=$$[$0-3]+", "+$$[$0-1]+" "+$$[$0];
break;
case 81:
this.$ = $$[$0-1]+" "+$$[$0];
break;
case 82:

        this.$= new Metodo($$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1],_$[$0-8].first_line, _$[$0-8].first_column );
    
break;
case 83:

            this.$= new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 84:

            this.$= new Llamada($$[$0-2],undefined,_$[$0-2].first_line, _$[$0-2].first_column )
    
break;
case 85:
this.$=$$[$0-2]+", "+$$[$0];
break;
case 86:
this.$ = $$[$0]+" ";
break;
case 87:

    this.$=new Print($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 88:

            this.$=new Tolower($$[$0-6],$$[$0-2],_$[$0-7].first_line,_$[$0-7].first_column);
        
break;
case 89:

             this.$=new Tolower("",$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
        
break;
case 90:

    this.$=new Println($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 91: case 92: case 93: case 94: case 95: case 96:
this.$= $$[$0-2]+$$[$0-1]+$$[$0];
break;
case 97: case 98:
this.$=$$[$0]
break;
case 104:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 106:
this.$=$$[$0-2] + "+" + $$[$0];
break;
case 107:
this.$=$$[$0-2] + "-" + $$[$0];
break;
case 108:
this.$=$$[$0-2] + "*" + $$[$0];
break;
case 109:
this.$=$$[$0-2] + "/" + $$[$0];
break;
case 110:
this.$=$$[$0-2] + "^" + $$[$0];
break;
case 111:
this.$=$$[$0-2] + "%" + $$[$0];
break;
case 112: case 113:
this.$=$$[$0-2] + $$[$0-1] + $$[$0];
break;
case 114:
this.$=$$[$0-1] +$$[$0];
break;
case 115:
this.$= $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 116: case 117:
this.$=$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 125: case 126: case 127:
this.$=[$$[$0]];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{1:[3]},{2:$V0,5:[1,48],6:49,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},o($Vj,[2,3]),o($Vj,[2,4]),o($Vj,[2,5]),{10:[1,50]},{10:[1,51]},{10:[1,52]},o($Vj,[2,9]),{10:[1,53]},o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),{10:[1,54]},{10:[1,55]},{10:[1,56]},o($Vj,[2,21]),o($Vj,[2,22]),{10:[1,57]},o($Vj,[2,24]),o($Vj,[2,25]),o($Vj,[2,26]),{10:[1,58]},{32:59,38:$Vk,41:[1,60]},{33:[1,62],49:$Vl},{31:64,77:$Vm,87:$Vf,88:$Vg,89:$Vh,90:$Vi},o($Vn,$Vo,{35:[1,69],39:$Vp,40:$Vq,41:[1,68]}),{35:[1,70]},{35:[1,71]},{35:[1,72]},{35:[1,73]},{45:[1,74]},{10:[2,75]},{10:[2,76]},{10:[2,78],11:87,12:88,14:89,27:91,35:$Vr,37:75,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{35:[1,92]},{35:[1,93]},{38:[1,94],41:$VC},{35:[1,95]},o($VD,[2,99]),o($VD,[2,100]),o($VD,[2,101]),o($VD,[2,102]),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,10]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,23]),o($Vj,[2,27]),{10:$VE,33:[1,96],49:$Vl},{42:[1,98]},o($VF,$Vo),{9:100,11:87,12:88,14:89,27:91,31:102,34:99,35:$VG,37:101,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,77:$Vm,80:90,87:$Vf,88:$Vg,89:$Vh,90:$Vi,99:$Vy,100:$Vz,101:$VA,102:$VB},{38:[1,104]},{36:[1,105]},o($VD,$VC),o($VH,[2,33]),o($VH,[2,34]),{9:100,11:87,12:88,14:89,27:91,31:102,34:106,35:$VG,37:101,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,77:$Vm,80:90,87:$Vf,88:$Vg,89:$Vh,90:$Vi,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,31:110,35:$Vr,36:$VI,37:111,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,73:107,75:108,77:$Vm,80:90,87:$Vf,88:$Vg,89:$Vh,90:$Vi,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:112,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:113,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:114,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{7:116,8:117,31:118,32:29,38:$Vk,65:115,77:$Vm,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{2:$V0,4:119,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{10:[2,77],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{11:87,12:88,14:89,27:91,35:$Vr,37:134,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:135,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:136,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:137,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},o($VH,[2,118]),o($VH,[2,119]),o($VH,[2,120]),o($VH,[2,121]),o($VH,[2,122],{35:[1,139],39:$Vp,40:$Vq,41:[1,138]}),o($VH,[2,123]),o($VH,[2,124]),o($VH,[2,125]),o($VH,[2,126]),o($VH,[2,127]),o($VH,[2,128]),o($VH,[2,129]),{11:87,12:88,14:89,27:91,35:$Vr,37:140,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:141,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{33:[1,142]},{11:87,12:88,14:89,27:91,35:$Vr,37:143,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{9:100,11:87,12:88,14:89,27:91,31:102,34:144,35:[1,145],37:101,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,77:$Vm,80:90,87:$Vf,88:$Vg,89:$Vh,90:$Vi,99:$Vy,100:$Vz,101:$VA,102:$VB},o($VX,[2,29]),{38:[1,146],41:[1,147]},{10:[1,148]},o($VY,[2,97]),o($VY,[2,98],{81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),{32:149,38:$Vk},{11:87,12:88,14:89,27:91,31:64,35:$Vr,37:135,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,77:$Vm,80:90,87:$Vf,88:$Vg,89:$Vh,90:$Vi,99:$Vy,100:$Vz,101:$VA,102:$VB},o($VF,[2,104]),{11:87,12:88,14:89,27:91,35:$Vr,37:150,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{42:[1,151]},{36:[1,152],49:[1,153]},{36:[1,154],49:[1,155]},o($VH,[2,84]),{38:[1,156]},o($VZ,[2,86],{81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),{36:[1,157],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{36:[1,158],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{36:[1,159],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{11:87,12:88,14:89,27:91,35:$Vr,37:161,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,66:160,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},o($V_,[2,67]),o($V_,[2,68]),{32:162,38:$Vk},{2:$V0,6:49,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,47:[1,163],53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{11:87,12:88,14:89,27:91,35:$Vr,37:164,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:165,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:166,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:167,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:168,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:169,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:170,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:171,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:172,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:173,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:174,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:175,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:176,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:177,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},o($VH,[2,114]),{36:[1,178],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{42:[1,179],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{47:[1,180],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{9:100,11:87,12:88,14:89,27:91,31:102,34:181,35:$VG,37:101,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,77:$Vm,80:90,87:$Vf,88:$Vg,89:$Vh,90:$Vi,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,36:$VI,37:111,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,75:108,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{36:[1,182],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{36:[1,183],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{78:[1,184]},{36:[1,185],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{10:[1,186]},{11:87,12:88,14:89,27:91,31:187,35:$Vr,37:135,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,77:$Vm,80:90,87:$Vf,88:$Vg,89:$Vh,90:$Vi,99:$Vy,100:$Vz,101:$VA,102:$VB},{33:[1,188]},{42:[1,189]},o([2,5,35,36,38,41,44,45,47,50,51,53,57,60,62,63,64,68,70,71,72,76,77,78,79,87,88,89,90,99,100,101,102],[2,30]),{33:[1,190],49:$Vl},o($VY,[2,32],{81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),{10:$V$,33:[1,192],41:$V01},{61:[1,193]},{31:194,77:$Vm,87:$Vf,88:$Vg,89:$Vh,90:$Vi},o($VH,[2,83]),{11:87,12:88,14:89,27:91,35:$Vr,37:195,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},o($VZ,[2,81]),{45:[1,196]},{45:[1,197]},{45:[1,198]},{10:[1,200],67:199},{10:[2,69],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{10:$VE,33:[1,201],49:$Vl},{63:[1,202],69:[1,203]},o($V11,[2,106],{93:$VR,94:$VS,95:$VT,96:$VU}),o($V11,[2,107],{93:$VR,94:$VS,95:$VT,96:$VU}),o($V21,[2,108],{95:$VT,96:$VU}),o($V21,[2,109],{95:$VT,96:$VU}),o($VH,[2,110]),o($VH,[2,111]),o([10,36,42,47,49,61,97,98],[2,112],{81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU}),o([10,36,42,47,49,61,98],[2,113],{81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV}),o($V31,[2,91],{91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU}),o($V31,[2,92],{91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU}),o($V31,[2,93],{91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU}),o($V31,[2,94],{91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU}),o($V31,[2,95],{91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU}),o($V31,[2,96],{91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU}),o($VH,[2,115]),o($VH,[2,116]),o($VH,[2,117]),{42:[1,204]},{10:[1,205]},{10:[1,206]},{35:[1,207]},{10:[1,208]},o($VX,[2,28]),{36:[1,209]},{43:[1,210],45:[1,211]},{38:[1,212]},{35:[1,213]},{9:100,11:87,12:88,14:89,27:91,31:102,34:214,35:$VG,37:101,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,77:$Vm,80:90,87:$Vf,88:$Vg,89:$Vh,90:$Vi,99:$Vy,100:$Vz,101:$VA,102:$VB},{9:100,11:87,12:88,14:89,27:91,31:102,34:215,35:$VG,37:101,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,77:$Vm,80:90,87:$Vf,88:$Vg,89:$Vh,90:$Vi,99:$Vy,100:$Vz,101:$VA,102:$VB},{31:216,74:[1,217],77:$Vm,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{38:[1,218]},o($VZ,[2,85],{81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),{2:$V0,4:219,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{58:220,59:221,60:$V41,62:$V51},{2:$V0,4:224,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{36:[1,225]},{8:228,11:226,12:227,32:29,38:[1,229]},{9:100,11:87,12:88,14:89,27:91,31:102,34:144,35:$VG,37:101,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,77:$Vm,80:90,87:$Vf,88:$Vg,89:$Vh,90:$Vi,99:$Vy,100:$Vz,101:$VA,102:$VB},{35:[1,230]},{35:[1,231]},o($VH,$V$,{41:$V01}),o($Vj,[2,87]),o($Vj,[2,90]),{11:87,12:88,14:89,27:91,35:$Vr,37:232,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},o($Vj,[2,89]),{11:87,12:88,14:89,27:91,35:$Vr,37:233,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{31:234,77:$Vm,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{44:$V61,46:235,50:$V71,51:$V81,52:239,101:$V91,102:$Va1},{33:[1,242]},{31:243,77:$Vm,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{42:[1,244]},{10:[1,245]},{45:[1,246]},{45:[1,247]},o($VZ,[2,80]),{2:$V0,6:49,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,47:[1,248],53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{47:[1,249],59:250,60:$V41,62:$V51},o($Vb1,[2,62]),{11:87,12:88,14:89,27:91,35:$Vr,37:251,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{61:[1,252]},{2:$V0,6:49,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,47:[1,253],53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{45:[1,254]},{36:[2,70]},{36:[2,71]},{36:[2,72]},o($Vn,$Vo,{39:$Vp,40:$Vq}),{11:87,12:88,14:89,27:91,35:$Vr,37:255,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{11:87,12:88,14:89,27:91,35:$Vr,37:256,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{36:[1,257],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{10:$Vc1,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{41:[1,258]},{47:[1,259],49:$Vd1},o($Ve1,[2,42]),o($Ve1,[2,44]),o($Ve1,[2,46]),o($Ve1,[2,48]),o($Ve1,[2,130]),o($Ve1,[2,131]),{43:[1,261],45:[1,262]},{36:[1,263]},o($VH,[2,52]),o($Vj,[2,53]),{2:$V0,4:264,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{2:$V0,4:265,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},o($Vj,[2,54],{55:267,54:[1,266],56:[1,268]}),o($Vj,[2,60]),o($Vb1,[2,61]),{61:[1,269],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{2:$V0,4:270,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},o($Vj,[2,65]),{2:$V0,4:271,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{36:[1,272],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{36:[1,273],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{10:[1,274]},{11:87,12:88,14:89,27:91,35:$Vr,37:275,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{10:[1,276]},{44:[1,278],50:[1,277],51:[1,279],52:280,101:$V91,102:$Va1},{31:281,77:$Vm,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{45:[1,283],48:282},{11:87,12:88,14:89,27:91,35:$Vr,37:284,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{2:$V0,6:49,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,47:[1,285],53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{2:$V0,6:49,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,47:[1,286],53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{45:[1,287]},o($Vj,[2,57],{54:[1,288],56:[1,289]}),{35:[1,290]},{2:$V0,4:291,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},o($Vb1,[2,64],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,6:49,2:$V0,35:$V1,38:$V2,53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi}),{2:$V0,6:49,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,47:[1,292],53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{10:[1,293]},{10:[1,294]},o($Vj,[2,88]),{42:[1,295],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},o($Vj,[2,39]),o($Ve1,[2,41]),o($Ve1,[2,43]),o($Ve1,[2,45]),o($Ve1,[2,47]),{41:[1,296]},{47:[1,297],49:[1,298]},{44:$V61,46:299,50:$V71,51:$V81,52:239,101:$V91,102:$Va1},o($VY,$Vc1,{81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),o($Vj,[2,79]),o($Vj,[2,82]),{2:$V0,4:300,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{45:[1,301]},{35:[1,302]},{11:87,12:88,14:89,27:91,35:$Vr,37:303,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},o($Vb1,[2,63],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,6:49,2:$V0,35:$V1,38:$V2,53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi}),o($Vj,[2,66]),o($Vj,[2,73]),o($Vj,[2,74]),{10:[1,304]},{35:[1,305],44:[1,306]},{10:[1,307]},{45:[1,308]},{47:[1,309],49:$Vd1},{2:$V0,6:49,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,47:[1,310],53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{2:$V0,4:311,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{11:87,12:88,14:89,27:91,35:$Vr,37:312,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{36:[1,313],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},o($Vj,[2,35]),{31:314,77:$Vm,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{42:[1,315]},o($Vj,[2,40]),{44:$V61,46:316,50:$V71,51:$V81,52:239,101:$V91,102:$Va1},o($Ve1,[2,50]),o($Vj,[2,55]),{2:$V0,6:49,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,47:[1,317],53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{36:[1,318],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{45:[1,319]},{36:[1,320]},{41:[1,321]},{47:[1,322],49:$Vd1},o($Vj,[2,56]),{45:[1,323]},{2:$V0,4:324,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{11:87,12:88,14:89,27:91,35:$Vr,37:325,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},{35:[1,326],44:[1,327]},o($Ve1,[2,49]),{2:$V0,4:328,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{2:$V0,6:49,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,47:[1,329],53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{42:[1,330],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{31:331,77:$Vm,87:$Vf,88:$Vg,89:$Vh,90:$Vi},{42:[1,332]},{2:$V0,6:49,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:28,32:29,35:$V1,38:$V2,47:[1,333],53:$V3,57:$V4,63:$V5,64:$V6,68:$V7,70:$V8,71:$V9,72:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi},o($Vf1,[2,58]),{41:[1,334]},{36:[1,335]},{10:[1,336]},o($Vf1,[2,59]),{44:[1,337]},{11:87,12:88,14:89,27:91,35:$Vr,37:338,38:$Vs,41:$Vt,44:$Vu,45:$Vv,50:$Vw,51:$Vx,80:90,99:$Vy,100:$Vz,101:$VA,102:$VB},o($Vj,[2,38]),{42:[1,339]},{42:[1,340],81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{10:[1,341]},{10:[1,342]},o($Vj,[2,36]),o($Vj,[2,37])],
defaultActions: {37:[2,75],38:[2,76],48:[2,1],226:[2,70],227:[2,71],228:[2,72]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo js
    const Type = require('./Symbol/Type');
    const {Declaracion} = require('./Instrucciones/Declaration');
    const {Asignacion}= require('./Instrucciones/Asignacion');
    const {Cast}=require('./Instrucciones/Cast');
    const {Incremento}= require('./Instrucciones/Incremento');
    const {Decremento}= require('./Instrucciones/Decremento');
    const {Vector}=require('./Instrucciones/Vector');
    const {AVector}=require('./Instrucciones/Avector');
    const {MVector}=require('./Instrucciones/MVector');
    const {If}=require('./Instrucciones/If');
    const {Elif}=require('./Instrucciones/Elif');
    const {Print}=require('./Instrucciones/Print');
    const {Println}=require('./Instrucciones/Println');
    const {Switch}=require('./Instrucciones/Switch');
    const {CaseSwitch} =require('./Instrucciones/CaseSwitch');
    const {While} =require('./Instrucciones/While');
    const {For} =require('./Instrucciones/For');
    const {DoWhile} =require('./Instrucciones/DoWhile');
    const {DoUntil}=require('./Instrucciones/DoUntil');
    const {Break}=require('./Instrucciones/Break');
    const {Continue}=require('./Instrucciones/Continue');
    const {Return}=require('./Instrucciones/Return');
    const {Funcion}=require('./Instrucciones/Funcion');
    const {Metodo}=require('./Instrucciones/Metodo');
    const {Llamada}=require('./Instrucciones/Llamada');
    const {Tolower}=require('./Instrucciones/ToLower');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://blank space ignore
break;
case 1://multiline comments    
break;
case 2:// line comments
break;
case 3:return 101
break;
case 4:return 102
break;
case 5:return 87
break;
case 6:return 88
break;
case 7:return 90
break;
case 8:return 89
break;
case 9:return 77
break;
case 10:return 43
break;
case 11:return 76
break;
case 12:return 79
break;
case 13:return 'pr_const'
break;
case 14:return 53
break;
case 15:return 54
break;
case 16:return 56
break;
case 17:return 57
break;
case 18:return 60
break;
case 19:return 62
break;
case 20:return 63
break;
case 21:return 64
break;
case 22:return 68
break;
case 23:return 69
break;
case 24:return 70
break;
case 25:return 71
break;
case 26:return 74
break;
case 27:return 72
break;
case 28:return 78
break;
case 29:return 'pr_toUpper'
break;
case 30:return 'pr_round'
break;
case 31:return 'pr_length'
break;
case 32:return 'pr_typeof'
break;
case 33:return 'pr_toString'
break;
case 34:return 'pr_toCharArray'
break;
case 35:return 'pr_push'
break;
case 36:return 'pr_pop'
break;
case 37:return 'run'
break;
case 38:return 84;
break;
case 39:return 86;
break;
case 40:return 83;
break;
case 41:return 85;
break;
case 42:return 81;
break;
case 43:return 33;
break;
case 44:return 82;
break;
case 45:return 'inter';
break;
case 46:return 61;
break;
case 47:return 98;
break;
case 48:return 97;
break;
case 49:return 99;
break;
case 50:return 35;
break;
case 51:return 36;
break;
case 52:return 10;
break;
case 53:return 45;
break;
case 54:return 47;
break;
case 55:return 49;
break;
case 56:return 'tkn_punto';
break;
case 57:return 41;
break;
case 58:return 42;
break;
case 59:return 39;
break;
case 60:return 40;
break;
case 61:return 91;
break;
case 62:return 92;
break;
case 63:return 93;
break;
case 64:return 94;
break;
case 65:return 95;
break;
case 66:return 96;
break;
case 67:return 50
break;
case 68:return 51
break;
case 69:return 100
break;
case 70:return 44
break;
case 71:return 38
break;
case 72:return 5;
break;
case 73:
            console.log("Error L√©xico: "+yy_.yytext +" linea: " + yy_.yylloc.first_line +", columna: "+ yy_.yylloc.first_column+1)

break;
}
},
rules: [/^(?:\s+)/i,/^(?:[\/]\*[^*]*\*+([^/*][^*]*\*+)*[\/])/i,/^(?:[\/][\/][^\n]*)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:("[^\"]*"))/i,/^(?:('[^']'))/i,/^(?:([0-9]+(\.[0-9]+)\b))/i,/^(?:([0-9]+\b))/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}